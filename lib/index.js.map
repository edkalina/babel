{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/plugins/estree.js","../src/util/whitespace.js","../src/tokenizer/context.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugin-utils.js","../src/options.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/location.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  modulo: createBinop(\"%\", 10),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ASYNC        = 0b000000100,\n             SCOPE_GENERATOR    = 0b000001000,\n             SCOPE_ARROW        = 0b000010000,\n             SCOPE_SIMPLE_CATCH = 0b000100000,\n             SCOPE_SUPER        = 0b001000000,\n             SCOPE_DIRECT_SUPER = 0b010000000,\n             SCOPE_CLASS        = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ASYNC\n  | typeof SCOPE_GENERATOR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\nexport function functionFlags(isAsync: boolean, isGenerator: boolean) {\n  return (\n    SCOPE_FUNCTION |\n    (isAsync ? SCOPE_ASYNC : 0) |\n    (isGenerator ? SCOPE_GENERATOR : 0)\n  );\n}\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_FN_TYPE    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = BIND_TS_FN_TYPE;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_FN_TYPE\n  | typeof BIND_TS_NAMESPACE;\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      }\n\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n        this.raise(\n          start,\n          \"setter function argument must not be a rest parameter\",\n        );\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n            );\n          });\n          break;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n      }\n    }\n\n    checkPropClash(\n      prop: N.ObjectMember | N.SpreadElement,\n      propHash: { [key: string]: boolean },\n    ): void {\n      if (\n        prop.type === \"SpreadElement\" ||\n        prop.computed ||\n        prop.method ||\n        // $FlowIgnore\n        prop.shorthand\n      ) {\n        return;\n      }\n\n      const key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\" && prop.kind === \"init\") {\n        if (propHash.proto) {\n          this.raise(key.start, \"Redefinition of __proto__ property\");\n        }\n        propHash.proto = true;\n      }\n    }\n\n    isStrictBody(node: { body: N.BlockStatement }): boolean {\n      const isBlockStatement = node.body.type === \"BlockStatement\";\n\n      if (isBlockStatement && node.body.body.length > 0) {\n        for (const directive of node.body.body) {\n          if (\n            directive.type === \"ExpressionStatement\" &&\n            directive.expression.type === \"Literal\"\n          ) {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            // Break for the first non literal expression\n            break;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        (!stmt.expression.extra || !stmt.expression.extra.parenthesized)\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refShorthandDefaultPos?: ?Pos): N.Expression {\n      switch (this.state.type) {\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refShorthandDefaultPos);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refShorthandDefaultPos: ?Pos,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refShorthandDefaultPos,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value, isBinding, contextDescription);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isBinding, contextDescription);\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isBinding: ?boolean,\n      isLast: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(\n          prop.key.start,\n          \"Object pattern can't contain getter or setter\",\n        );\n      } else if (prop.method) {\n        this.raise(prop.key.start, \"Object pattern can't contain methods\");\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n      }\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function(prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" && !this.state.exprAllowed) ||\n      (this.state.value === \"yield\" && this.scope.inGenerator)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function(prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function() {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function(prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function(prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { keywords } from \"../tokenizer/types\";\n\nconst reservedWords = {\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\n\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(\n  reservedWords.strict.concat(reservedWords.strictBind),\n);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport const isReservedWord = (word: string, inModule: boolean): boolean => {\n  return (inModule && word === \"await\") || word === \"enum\";\n};\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictBindSet.has(word);\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 0x80.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n","// @flow\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  functionFlags,\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  SCOPE_ARROW,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\n\nconst reservedTypes = [\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"false\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n  \"interface\",\n  \"extends\",\n  \"_\",\n];\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(\n          moduloPos,\n          \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n        );\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.unexpected(\n              this.state.lastTokStart,\n              \"`declare module` cannot be used inside another `declare module`\",\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.unexpected(\n              this.state.lastTokStart,\n              \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            \"Only declares and type imports are allowed inside declare module\",\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      const errorMessage =\n        \"Found both `declare module.exports` and `declare export` in the same module. \" +\n        \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.unexpected(bodyElement.start, errorMessage);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.unexpected(\n              bodyElement.start,\n              \"Duplicate `declare module.exports` statement\",\n            );\n          }\n          if (kind === \"ES\") this.unexpected(bodyElement.start, errorMessage);\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          this.unexpected(\n            this.state.start,\n            `\\`declare export ${label}\\` is not supported. Use \\`${suggestion}\\` instead`,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(/*liberal*/ !isClass);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        throw this.unexpected(\n          null,\n          \"`_` is only allowed as a type argument to call or new\",\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number) {\n      if (reservedTypes.indexOf(word) > -1) {\n        this.raise(startLoc, `Cannot overwrite reserved type ${word}`);\n      }\n    }\n\n    flowParseRestrictedIdentifier(liberal?: boolean): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier();\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.unexpected(\n            nodeStart,\n            // eslint-disable-next-line max-len\n            \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n          );\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.match(tt.ellipsis)) {\n        if (!allowSpread) {\n          this.unexpected(\n            null,\n            \"Spread operator cannot appear in class or interface definitions\",\n          );\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.unexpected(\n            variance.start,\n            \"Spread properties cannot have variance\",\n          );\n        }\n        this.expect(tt.ellipsis);\n        const isInexactToken = this.eat(tt.comma) || this.eat(tt.semi);\n\n        if (this.match(tt.braceR)) {\n          if (allowInexact) return null;\n          this.unexpected(\n            null,\n            \"Explicit inexact syntax is only allowed inside inexact objects\",\n          );\n        }\n\n        if (this.match(tt.braceBarR)) {\n          this.unexpected(\n            null,\n            \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n          );\n        }\n\n        if (isInexactToken) {\n          this.unexpected(\n            null,\n            \"Explicit inexact syntax must appear at the end of an inexact object\",\n          );\n        }\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(\n          start,\n          \"setter function argument must not be a rest parameter\",\n        );\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.parseIdentifier();\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.parseIdentifier();\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            this.unexpected(\n              null,\n              `Unexpected token, expected \"number\" or \"bigint\"`,\n            );\n          }\n\n          this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\")\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const state = this.state.clone();\n        try {\n          return super.parseConditional(expr, noIn, startPos, startLoc);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n            refNeedsArrowPos.start = err.pos || this.state.start;\n            return expr;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(\n            state.start,\n            \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n          );\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n      }\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.toAssignableList(\n              // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n              // has not been converted yet.\n              ((node.params: any): N.Expression[]),\n              true,\n              \"arrow function parameters\",\n            );\n            // Enter scope, as checkParams defines bindings\n            this.scope.enter(functionFlags(false, false) | SCOPE_ARROW);\n            // Use super's method to force the parameters to be checked\n            super.checkParams(node, false, true);\n            this.scope.exit();\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        for (let i = 0; i < arrows.length; i++) {\n          this.toAssignableList(\n            ((node.params: any): N.Expression[]),\n            true,\n            \"arrow function parameters\",\n          );\n        }\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => {\n        try {\n          this.toAssignableList(\n            ((node.params: any): N.Expression[]),\n            true,\n            \"arrow function parameters\",\n          );\n          return true;\n        } catch (err) {\n          return false;\n        }\n      });\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(\n          this.typeCastToParameter(node),\n          isBinding,\n          contextDescription,\n        );\n      } else {\n        return super.toAssignable(node, isBinding, contextDescription);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, isBinding, contextDescription);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          (!expr.extra || !expr.extra.parenthesized) &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(\n            expr.typeAnnotation.start,\n            \"The type cast expression is expected to be wrapped with parenthesis\",\n          );\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refShorthandDefaultPos: ?Pos,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refShorthandDefaultPos,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          throw this.raise(\n            param.start,\n            \"A binding pattern parameter cannot be optional in an implementation signature.\",\n          );\n        }\n\n        param.optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          \"Type annotations must come before default assignments, \" +\n            \"e.g. instead of `age = 25: number` use `age: number = 25`\",\n        );\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(true)\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          \"The `type` and `typeof` keywords on named imports can only be used on regular \" +\n            \"`import` statements. It cannot be used with `import type` or `import typeof` statements\",\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refShorthandDefaultPos?: ?Pos,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let jsxError = null;\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        const state = this.state.clone();\n        try {\n          return super.parseMaybeAssign(\n            noIn,\n            refShorthandDefaultPos,\n            afterLeftParse,\n            refNeedsArrowPos,\n          );\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n\n            // Remove `tc.j_expr` and `tc.j_oTag` from context added\n            // by parsing `jsxTagStart` to stop the JSX plugin from\n            // messing with the tokens\n            const cLength = this.state.context.length;\n            if (this.state.context[cLength - 1] === tc.j_oTag) {\n              this.state.context.length -= 2;\n            }\n\n            jsxError = err;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      if (jsxError != null || this.isRelational(\"<\")) {\n        let arrowExpression;\n        let typeParameters;\n        try {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refShorthandDefaultPos,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        } catch (err) {\n          throw jsxError || err;\n        }\n\n        if (arrowExpression.type === \"ArrowFunctionExpression\") {\n          return arrowExpression;\n        } else if (jsxError != null) {\n          throw jsxError;\n        } else {\n          this.raise(\n            typeParameters.start,\n            \"Expected an arrow function after this type parameter declaration\",\n          );\n        }\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refShorthandDefaultPos,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const state = this.state.clone();\n        try {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          // assign after it is clear it is an arrow\n          node.returnType = typeNode.typeAnnotation\n            ? this.finishNode(typeNode, \"TypeAnnotation\")\n            : null;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(node, allowDuplicates, isArrowFunction);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        let error;\n        try {\n          const node = this.parseAsyncArrowWithTypeParameters(\n            startPos,\n            startLoc,\n          );\n          if (node) return node;\n        } catch (e) {\n          error = e;\n        }\n\n        this.state = state;\n        try {\n          return super.parseSubscripts(base, startPos, startLoc, noCalls);\n        } catch (e) {\n          throw error || e;\n        }\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n      maybeAsyncArrow: boolean,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        this.expectPlugin(\"optionalChaining\");\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishNode(node, \"OptionalCallExpression\");\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const state = this.state.clone();\n        try {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            node.optional = false;\n            return this.finishNode(node, \"OptionalCallExpression\");\n          }\n          return this.finishNode(node, \"CallExpression\");\n        } catch (e) {\n          if (e instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n        maybeAsyncArrow,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        try {\n          targs = this.flowParseTypeParameterInstantiationCallOrNew();\n        } catch (e) {\n          if (e instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            throw e;\n          }\n        }\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, \"Unterminated flow-comment\");\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(\n            null,\n            \"Cannot have a flow comment inside another flow comment\",\n          );\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        this.raise(this.state.pos, \"Unterminated comment\");\n      }\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Pos, Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function() {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function(prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          this.raise(this.state.start, \"Unterminated JSX contents\");\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          this.raise(this.state.start, \"Unterminated string constant\");\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName(): N.JSXNamespacedName | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            throw this.raise(\n              node.start,\n              \"JSX attributes must only be assigned a non-empty expression\",\n            );\n          } else {\n            return node;\n          }\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(\n            this.state.start,\n            \"JSX value should be either an expression or a quoted JSX text\",\n          );\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.isMeta = this.eat(tt.at);\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            \"Expected corresponding JSX closing tag for <>\",\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            \"Expected corresponding JSX closing tag for <\" +\n              getQualifiedJSXName(openingElement.name) +\n              \">\",\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              \"Expected corresponding JSX closing tag for <\" +\n                getQualifiedJSXName(openingElement.name) +\n                \">\",\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.relational) && this.state.value === \"<\") {\n        this.raise(\n          this.state.start,\n          \"Adjacent JSX elements must be wrapped in an enclosing tag. \" +\n            \"Did you want a JSX fragment <>...</>?\",\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refShortHandDefaultPos: ?Pos): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refShortHandDefaultPos);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_ASYNC,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_GENERATOR,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get inGenerator() {\n    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n  }\n  get inAsync() {\n    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  +createScope: (flags: ScopeFlags) => IScope;\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, `Identifier '${name}' has already been declared`);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and bodyless-functions are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_FN_TYPE,\n  BIND_TS_NAMESPACE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      while (true) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          null,\n          \"Argument in a type import must be a string literal\",\n        );\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR).map(pattern => {\n        if (\n          pattern.type !== \"Identifier\" &&\n          pattern.type !== \"RestElement\" &&\n          pattern.type !== \"ObjectPattern\" &&\n          pattern.type !== \"ArrayPattern\"\n        ) {\n          throw this.unexpected(\n            pattern.start,\n            `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${\n              pattern.type\n            }`,\n          );\n        }\n        return pattern;\n      });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.TsIndexSignature): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(\n            elementNode.start,\n            \"A required element cannot follow an optional element.\",\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        this.checkCommaAfterRest();\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        throw this.raise(\n          templateNode.expressions[0].start,\n          \"Template literal types cannot have any substitution\",\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (type !== undefined && this.lookahead().type !== tt.dot) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            if (this.lookahead().type !== tt.num) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this: {\n          const thisKeyword = this.tsParseThisTypeNode();\n          if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n            return this.tsParseThisTypePredicate(thisKeyword);\n          } else {\n            return thisKeyword;\n          }\n        }\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(\n            node.start,\n            \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n          );\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n        }\n\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n\n        const node: N.TsTypePredicate = this.startNodeAtNode(\n          typePredicateVariable,\n        );\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, `'${descriptor}' list cannot be empty.`);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        node.body = this.tsParseModuleBlock();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n\n      if (this.match(tt.braceL)) {\n        node.body = this.tsParseModuleBlock();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") && this.lookahead().type === tt.parenL\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T>(f: () => T): ?T {\n      const state = this.state.clone();\n      try {\n        return f();\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          this.state = state;\n          return undefined;\n        }\n        throw e;\n      }\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          throw this.raise(\n            pp.start,\n            \"A parameter property may not be declared using a binding pattern.\",\n          );\n        }\n        pp.parameter = elt;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    checkFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        this.checkLVal(node.id, BIND_TS_FN_TYPE, null, \"function name\");\n      } else {\n        super.checkFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n      maybeAsyncArrow: boolean,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsync(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n        maybeAsyncArrow,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) && this.lookahead().type === tt.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n      return super.parseImport(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      const methodOrProp: N.ClassMethod | N.ClassProperty = member;\n      const prop: N.ClassProperty = member;\n      const propOrIdx: N.ClassProperty | N.TsIndexSignature = member;\n\n      let abstract = false,\n        readonly = false;\n\n      const mod = this.tsParseModifier([\"abstract\", \"readonly\"]);\n      switch (mod) {\n        case \"readonly\":\n          readonly = true;\n          abstract = !!this.tsParseModifier([\"abstract\"]);\n          break;\n        case \"abstract\":\n          abstract = true;\n          readonly = !!this.tsParseModifier([\"readonly\"]);\n          break;\n      }\n\n      if (abstract) methodOrProp.abstract = true;\n      if (readonly) propOrIdx.readonly = true;\n\n      if (!abstract && !isStatic && !methodOrProp.accessibility) {\n        const idx = this.tsTryParseIndexSignature(member);\n        if (idx) {\n          classBody.body.push(idx);\n          return;\n        }\n      }\n\n      if (readonly) {\n        // Must be a property (if not an index signature).\n        methodOrProp.static = isStatic;\n        this.parseClassPropertyName(prop);\n        this.parsePostMemberNameModifiers(methodOrProp);\n        this.pushClassProperty(classBody, prop);\n        return;\n      }\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const state = this.state.clone();\n      try {\n        return super.parseConditional(expr, noIn, startPos, startLoc);\n      } catch (err) {\n        if (!(err instanceof SyntaxError)) {\n          // istanbul ignore next: no such error is expected\n          throw err;\n        }\n\n        this.state = state;\n        refNeedsArrowPos.start = err.pos || this.state.start;\n        return expr;\n      }\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(...arguments);\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      return super.parseClassProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let jsxError: ?SyntaxError;\n\n      if (this.match(tt.jsxTagStart)) {\n        const context = this.curContext();\n        assert(context === ct.j_oTag);\n        // Only time j_oTag is pushed is right after j_expr.\n        assert(this.state.context[this.state.context.length - 2] === ct.j_expr);\n\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        const state = this.state.clone();\n        try {\n          return super.parseMaybeAssign(...args);\n        } catch (err) {\n          if (!(err instanceof SyntaxError)) {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n\n          this.state = state;\n          // Pop the context added by the jsxTagStart.\n          assert(this.curContext() === ct.j_oTag);\n          this.state.context.pop();\n          assert(this.curContext() === ct.j_expr);\n          this.state.context.pop();\n          jsxError = err;\n        }\n      }\n\n      if (jsxError === undefined && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let arrowExpression;\n      let typeParameters: N.TsTypeParameterDeclaration;\n      const state = this.state.clone();\n      try {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        arrowExpression = super.parseMaybeAssign(...args);\n        if (\n          arrowExpression.type !== \"ArrowFunctionExpression\" ||\n          (arrowExpression.extra && arrowExpression.extra.parenthesized)\n        ) {\n          this.unexpected(); // Go to the catch block (needs a SyntaxError).\n        }\n      } catch (err) {\n        if (!(err instanceof SyntaxError)) {\n          // istanbul ignore next: no such error is expected\n          throw err;\n        }\n\n        if (jsxError) {\n          throw jsxError;\n        }\n\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n        // Parsing an arrow function failed, so try a type cast.\n        this.state = state;\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n      }\n      arrowExpression.typeParameters = typeParameters;\n      return arrowExpression;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refShorthandDefaultPos?: ?Pos): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refShorthandDefaultPos);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n        const state = this.state.clone();\n        try {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) {\n            this.state = state;\n            return undefined;\n          }\n          node.returnType = returnType;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          throw this.raise(\n            param.start,\n            \"A binding pattern parameter cannot be optional in an implementation signature.\",\n          );\n        }\n\n        param.optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(\n            this.typeCastToParameter(node),\n            isBinding,\n            contextDescription,\n          );\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isBinding, contextDescription);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(\n            node.expression,\n            isBinding,\n            contextDescription,\n          );\n          return node;\n        default:\n          return super.toAssignable(node, isBinding, contextDescription);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          \"Type annotations must come before default assignments, \" +\n            \"e.g. instead of `age = 25: number` use `age: number = 25`\",\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(\n      exprList: N.Expression[],\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            this.raise(\n              expr.start,\n              \"Unexpected type cast in parameter position.\",\n            );\n            break;\n        }\n      }\n      return super.toAssignableList(exprList, isBinding, contextDescription);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr._exprListItem &&\n          expr.type === \"TsTypeCastExpression\"\n        ) {\n          this.raise(expr.start, \"Did not expect a type annotation here.\");\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers && specifiers.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Attach comments that follow a trailing comma on the last\n    // property in an object literal or a trailing comma in function arguments\n    // as trailing comments\n    if (firstChild && this.state.leadingComments.length > 0) {\n      const lastComment = last(this.state.leadingComments);\n\n      if (firstChild.type === \"ObjectProperty\") {\n        if (lastComment.start >= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (\n                this.state.leadingComments[j].end <\n                this.state.commentPreviousNode.end\n              ) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n\n            if (this.state.leadingComments.length > 0) {\n              firstChild.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      } else if (\n        node.type === \"CallExpression\" &&\n        node.arguments &&\n        node.arguments.length\n      ) {\n        const lastArg = last(node.arguments);\n\n        if (\n          lastArg &&\n          lastComment.start >= lastArg.start &&\n          lastComment.end <= node.end\n        ) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (\n                this.state.leadingComments[j].end <\n                this.state.commentPreviousNode.end\n              ) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n            if (this.state.leadingComments.length > 0) {\n              lastArg.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      }\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\nexport default class LocationParser extends CommentsParser {\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    message: string,\n    {\n      missingPluginNames,\n      code,\n    }: {\n      missingPluginNames?: Array<string>,\n      code?: string,\n    } = {},\n  ): empty {\n    const loc = this.getLocationForPosition(pos);\n\n    message += ` (${loc.line}:${loc.column})`;\n    // $FlowIgnore\n    const err: SyntaxError & { pos: number, loc: Position } = new SyntaxError(\n      message,\n    );\n    err.pos = pos;\n    err.loc = loc;\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n    if (code !== undefined) {\n      err.code = code;\n    }\n    throw err;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport type { Token } from \"./index\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // A comma after \"...a\" is only allowed in spread, but not in rest.\n  // Since we parse destructuring patterns as array/object literals\n  // and then convert them, we need to track it.\n  commaAfterSpreadAt: number = -1;\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  inClassProperty: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Check whether we are in a (nested) class or not.\n  classLevel: number = 0;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = 0;\n  awaitPos: number = 0;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // TODO\n  containsOctal: boolean = false;\n  octalPosition: ?number = null;\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  invalidTemplateEscapePosition: ?number = null;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport LocationParser from \"../parser/location\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends LocationParser {\n  // Forward-declarations\n  // parser/util.js\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n\n  isLookahead: boolean;\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (this.options.tokens && !this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.state.tokens.push(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", (this.state.pos += 2));\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (\n        ch !== charCodes.lineFeed &&\n        ch !== charCodes.carriageReturn &&\n        ch !== charCodes.lineSeparator &&\n        ch !== charCodes.paragraphSeparator &&\n        ++this.state.pos < this.length\n      ) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.raise(this.state.pos, \"Unexpected digit after hash token\");\n    }\n\n    if (\n      (this.hasPlugin(\"classPrivateProperties\") ||\n        this.hasPlugin(\"classPrivateMethods\")) &&\n      this.state.classLevel > 0\n    ) {\n      ++this.state.pos;\n      this.finishToken(tt.hash);\n      return;\n    } else if (\n      this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n    ) {\n      this.finishOp(tt.hash, 1);\n    } else {\n      this.raise(this.state.pos, \"Unexpected character '#'\");\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.dot && next2 === charCodes.dot) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    while (\n      ch !== charCodes.lineFeed &&\n      ch !== charCodes.carriageReturn &&\n      ch !== charCodes.lineSeparator &&\n      ch !== charCodes.paragraphSeparator &&\n      ++this.state.pos < this.length\n    ) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketL);\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceL);\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    this.raise(\n      this.state.pos,\n      `Unexpected character '${String.fromCodePoint(code)}'`,\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n\n        ++this.state.pos;\n        mods += char;\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  readInt(radix: number, len?: number): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (code === charCodes.underscore) {\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len)\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === charCodes.lowercaseN) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(\n          start,\n          \"Legacy octal literals are not allowed in strict mode\",\n        );\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === charCodes.lowercaseN) {\n        // disallow floats and legacy octal syntax, new style octal (\"0o\") is handled in this.readRadixNumber\n        if (isFloat || octal) this.raise(start, \"Invalid BigIntLiteral\");\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code === null) {\n        // $FlowFixMe (is this always non-null?)\n        --this.state.invalidTemplateEscapePosition; // to point to the '\\'' instead of the 'u'\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n      } else if (isNewLine(ch)) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        this.raise(this.state.start, \"Unterminated template\");\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          // $FlowFixMe\n          let octalStr = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(len: number, throwOnInvalid: boolean): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(\n            this.state.pos,\n            \"Expecting Unicode escape sequence \\\\uXXXX\",\n          );\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (\n          // $FlowFixMe (thinks esc may be null, but throwOnInvalid is true)\n          !identifierCheck(esc, true)\n        ) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        // $FlowFixMe\n        word += String.fromCodePoint(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    if (type.keyword && this.state.containsEsc) {\n      this.raise(this.state.pos, `Escape sequence in keyword ${word}`);\n    }\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, `Invalid identifier ${word}`);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpace } from \"../util/whitespace\";\n\nconst literal = /^('|\")((?:\\\\?.)*?)\\1/;\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const l = this.lookahead();\n    return l.type === tt.relational && l.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // eat() for relational operators.\n\n  eatRelational(op: \"<\" | \">\"): boolean {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const l = this.lookahead();\n    return l.type === tt.name && l.value === name;\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(\n        pos != null ? pos : this.state.start,\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n        { missingPluginNames: [name] },\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raise(\n        pos != null ? pos : this.state.start,\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n        { missingPluginNames: names },\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos &&\n      (!this.state.awaitPos || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(\n        this.state.yieldPos,\n        \"Yield cannot be used as name inside a generator function\",\n      );\n    }\n    if (this.state.awaitPos) {\n      this.raise(\n        this.state.awaitPos,\n        \"Await cannot be used as name inside an async function\",\n      );\n    }\n  }\n\n  strictDirective(start: number): boolean {\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      const match = literal.exec(this.input.slice(start));\n      if (!match) break;\n      if (match[2] === \"use strict\") return true;\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\") {\n        start++;\n      }\n    }\n\n    return false;\n  }\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  ObjectExpression,\n  ObjectPattern,\n  Pattern,\n  RestElement,\n  SpreadElement,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport { isStrictBindReservedWord } from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE, BIND_LEXICAL } from \"../util/scopeflags\";\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refShorthandDefaultPos?: ?Pos,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    isPattern: boolean,\n    refShorthandDefaultPos?: ?Pos,\n  ) => T;\n  // Forward-declaration: defined in statement.js\n  +parseDecorator: () => Decorator;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  toAssignable(\n    node: Node,\n    isBinding: ?boolean,\n    contextDescription: string,\n  ): Node {\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n          for (\n            let i = 0, length = node.properties.length, last = length - 1;\n            i < length;\n            i++\n          ) {\n            const prop = node.properties[i];\n            const isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n          }\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\": {\n          this.checkToRestConversion(node);\n\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isBinding, contextDescription);\n          break;\n        }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding, contextDescription);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator === \"=\") {\n            node.type = \"AssignmentPattern\";\n            delete node.operator;\n          } else {\n            this.raise(\n              node.left.end,\n              \"Only '=' operator can be used for specifying default value.\",\n            );\n          }\n          break;\n\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(\n            node.expression,\n            isBinding,\n            contextDescription,\n          );\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default: {\n          const message =\n            \"Invalid left-hand side\" +\n            (contextDescription\n              ? \" in \" + contextDescription\n              : /* istanbul ignore next */ \"expression\");\n          this.raise(node.start, message);\n        }\n      }\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isBinding: ?boolean,\n    isLast: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? \"Object pattern can't contain getter or setter\"\n          : \"Object pattern can't contain methods\";\n\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    isBinding: ?boolean,\n    contextDescription: string,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isBinding, contextDescription);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): $ReadOnlyArray<?Expression> {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n\n    return exprList;\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refShorthandDefaultPos: ?Pos,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refShorthandDefaultPos,\n      undefined,\n      refNeedsArrowPos,\n    );\n\n    if (this.state.commaAfterSpreadAt === -1 && this.match(tt.comma)) {\n      this.state.commaAfterSpreadAt = this.state.start;\n    }\n\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(tt.bracketR, true);\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest();\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(\n            this.state.start,\n            \"Stage 2 decorators cannot be used to decorate parameters\",\n          );\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          isStrictBindReservedWord(expr.name, this.inModule)\n        ) {\n          this.raise(\n            expr.start,\n            `${bindingType === BIND_NONE ? \"Assigning to\" : \"Binding\"} '${\n              expr.name\n            }' in strict mode`,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, \"Argument name clash\");\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (bindingType === BIND_LEXICAL && expr.name === \"let\") {\n          this.raise(\n            expr.start,\n            \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n          );\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, \"Binding member expression\");\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        const message =\n          (bindingType === BIND_NONE\n            ? \"Invalid\"\n            : /* istanbul ignore next */ \"Binding invalid\") +\n          \" left-hand side\" +\n          (contextDescription\n            ? \" in \" + contextDescription\n            : /* istanbul ignore next */ \"expression\");\n        this.raise(expr.start, message);\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, \"Invalid rest operator's argument\");\n    }\n  }\n\n  checkCommaAfterRest(): void {\n    if (this.match(tt.comma)) {\n      this.raiseRestNotLast(this.state.start);\n    }\n  }\n\n  checkCommaAfterRestFromSpread(): void {\n    if (this.state.commaAfterSpreadAt > -1) {\n      this.raiseRestNotLast(this.state.commaAfterSpreadAt);\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    this.raise(pos, `Rest element must be last element`);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  functionFlags,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  checkPropClash(\n    prop: N.ObjectMember | N.SpreadElement,\n    propHash: { [key: string]: boolean },\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.computed ||\n      prop.kind ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (propHash.proto) {\n        this.raise(key.start, \"Redefinition of __proto__ property\");\n      }\n      propHash.proto = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    this.scope.enter(SCOPE_PROGRAM);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initialization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  parseExpression(noIn?: boolean, refShorthandDefaultPos?: Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(\n          this.parseMaybeAssign(noIn, refShorthandDefaultPos),\n        );\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refShorthandDefaultPos?: ?Pos,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.scope.inGenerator) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    const oldCommaAfterSpreadAt = this.state.commaAfterSpreadAt;\n    this.state.commaAfterSpreadAt = -1;\n\n    let failOnShorthandAssign;\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = { start: 0 };\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refShorthandDefaultPos,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      node.left = this.match(tt.eq)\n        ? this.toAssignable(left, undefined, \"assignment expression\")\n        : left;\n      refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      const maybePattern = unwrapParenthesizedExpression(left);\n\n      let patternErrorMsg;\n      if (maybePattern.type === \"ObjectPattern\") {\n        patternErrorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (maybePattern.type === \"ArrayPattern\") {\n        patternErrorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n\n      if (\n        patternErrorMsg &&\n        ((left.extra && left.extra.parenthesized) ||\n          left.type === \"ParenthesizedExpression\")\n      ) {\n        this.raise(\n          maybePattern.start,\n          `You're trying to assign to a parenthesized expression, eg. instead of ${patternErrorMsg}`,\n        );\n      }\n\n      if (patternErrorMsg) this.checkCommaAfterRestFromSpread();\n      this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refShorthandDefaultPos: Pos,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(noIn: ?boolean, refShorthandDefaultPos: Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n          );\n        }\n\n        const op = this.state.type;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (op === tt.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.scope.inAsync\n          ) {\n            throw this.raise(\n              this.state.start,\n              `Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal`,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n\n        this.finishNode(\n          node,\n          op === tt.logicalOR ||\n            op === tt.logicalAND ||\n            op === tt.nullishCoalescing\n            ? \"LogicalExpression\"\n            : \"BinaryExpression\",\n        );\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refShorthandDefaultPos: ?Pos): N.Expression {\n    if (\n      this.isContextual(\"await\") &&\n      (this.scope.inAsync ||\n        (!this.scope.inFunction && this.options.allowAwaitOutsideFunction))\n    ) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, \"Deleting local variable in strict mode\");\n        } else if (\n          arg.type === \"MemberExpression\" &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refShorthandDefaultPos: ?Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const maybeAsyncArrow = this.atPossibleAsync(base);\n\n    const state = {\n      optionalChainMember: false,\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n        maybeAsyncArrow,\n      );\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n    maybeAsyncArrow: boolean,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    } else if (this.match(tt.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n      if (noCalls && this.lookahead().type === tt.parenL) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n\n      const node = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(tt.bracketL)) {\n        node.object = base;\n        node.property = this.parseExpression();\n        node.computed = true;\n        node.optional = true;\n        this.expect(tt.bracketR);\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else if (this.eat(tt.parenL)) {\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishNode(node, \"OptionalCallExpression\");\n      } else {\n        node.object = base;\n        node.property = this.parseIdentifier(true);\n        node.computed = false;\n        node.optional = true;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(tt.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseMaybePrivateName();\n      node.computed = false;\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(tt.bracketL)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(tt.bracketR);\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = 0;\n      this.state.awaitPos = 0;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      const oldCommaAfterSpreadAt = this.state.commaAfterSpreadAt;\n      this.state.commaAfterSpreadAt = -1;\n\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n      );\n      if (!state.optionalChainMember) {\n        this.finishCallExpression(node);\n      } else {\n        this.finishOptionalCallExpression(node);\n      }\n\n      if (maybeAsyncArrow && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n\n        this.checkCommaAfterRestFromSpread();\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        this.state.yieldPos = oldYieldPos || this.state.yieldPos;\n        this.state.awaitPos = oldAwaitPos || this.state.awaitPos;\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(\n        startPos,\n        \"Tagged Template Literals are not allowed in optionalChain\",\n      );\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      this.input.slice(base.start, base.end) === \"async\"\n    );\n  }\n\n  finishCallExpression(node: N.CallExpression): N.CallExpression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      const importArg = node.arguments[0];\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n    return this.finishNode(node, \"CallExpression\");\n  }\n\n  finishOptionalCallExpression(node: N.CallExpression): N.CallExpression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      const importArg = node.arguments[0];\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n    return this.finishNode(node, \"OptionalCallExpression\");\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(close)) {\n          if (dynamicImport) {\n            this.raise(\n              this.state.lastTokStart,\n              \"Trailing comma is disallowed inside import(...) arguments\",\n            );\n          }\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(node, call.arguments, true);\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refShorthandDefaultPos?: ?Pos): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(\n            this.state.start,\n            \"super is only allowed in object methods and classes\",\n          );\n        }\n\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(\n            node.start,\n            \"super() is only valid inside a class constructor of a subclass. \" +\n              \"Maybe a typo in the method name ('constructor') or not extending another class?\",\n          );\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.unexpected();\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        this.expectPlugin(\"dynamicImport\", node.start);\n\n        if (!this.match(tt.parenL)) {\n          this.unexpected(null, tt.parenL);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refShorthandDefaultPos,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(false, refShorthandDefaultPos);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(\n            callee.start,\n            \"Binding should be performed on object property.\",\n          );\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(\n              node.start,\n              \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n            );\n          }\n\n          this.next();\n          if (this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          } else {\n            throw this.raise(\n              node.start,\n              `Topic reference was used in a lexical context without topic binding`,\n            );\n          }\n        }\n      }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.scope.inGenerator && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        `The only valid meta property for ${meta.name} is ${\n          meta.name\n        }.${propertyName}`,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(\n        id.start,\n        `Dynamic imports require a parameter: import('a.js')`,\n      );\n    }\n\n    if (!this.inModule) {\n      this.raise(\n        id.start,\n        `import.meta may appear only with 'sourceType: \"module\"'`,\n        { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n      );\n    }\n    this.sawUnambiguousESM = true;\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refShorthandDefaultPos = { start: 0 };\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest();\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refShorthandDefaultPos,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    this.state.yieldPos = oldYieldPos || this.state.yieldPos;\n    this.state.awaitPos = oldAwaitPos || this.state.awaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    const meta = this.parseIdentifier(true);\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n        let error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(\n        this.state.lastTokEnd,\n        \"constructors in/after an Optional Chain are not allowed\",\n      );\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(\n        this.state.start,\n        \"constructors in/after an Optional Chain are not allowed\",\n      );\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        // TODO: fix this\n        this.raise(\n          this.state.invalidTemplateEscapePosition || 0,\n          \"Invalid escape sequence in template\",\n        );\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal or binding pattern.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    isPattern: boolean,\n    refShorthandDefaultPos?: ?Pos,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const prop = this.parseObjectMember(isPattern, refShorthandDefaultPos);\n      // $FlowIgnore RestElement will never be returned if !isPattern\n      if (!isPattern) this.checkPropClash(prop, propHash);\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    return this.finishNode(\n      node,\n      isPattern ? \"ObjectPattern\" : \"ObjectExpression\",\n    );\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.match(tt.name) ||\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bracketL) ||\n        this.state.type.keyword ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(\n          this.state.start,\n          \"Stage 2 decorators disallow object literal property decorators\",\n        );\n      } else {\n        // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n        // the call to this.parseDecorator\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest();\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refShorthandDefaultPos,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.match(tt.string) || // get \"string\"() {}\n      this.match(tt.num) || // get 1() {}\n      this.match(tt.bracketL) || // get [\"string\"]() {}\n      this.match(tt.name) || // get foo() {}\n        !!this.state.type.keyword) // get debugger() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(\n        start,\n        \"setter function argument must not be a rest parameter\",\n      );\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refShorthandDefaultPos);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refShorthandDefaultPos,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      functionFlags(isAsync, node.generator) |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node, isAsync);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n\n    if (params) this.setArrowFunctionParameters(node, params);\n    this.parseFunctionBody(node, true);\n\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n  ): void {\n    node.params = this.toAssignableList(\n      params,\n      true,\n      \"arrow function parameters\",\n    );\n  }\n\n  isStrictBody(node: { body: N.BlockStatement }): boolean {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (const directive of node.body.directives) {\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldStrict = this.state.strict;\n    let useStrict = false;\n\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression);\n    } else {\n      const nonSimple = !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.state.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple) {\n          // This logic is here to align the error location with the estree plugin\n          const errorPos =\n            // $FlowIgnore\n            (node.kind === \"method\" || node.kind === \"constructor\") &&\n            // $FlowIgnore\n            !!node.key\n              ? node.key.end\n              : node.start;\n          this.raise(\n            errorPos,\n            \"Illegal 'use strict' directive in function with non-simple parameter list\",\n          );\n        }\n      }\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (useStrict) this.state.strict = true;\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(\n        node,\n        !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple,\n        allowExpression,\n      );\n      node.body = this.parseBlock(true, false);\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.state.strict && node.id) {\n      this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\");\n    }\n    this.state.strict = oldStrict;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function paramter list\",\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refShorthandDefaultPos?: ?Pos,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(close)) break;\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refShorthandDefaultPos: ?Pos,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (allowEmpty && this.match(tt.comma)) {\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, \"Unexpected argument placeholder\");\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refShorthandDefaultPos,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the\n      // context-managing code already ignored the keyword\n      if (\n        (name === \"class\" || name === \"function\") &&\n        (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||\n          this.input.charCodeAt(this.state.lastTokStart) !== charCodes.dot)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (!liberal) {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.scope.inGenerator && word === \"yield\") {\n      this.raise(\n        startLoc,\n        \"Can not use 'yield' as identifier inside a generator\",\n      );\n    }\n\n    if (this.scope.inAsync && word === \"await\") {\n      this.raise(\n        startLoc,\n        \"Can not use 'await' as identifier inside an async function\",\n      );\n    }\n\n    if (this.state.inClassProperty && word === \"arguments\") {\n      this.raise(\n        startLoc,\n        \"'arguments' is not allowed in class field initializer\",\n      );\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, `Unexpected keyword '${word}'`);\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.scope.inAsync && word === \"await\") {\n        this.raise(\n          startLoc,\n          \"Can not use keyword 'await' outside an async function\",\n        );\n      }\n      this.raise(startLoc, `Unexpected reserved word '${word}'`);\n    }\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    if (!this.state.awaitPos) {\n      this.state.awaitPos = this.state.start;\n    }\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(\n        node.start,\n        \"await is not allowed in async function parameters\",\n      );\n    }\n    if (this.match(tt.star)) {\n      this.raise(\n        node.start,\n        \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n      );\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    if (!this.state.yieldPos) {\n      this.state.yieldPos = this.state.start;\n    }\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.canInsertSemicolon()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        throw this.raise(\n          leftStartPos,\n          `Pipeline head should not be a comma-separated sequence expression`,\n        );\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(\n        this.state.start,\n        `Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized`,\n      );\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      throw this.raise(\n        startPos,\n        `Pipeline body may not be a comma-separated sequence expression`,\n      );\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          throw this.raise(\n            startPos,\n            `Pipeline is in topic style but does not use topic reference`,\n          );\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw this.raise(startPos, `Unknown pipeline style ${pipelineStyle}`);\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak, skipWhiteSpace } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  functionFlags,\n  SCOPE_CLASS,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, `Export '${name}' is not defined`);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.state.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    skipWhiteSpace.lastIndex = this.state.pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore\n    const next = this.state.pos + skip[0].length;\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookahead().type === tt.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(\n              this.state.start,\n              \"In strict mode code, functions can only be declared at top level or inside a block\",\n            );\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(\n              this.state.start,\n              \"In non-strict mode code, functions can only be declared at top level, \" +\n                \"inside a block, or as the body of an if statement\",\n            );\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.unexpected(\n            this.state.start,\n            \"Lexical declaration cannot appear in a single-statement context\",\n          );\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextToken = this.lookahead();\n        if (nextToken.type === tt.parenL || nextToken.type === tt.dot) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(\n            this.state.start,\n            \"'import' and 'export' may only appear at the top level\",\n          );\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.unexpected(\n              null,\n              \"Async functions can only be declared at the top level or inside a block\",\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(\n        node.start,\n        `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(\n          this.state.start,\n          \"Using the export keyword between a decorator and a class is not allowed. \" +\n            \"Please use `export @dec class` instead.\",\n        );\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      this.raise(\n        this.state.start,\n        \"Leading decorators must be attached to a class declaration\",\n      );\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (\n      (this.scope.inAsync ||\n        (!this.scope.inFunction && this.options.allowAwaitOutsideFunction)) &&\n      this.eatContextual(\"await\")\n    ) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refShorthandDefaultPos = { start: 0 };\n    const init = this.parseExpression(true, refShorthandDefaultPos);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.scope.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the function body. They are permitted in function\n        // default-parameter expressions, which are part of the outer context,\n        // outside of the function body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the function body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the function body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, `Label '${maybeName}' is already declared`);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, tt.braceR);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        `${\n          isForIn ? \"for-in\" : \"for-of\"\n        } loop variable declaration may not have an initializer`,\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            \"Complex binding patterns require an initialization value\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.unexpected(\n        this.state.start,\n        \"Generators can only be declared at the top level or inside a block\",\n      );\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldInClassProperty = this.state.inClassProperty;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.inClassProperty = false;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    this.scope.enter(functionFlags(node.async, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in test\n    // expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to validate this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.checkFunctionStatementId(node);\n    }\n\n    this.state.inClassProperty = oldInClassProperty;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  checkFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.checkLVal(\n      node.id,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      null,\n      \"function name\",\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(constructorAllowsSuper: boolean): N.ClassBody {\n    this.state.classLevel++;\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body. They are permitted in test expressions,\n    // outside of the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            this.raise(\n              this.state.lastTokEnd,\n              \"Decorators must not be followed by a semicolon\",\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(\n            member.start,\n            \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n          );\n        }\n      }\n    });\n\n    if (decorators.length) {\n      this.raise(\n        this.state.start,\n        \"You have trailing decorators with no method\",\n      );\n    }\n\n    this.state.classLevel--;\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(tt.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true); // eats 'static'\n\n      if (this.isClassMethod()) {\n        const method: N.ClassMethod = (member: any);\n\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(\n          classBody,\n          method,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n        return;\n      } else if (this.isClassProperty()) {\n        const prop: N.ClassProperty = (member: any);\n\n        // a property named 'static'\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      // otherwise something static\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (publicMethod.decorators) {\n          this.raise(\n            publicMethod.start,\n            \"You can't attach decorators to a class constructor\",\n          );\n        }\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(\n            publicMethod.key.start,\n            \"Constructor can't be an async function\",\n          );\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(\n            publicMethod.key.start,\n            \"Constructor can't have get/set modifier\",\n          );\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(\n        key.start,\n        \"Classes may not have static property named prototype\",\n      );\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(\n        key.start,\n        \"Classes may not have a private field named '#constructor'\",\n      );\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    // This only affects properties, not methods.\n    if (this.isNonstaticConstructor(prop)) {\n      this.raise(\n        prop.key.start,\n        \"Classes may not have a non-static field named 'constructor'\",\n      );\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ClassPrivateMethod\",\n        true,\n      ),\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.state.inClassProperty = true;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.state.inClassProperty = true;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n    this.state.inClassProperty = false;\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, BIND_CLASS, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      this.expectPlugin(\"exportNamespaceFrom\");\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.lookahead();\n\n        // export async;\n        if (next.type !== tt._function) {\n          this.unexpected(next.start, `Unexpected token, expected \"function\"`);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n\n    const { pos } = this.state;\n\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n\n    if (!skip || !skip.length) return false;\n\n    const next = pos + skip[0].length;\n\n    return (\n      !lineBreak.test(this.input.slice(pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.length ||\n        !isIdentifierChar(this.input.charCodeAt(next + 8)))\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.unexpected(\n          this.state.start,\n          \"Decorators must be placed *before* the 'export' keyword.\" +\n            \" You can set the 'decoratorsBeforeExport' option to false to use\" +\n            \" the 'export @decorator class {}' syntax\",\n        );\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      return this.raise(\n        this.state.start,\n        \"Only expressions, functions or classes are allowed as the `default` export.\",\n      );\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const lookahead = this.lookahead();\n    return (\n      lookahead.type === tt.comma ||\n      (lookahead.type === tt.name && lookahead.value === \"from\")\n    );\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(\n            this.state.start,\n            \"Decorators must be placed *before* the 'export' keyword.\" +\n              \" You can set the 'decoratorsBeforeExport' option to false to use\" +\n              \" the 'export @decorator class {}' syntax\",\n          );\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(\n          node.start,\n          \"You can only use decorators on an export when exporting a class\",\n        );\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      throw this.raise(\n        node.start,\n        name === \"default\"\n          ? \"Only one default export allowed per module.\"\n          : `\\`${name}\\` has already been exported. Exported identifiers must be unique.`,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          this.unexpected(\n            null,\n            \"ES2015 named imports do not destructure. \" +\n              \"Use another statement for destructuring after the import.\",\n          );\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File, JSXOpeningElement } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.scope.enter(SCOPE_PROGRAM);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      // Rather than try to parse as a script first, we opt to parse as a module and convert back\n      // to a script where possible to avoid having to do a full re-parse of the input content.\n      if (!parser.sawUnambiguousESM) ast.program.sourceType = \"script\";\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (scriptError) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ASYNC","SCOPE_GENERATOR","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_VAR","functionFlags","isAsync","isGenerator","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_FN_TYPE","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","isSimpleProperty","node","type","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","value","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","start","loc","expression","raw","extra","finishNodeAt","end","slice","initFunction","checkDeclaration","checkGetterSetterParams","prop","paramCount","params","length","raise","checkLVal","expr","bindingType","checkClashes","contextDescription","properties","forEach","checkPropClash","propHash","computed","shorthand","key","String","proto","isStrictBody","isBlockStatement","body","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parseExprAtom","refShorthandDefaultPos","state","tt","startPos","startLoc","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","isBinding","toAssignableObjectExpressionProp","isLast","lineBreak","lineBreakG","source","isNewLine","code","skipWhiteSpace","isWhitespace","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","pop","curContext","prevType","allowed","scope","inGenerator","isIterator","braceIsBlock","statementParens","test","input","lastTokEnd","b_stat","reservedWords","strict","strictBind","reservedWordsStrictSet","Set","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","pos","i","isIdentifierStart","fromCharCode","isIteratorStart","current","next","isIdentifierChar","reservedTypes","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","undefined","shouldParseTypes","getPluginOption","finishToken","val","addComment","comment","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","line","column","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","match","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","unexpected","lastTokStart","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","enter","bodyNode","parseImport","exit","hasModuleExport","errorMessage","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","indexOf","liberal","declareName","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","optional","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseConditional","noIn","refNeedsArrowPos","clone","err","SyntaxError","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","stack","arrows","toAssignableList","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","specifiers","parseExportSpecifiers","parseExportFrom","eatExportStar","arguments","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","getTokenFromCode","charCodeAt","finishOp","readWord","exprList","toReferencedList","isParenthesizedExpr","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsxError","hasPlugin","cLength","tc","j_oTag","arrowExpression","resetStartLocationFromNode","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","callee","parseCallExpressionArguments","error","parseAsyncArrowWithTypeParameters","parseSubscript","subscriptState","maybeAsyncArrow","isLookaheadRelational","expectPlugin","optionalChainMember","stop","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","j_cTag","j_expr","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","lastTokEndLoc","jsxParseSpreadChild","jsxParseAttribute","isMeta","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","refShortHandDefaultPos","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScope","inAsync","allowSuper","currentThisScope","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","members","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","checkCommaAfterRest","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","literal","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseNonArrayType","parseMaybeUnary","thisKeyword","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","checkFunctionStatementId","nonNullExpression","atPossibleAsync","asyncArrowFn","finishCallExpression","parseTaggedTemplateExpression","args","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","isAbstractClass","parseExportDefaultExpression","parseStatementContent","ahead","parseClassMember","member","constructorAllowsSuper","parseClassMemberWithIsStatic","methodOrProp","propOrIdx","parseClassPropertyName","parsePostMemberNameModifiers","pushClassProperty","isDeclare","resetStartLocation","definite","ct","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","_exprListItem","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","exported","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","plugins","some","plugin","Array","isArray","option","PIPELINE_PROPOSALS","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","estree","jsx","flow","typescript","placeholders","mixinPluginNames","Object","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","Position","col","SourceLocation","getLineInfo","offset","lastIndex","index","BaseParser","sawUnambiguousESM","get","last","CommentsParser","filename","trailingComments","leadingComments","processComment","commentStack","firstChild","lastChild","j","lastInStack","lastComment","commentPreviousNode","splice","lastArg","innerComments","LocationParser","getLocationForPosition","lastTokStartLoc","endLoc","message","missingPluginNames","missingPlugin","State","potentialArrowAt","commaAfterSpreadAt","inParameters","maybeInArrowParameters","inPipeline","inClassProperty","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","classLevel","labels","decoratorStack","yieldPos","awaitPos","comments","containsOctal","octalPosition","exportedIdentifiers","invalidTemplateEscapePosition","init","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","isLookahead","old","curr","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","next2","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","readRadixNumber","readString","escaped","inClass","charAt","content","mods","char","charCode","readInt","radix","len","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","replace","startsWithDot","isFloat","octal","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","l","eatRelational","messageOrType","expectOnePlugin","names","checkYieldAwaitInDefaultParams","strictDirective","Node","parser","range","NodeUtils","locationNode","LValParser","checkToRestConversion","arg","elements","raiseRestNotLast","toReferencedListDeep","parseSpread","parseRestBinding","parseObj","close","allowEmpty","elts","first","parseDecorator","elem","checkCommaAfterRestFromSpread","unwrapParenthesizedExpression","ExpressionParser","getExpression","parseYield","oldCommaAfterSpreadAt","failOnShorthandAssign","parseMaybeConditional","maybePattern","patternErrorMsg","parseExprOps","prec","checkPipelineAtInfixOperator","parseExprOpRightExpr","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseAwait","parseExprSubscripts","parseNoCallExpr","parseMaybePrivateName","oldMaybeInArrowParameters","oldYieldPos","oldAwaitPos","finishOptionalCallExpression","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseImportMetaProperty","parseFunction","oldLabels","parseBooleanLiteral","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","create","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldStrict","useStrict","oldInParameters","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","skip","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","statementStart","createNewLexicalScope","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","oldInClassProperty","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","isSimple","pushClassPrivateProperty","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkNames","isDefault","isFrom","nodes","parseNext","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","scriptError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":";;;;AAyBA,MAAMA,UAAU,GAAG,IAAnB;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAG,IAAhB;AAcA,AAAO,MAAMC,SAAN,CAAgB;EAarBC,WAAW,CAACC,KAAD,EAAgBC,IAAkB,GAAG,EAArC,EAAyC;SAC7CD,KAAL,GAAaA,KAAb;SACKE,OAAL,GAAeD,IAAI,CAACC,OAApB;SACKV,UAAL,GAAkB,CAAC,CAACS,IAAI,CAACT,UAAzB;SACKC,UAAL,GAAkB,CAAC,CAACQ,IAAI,CAACR,UAAzB;SACKU,gBAAL,GAAwB,CAAC,CAACF,IAAI,CAACE,gBAA/B;SACKT,MAAL,GAAc,CAAC,CAACO,IAAI,CAACP,MAArB;SACKC,QAAL,GAAgB,CAAC,CAACM,IAAI,CAACN,QAAvB;SACKC,MAAL,GAAc,CAAC,CAACK,IAAI,CAACL,MAArB;SACKC,OAAL,GAAe,CAAC,CAACI,IAAI,CAACJ,OAAtB;SACKO,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,IAAd,GAAqBH,IAAI,CAACG,KAA1B,GAAkC,IAA/C;SACKC,aAAL,GAAqB,IAArB;;;;AAIJ,AAAO,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEP,SAASC,aAAT,CAAuBC,IAAvB,EAAqCC,OAAqB,GAAG,EAA7D,EAA4E;EAC1EA,OAAO,CAACR,OAAR,GAAkBO,IAAlB;QACME,KAAK,GAAG,IAAIb,SAAJ,CAAcW,IAAd,EAAoBC,OAApB,CAAd;EACAJ,QAAQ,CAACM,GAAT,CAAaH,IAAb,EAAmBE,KAAnB;SACOA,KAAP;;;AAGF,SAASE,WAAT,CAAqBJ,IAArB,EAAmCL,KAAnC,EAAkD;SACzC,IAAIN,SAAJ,CAAcW,IAAd,EAAoB;IAAEjB,UAAF;IAAcY;GAAlC,CAAP;;;AAGF,MAAaU,KAAoC,GAAG;EAClDC,GAAG,EAAE,IAAIjB,SAAJ,CAAc,KAAd,EAAqB;IAAEL;GAAvB,CAD6C;EAElDuB,MAAM,EAAE,IAAIlB,SAAJ,CAAc,QAAd,EAAwB;IAAEL;GAA1B,CAF0C;EAGlDwB,MAAM,EAAE,IAAInB,SAAJ,CAAc,QAAd,EAAwB;IAAEL;GAA1B,CAH0C;EAIlDyB,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwB;IAAEL;GAA1B,CAJ0C;EAKlDgB,IAAI,EAAE,IAAIX,SAAJ,CAAc,MAAd,EAAsB;IAAEL;GAAxB,CAL4C;EAMlD0B,GAAG,EAAE,IAAIrB,SAAJ,CAAc,KAAd,CAN6C;EASlDsB,QAAQ,EAAE,IAAItB,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcC;GAAjC,CATwC;EAUlD4B,QAAQ,EAAE,IAAIvB,SAAJ,CAAc,GAAd,CAVwC;EAWlDwB,MAAM,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcC;GAAjC,CAX0C;EAYlD8B,SAAS,EAAE,IAAIzB,SAAJ,CAAc,IAAd,EAAoB;IAAEN,UAAF;IAAcC;GAAlC,CAZuC;EAalD+B,MAAM,EAAE,IAAI1B,SAAJ,CAAc,GAAd,CAb0C;EAclD2B,SAAS,EAAE,IAAI3B,SAAJ,CAAc,IAAd,CAduC;EAelD4B,MAAM,EAAE,IAAI5B,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcC;GAAjC,CAf0C;EAgBlDkC,MAAM,EAAE,IAAI7B,SAAJ,CAAc,GAAd,CAhB0C;EAiBlD8B,KAAK,EAAE,IAAI9B,SAAJ,CAAc,GAAd,EAAmB;IAAEN;GAArB,CAjB2C;EAkBlDqC,IAAI,EAAE,IAAI/B,SAAJ,CAAc,GAAd,EAAmB;IAAEN;GAArB,CAlB4C;EAmBlDsC,KAAK,EAAE,IAAIhC,SAAJ,CAAc,GAAd,EAAmB;IAAEN;GAArB,CAnB2C;EAoBlDuC,WAAW,EAAE,IAAIjC,SAAJ,CAAc,IAAd,EAAoB;IAAEN;GAAtB,CApBqC;EAqBlDwC,GAAG,EAAE,IAAIlC,SAAJ,CAAc,GAAd,CArB6C;EAsBlDmC,QAAQ,EAAE,IAAInC,SAAJ,CAAc,GAAd,EAAmB;IAAEN;GAArB,CAtBwC;EAuBlD0C,WAAW,EAAE,IAAIpC,SAAJ,CAAc,IAAd,CAvBqC;EAwBlDqC,KAAK,EAAE,IAAIrC,SAAJ,CAAc,IAAd,EAAoB;IAAEN;GAAtB,CAxB2C;EAyBlD4C,QAAQ,EAAE,IAAItC,SAAJ,CAAc,UAAd,CAzBwC;EA0BlDuC,QAAQ,EAAE,IAAIvC,SAAJ,CAAc,KAAd,EAAqB;IAAEN;GAAvB,CA1BwC;EA2BlD8C,SAAS,EAAE,IAAIxC,SAAJ,CAAc,GAAd,EAAmB;IAAEL;GAArB,CA3BuC;EA4BlD8C,YAAY,EAAE,IAAIzC,SAAJ,CAAc,IAAd,EAAoB;IAAEN,UAAF;IAAcC;GAAlC,CA5BoC;EA6BlD+C,EAAE,EAAE,IAAI1C,SAAJ,CAAc,GAAd,CA7B8C;EA8BlD2C,IAAI,EAAE,IAAI3C,SAAJ,CAAc,GAAd,EAAmB;IAAEL;GAArB,CA9B4C;EAiClDiD,oBAAoB,EAAE,IAAI5C,SAAJ,CAAc,OAAd,CAjC4B;EAiDlD6C,EAAE,EAAE,IAAI7C,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcG;GAAjC,CAjD8C;EAkDlDiD,MAAM,EAAE,IAAI9C,SAAJ,CAAc,IAAd,EAAoB;IAAEN,UAAF;IAAcG;GAAlC,CAlD0C;EAmDlDkD,MAAM,EAAE,IAAI/C,SAAJ,CAAc,OAAd,EAAuB;IAAEF,MAAF;IAAUC,OAAV;IAAmBJ;GAA1C,CAnD0C;EAoDlDqD,IAAI,EAAE,IAAIhD,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcI,MAAd;IAAsBH;GAAzC,CApD4C;EAqDlDsD,KAAK,EAAE,IAAIjD,SAAJ,CAAc,GAAd,EAAmB;IAAEN,UAAF;IAAcI,MAAd;IAAsBH;GAAzC,CArD2C;EAsDlDuD,QAAQ,EAAEnC,WAAW,CAAC,IAAD,EAAO,CAAP,CAtD6B;EAuDlDoC,iBAAiB,EAAEpC,WAAW,CAAC,IAAD,EAAO,CAAP,CAvDoB;EAwDlDqC,SAAS,EAAErC,WAAW,CAAC,IAAD,EAAO,CAAP,CAxD4B;EAyDlDsC,UAAU,EAAEtC,WAAW,CAAC,IAAD,EAAO,CAAP,CAzD2B;EA0DlDuC,SAAS,EAAEvC,WAAW,CAAC,GAAD,EAAM,CAAN,CA1D4B;EA2DlDwC,UAAU,EAAExC,WAAW,CAAC,GAAD,EAAM,CAAN,CA3D2B;EA4DlDyC,UAAU,EAAEzC,WAAW,CAAC,GAAD,EAAM,CAAN,CA5D2B;EA6DlD0C,QAAQ,EAAE1C,WAAW,CAAC,eAAD,EAAkB,CAAlB,CA7D6B;EA8DlD2C,UAAU,EAAE3C,WAAW,CAAC,WAAD,EAAc,CAAd,CA9D2B;EA+DlD4C,QAAQ,EAAE5C,WAAW,CAAC,WAAD,EAAc,CAAd,CA/D6B;EAgElD6C,OAAO,EAAE,IAAI5D,SAAJ,CAAc,KAAd,EAAqB;IAAEN,UAAF;IAAcY,KAAK,EAAE,CAArB;IAAwBR,MAAxB;IAAgCH;GAArD,CAhEyC;EAiElDkE,MAAM,EAAE9C,WAAW,CAAC,GAAD,EAAM,EAAN,CAjE+B;EAkElD+C,IAAI,EAAE/C,WAAW,CAAC,GAAD,EAAM,EAAN,CAlEiC;EAmElDgD,KAAK,EAAEhD,WAAW,CAAC,GAAD,EAAM,EAAN,CAnEgC;EAoElDiD,QAAQ,EAAE,IAAIhE,SAAJ,CAAc,IAAd,EAAoB;IAC5BN,UAD4B;IAE5BY,KAAK,EAAE,EAFqB;IAG5BD,gBAAgB,EAAE;GAHV,CApEwC;EA2ElD4D,MAAM,EAAEvD,aAAa,CAAC,OAAD,CA3E6B;EA4ElDwD,KAAK,EAAExD,aAAa,CAAC,MAAD,EAAS;IAAEhB;GAAX,CA5E8B;EA6ElDyE,MAAM,EAAEzD,aAAa,CAAC,OAAD,CA7E6B;EA8ElD0D,SAAS,EAAE1D,aAAa,CAAC,UAAD,CA9E0B;EA+ElD2D,SAAS,EAAE3D,aAAa,CAAC,UAAD,CA/E0B;EAgFlD4D,QAAQ,EAAE5D,aAAa,CAAC,SAAD,EAAY;IAAEhB;GAAd,CAhF2B;EAiFlD6E,GAAG,EAAE7D,aAAa,CAAC,IAAD,EAAO;IAAEd,MAAF;IAAUF;GAAjB,CAjFgC;EAkFlD8E,KAAK,EAAE9D,aAAa,CAAC,MAAD,EAAS;IAAEhB;GAAX,CAlF8B;EAmFlD+E,QAAQ,EAAE/D,aAAa,CAAC,SAAD,CAnF2B;EAoFlDgE,IAAI,EAAEhE,aAAa,CAAC,KAAD,EAAQ;IAAEd;GAAV,CApF+B;EAqFlD+E,SAAS,EAAEjE,aAAa,CAAC,UAAD,EAAa;IAAEf;GAAf,CArF0B;EAsFlDiF,GAAG,EAAElE,aAAa,CAAC,IAAD,CAtFgC;EAuFlDmE,OAAO,EAAEnE,aAAa,CAAC,QAAD,EAAW;IAAEhB;GAAb,CAvF4B;EAwFlDoF,OAAO,EAAEpE,aAAa,CAAC,QAAD,CAxF4B;EAyFlDqE,MAAM,EAAErE,aAAa,CAAC,OAAD,EAAU;IAAEhB,UAAF;IAAcI,MAAd;IAAsBH;GAAhC,CAzF6B;EA0FlDqF,IAAI,EAAEtE,aAAa,CAAC,KAAD,CA1F+B;EA2FlDuE,IAAI,EAAEvE,aAAa,CAAC,KAAD,CA3F+B;EA4FlDwE,MAAM,EAAExE,aAAa,CAAC,OAAD,CA5F6B;EA6FlDyE,MAAM,EAAEzE,aAAa,CAAC,OAAD,EAAU;IAAEd;GAAZ,CA7F6B;EA8FlDwF,KAAK,EAAE1E,aAAa,CAAC,MAAD,CA9F8B;EA+FlD2E,IAAI,EAAE3E,aAAa,CAAC,KAAD,EAAQ;IAAEhB,UAAF;IAAcC;GAAtB,CA/F+B;EAgGlD2F,KAAK,EAAE5E,aAAa,CAAC,MAAD,EAAS;IAAEf;GAAX,CAhG8B;EAiGlD4F,MAAM,EAAE7E,aAAa,CAAC,OAAD,EAAU;IAAEf;GAAZ,CAjG6B;EAkGlD6F,MAAM,EAAE9E,aAAa,CAAC,OAAD,EAAU;IAAEf;GAAZ,CAlG6B;EAmGlD8F,QAAQ,EAAE/E,aAAa,CAAC,SAAD,EAAY;IAAEhB;GAAd,CAnG2B;EAoGlDgG,OAAO,EAAEhF,aAAa,CAAC,QAAD,CApG4B;EAqGlDiF,OAAO,EAAEjF,aAAa,CAAC,QAAD,EAAW;IAAEf;GAAb,CArG4B;EAsGlDiG,KAAK,EAAElF,aAAa,CAAC,MAAD,EAAS;IAAEf;GAAX,CAtG8B;EAuGlDkG,KAAK,EAAEnF,aAAa,CAAC,MAAD,EAAS;IAAEf;GAAX,CAvG8B;EAwGlDmG,MAAM,EAAEpF,aAAa,CAAC,OAAD,EAAU;IAAEf;GAAZ,CAxG6B;EAyGlDoG,GAAG,EAAErF,aAAa,CAAC,IAAD,EAAO;IAAEhB,UAAF;IAAcY,KAAK,EAAE;GAA5B,CAzGgC;EA0GlD0F,WAAW,EAAEtF,aAAa,CAAC,YAAD,EAAe;IAAEhB,UAAF;IAAcY,KAAK,EAAE;GAApC,CA1GwB;EA2GlD2F,OAAO,EAAEvF,aAAa,CAAC,QAAD,EAAW;IAAEhB,UAAF;IAAcI,MAAd;IAAsBH;GAAjC,CA3G4B;EA4GlDuG,KAAK,EAAExF,aAAa,CAAC,MAAD,EAAS;IAAEhB,UAAF;IAAcI,MAAd;IAAsBH;GAA/B,CA5G8B;EA6GlDwG,OAAO,EAAEzF,aAAa,CAAC,QAAD,EAAW;IAAEhB,UAAF;IAAcI,MAAd;IAAsBH;GAAjC;CA7GjB;;ACjFA,MAAMyG,WAAW,GAAU,WAA3B;MACMC,aAAa,GAAQ,WAD3B;MAEMC,cAAc,GAAO,WAF3B;MAGMC,WAAW,GAAU,WAH3B;MAIMC,eAAe,GAAM,WAJ3B;MAKMC,WAAW,GAAU,WAL3B;MAMMC,kBAAkB,GAAG,WAN3B;MAOMC,WAAW,GAAU,WAP3B;MAQMC,kBAAkB,GAAG,WAR3B;MASMC,WAAW,GAAU,WAT3B;MAUMC,SAAS,GAAGT,aAAa,GAAGC,cAVlC;AAyBP,AAAO,SAASS,aAAT,CAAuBC,OAAvB,EAAyCC,WAAzC,EAA+D;SAElEX,cAAc,IACbU,OAAO,GAAGT,WAAH,GAAiB,CADX,CAAd,IAECU,WAAW,GAAGT,eAAH,GAAqB,CAFjC,CADF;;AASF,MAAaU,eAAe,GAAa,aAAlC;MACMC,cAAc,GAAc,aADlC;MAGMC,cAAc,GAAc,aAHlC;MAIMC,kBAAkB,GAAU,aAJlC;MAKMC,mBAAmB,GAAS,aALlC;MAMMC,AAGAC,eAAe,GAAa,aATlC;MAUMC,gBAAgB,GAAY,aAVlC;MAWMC,kBAAkB,GAAU,aAXlC;MAYMC,wBAAwB,GAAI,aAZlC;MAaMC,yBAAyB,GAAG,aAblC;AAkBP,AAAO,MAAMC,UAAU,GAAWX,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAyDI,gBAApF;MACMK,YAAY,GAASZ,eAAe,GAAG,CAAlB,GAAmCG,kBAAnC,GAAyD,CADpF;MAEMU,QAAQ,GAAab,eAAe,GAAG,CAAlB,GAAmCE,cAAnC,GAAyD,CAFpF;MAGMY,aAAa,GAAQd,eAAe,GAAG,CAAlB,GAAmCI,mBAAnC,GAAyD,CAHpF;MAIMW,iBAAiB,GAAI,IAAkBd,cAAlB,GAAmC,CAAnC,GAAyDM,gBAJpF;MAKMS,YAAY,GAAS,IAAkBf,cAAlB,GAAmC,CAAnC,GAAyD,CALpF;MAMMgB,YAAY,GAASjB,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAyDK,kBANpF;MAOMU,eAAe,GAAM,IAAkB,CAAlB,GAAmC,CAAnC,GAAkDR,yBAP7E;MAUMS,SAAS,GAAY,IAAkB,CAAlB,GAAmC,CAAnC,GAAyDb,eAVpF;MAWMc,YAAY,GAASpB,eAAe,GAAG,CAAlB,GAAmC,CAAnC,GAAyDM,eAXpF;MAaMe,kBAAkB,GAAGJ,YAAY,GAAGR,wBAb1C;MAcMa,iBAAiB,GAAIJ,eAd3B;;ACjDP,SAASK,gBAAT,CAA0BC,IAA1B,EAAiD;SAE7CA,IAAI,IAAI,IAAR,IACAA,IAAI,CAACC,IAAL,KAAc,UADd,IAEAD,IAAI,CAACE,IAAL,KAAc,MAFd,IAGAF,IAAI,CAACG,MAAL,KAAgB,KAJlB;;;AAQF,cAAgBC,UAAD,IACb,cAAcA,UAAd,CAAyB;EACvBC,wBAAwB,CAAC;IAAEC,OAAF;IAAWC;GAAZ,EAA8C;QAChEC,KAAK,GAAG,IAAZ;;QACI;MACFA,KAAK,GAAG,IAAIC,MAAJ,CAAWH,OAAX,EAAoBC,KAApB,CAAR;KADF,CAEE,OAAOG,CAAP,EAAU;;UAINV,IAAI,GAAG,KAAKW,kBAAL,CAAwBH,KAAxB,CAAb;IACAR,IAAI,CAACQ,KAAL,GAAa;MAAEF,OAAF;MAAWC;KAAxB;WAEOP,IAAP;;;EAGFW,kBAAkB,CAACC,KAAD,EAAqB;WAC9B,KAAKC,YAAL,CAAkBD,KAAlB,EAAyB,SAAzB,CAAP;;;EAGFE,eAAe,CAACC,SAAD,EAAgD;UACvDC,gBAAgB,GAAGD,SAAS,CAACH,KAAnC;UAEMK,IAAI,GAAG,KAAKC,WAAL,CAAiBH,SAAS,CAACI,KAA3B,EAAkCJ,SAAS,CAACK,GAAV,CAAcD,KAAhD,CAAb;UACME,UAAU,GAAG,KAAKH,WAAL,CACjBF,gBAAgB,CAACG,KADA,EAEjBH,gBAAgB,CAACI,GAAjB,CAAqBD,KAFJ,CAAnB;IAKAE,UAAU,CAACT,KAAX,GAAmBI,gBAAgB,CAACJ,KAApC;IACAS,UAAU,CAACC,GAAX,GAAiBN,gBAAgB,CAACO,KAAjB,CAAuBD,GAAxC;IAEAL,IAAI,CAACI,UAAL,GAAkB,KAAKG,YAAL,CAChBH,UADgB,EAEhB,SAFgB,EAGhBL,gBAAgB,CAACS,GAHD,EAIhBT,gBAAgB,CAACI,GAAjB,CAAqBK,GAJL,CAAlB;IAMAR,IAAI,CAACF,SAAL,GAAiBC,gBAAgB,CAACO,KAAjB,CAAuBD,GAAvB,CAA2BI,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAjB;WAEO,KAAKF,YAAL,CACLP,IADK,EAEL,qBAFK,EAGLF,SAAS,CAACU,GAHL,EAILV,SAAS,CAACK,GAAV,CAAcK,GAJT,CAAP;;;EAYFE,YAAY,CACV3B,IADU,EAEV1B,OAFU,EAGJ;UACAqD,YAAN,CAAmB3B,IAAnB,EAAyB1B,OAAzB;IACA0B,IAAI,CAACqB,UAAL,GAAkB,KAAlB;;;EAGFO,gBAAgB,CAAC5B,IAAD,EAA2C;QACrDD,gBAAgB,CAACC,IAAD,CAApB,EAA4B;WACrB4B,gBAAL,CAAwB5B,IAAF,CAAgCY,KAAtD;KADF,MAEO;YACCgB,gBAAN,CAAuB5B,IAAvB;;;;EAIJ6B,uBAAuB,CAAC1B,MAAD,EAA+C;UAC9D2B,IAAI,GAAK3B,MAAf;UACM4B,UAAU,GAAGD,IAAI,CAAC5B,IAAL,KAAc,KAAd,GAAsB,CAAtB,GAA0B,CAA7C;UACMiB,KAAK,GAAGW,IAAI,CAACX,KAAnB;;QACIW,IAAI,CAAClB,KAAL,CAAWoB,MAAX,CAAkBC,MAAlB,KAA6BF,UAAjC,EAA6C;UACvCD,IAAI,CAAC5B,IAAL,KAAc,KAAlB,EAAyB;aAClBgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;OADF,MAEO;aACAe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;;;;QAIAW,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAClB,KAAL,CAAWoB,MAAX,CAAkB,CAAlB,EAAqB/B,IAArB,KAA8B,aAAzD,EAAwE;WACjEiC,KAAL,CACEf,KADF,EAEE,uDAFF;;;;EAOJgB,SAAS,CACPC,IADO,EAEPC,WAAyB,GAAG1C,SAFrB,EAGP2C,YAHO,EAIPC,kBAJO,EAKD;YACEH,IAAI,CAACnC,IAAb;WACO,eAAL;QACEmC,IAAI,CAACI,UAAL,CAAgBC,OAAhB,CAAwBX,IAAI,IAAI;eACzBK,SAAL,CACEL,IAAI,CAAC7B,IAAL,KAAc,UAAd,GAA2B6B,IAAI,CAAClB,KAAhC,GAAwCkB,IAD1C,EAEEO,WAFF,EAGEC,YAHF,EAIE,8BAJF;SADF;;;;cAUMH,SAAN,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,kBAAjD;;;;EAING,cAAc,CACZZ,IADY,EAEZa,QAFY,EAGN;QAEJb,IAAI,CAAC7B,IAAL,KAAc,eAAd,IACA6B,IAAI,CAACc,QADL,IAEAd,IAAI,CAAC3B,MAFL,IAIA2B,IAAI,CAACe,SALP,EAME;;;;UAIIC,GAAG,GAAGhB,IAAI,CAACgB,GAAjB;UAEM7K,IAAI,GAAG6K,GAAG,CAAC7C,IAAJ,KAAa,YAAb,GAA4B6C,GAAG,CAAC7K,IAAhC,GAAuC8K,MAAM,CAACD,GAAG,CAAClC,KAAL,CAA1D;;QAEI3I,IAAI,KAAK,WAAT,IAAwB6J,IAAI,CAAC5B,IAAL,KAAc,MAA1C,EAAkD;UAC5CyC,QAAQ,CAACK,KAAb,EAAoB;aACbd,KAAL,CAAWY,GAAG,CAAC3B,KAAf,EAAsB,oCAAtB;;;MAEFwB,QAAQ,CAACK,KAAT,GAAiB,IAAjB;;;;EAIJC,YAAY,CAACjD,IAAD,EAA4C;UAChDkD,gBAAgB,GAAGlD,IAAI,CAACmD,IAAL,CAAUlD,IAAV,KAAmB,gBAA5C;;QAEIiD,gBAAgB,IAAIlD,IAAI,CAACmD,IAAL,CAAUA,IAAV,CAAelB,MAAf,GAAwB,CAAhD,EAAmD;yCACzBjC,IAAI,CAACmD,IAAL,CAAUA,IADe,qCACT;cAA7BpC,SAAS,sBAAf;;YAEDA,SAAS,CAACd,IAAV,KAAmB,qBAAnB,IACAc,SAAS,CAACM,UAAV,CAAqBpB,IAArB,KAA8B,SAFhC,EAGE;cACIc,SAAS,CAACM,UAAV,CAAqBT,KAArB,KAA+B,YAAnC,EAAiD,OAAO,IAAP;SAJnD,MAKO;;;;;;WAOJ,KAAP;;;EAGFwC,gBAAgB,CAACnC,IAAD,EAA6B;WAEzCA,IAAI,CAAChB,IAAL,KAAc,qBAAd,IACAgB,IAAI,CAACI,UAAL,CAAgBpB,IAAhB,KAAyB,SADzB,IAEA,OAAOgB,IAAI,CAACI,UAAL,CAAgBT,KAAvB,KAAiC,QAFjC,KAGC,CAACK,IAAI,CAACI,UAAL,CAAgBE,KAAjB,IAA0B,CAACN,IAAI,CAACI,UAAL,CAAgBE,KAAhB,CAAsB8B,aAHlD,CADF;;;EAQFC,eAAe,CAACrC,IAAD,EAAiC;UACxCF,SAAS,GAAG,MAAMuC,eAAN,CAAsBrC,IAAtB,CAAlB;UACML,KAAK,GAAGK,IAAI,CAACI,UAAL,CAAgBT,KAA9B;IAIAG,SAAS,CAACH,KAAV,CAAgBA,KAAhB,GAAwBA,KAAxB;WAEOG,SAAP;;;EAGFwC,cAAc,CACZvD,IADY,EAEZwD,eAFY,EAGZC,QAHY,EAIZhC,GAJY,EAKN;UACA8B,cAAN,CAAqBvD,IAArB,EAA2BwD,eAA3B,EAA4CC,QAA5C,EAAsDhC,GAAtD;UAEMiC,mBAAmB,GAAG1D,IAAI,CAAC2D,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAC/C,KAAK/C,eAAL,CAAqB+C,CAArB,CAD0B,CAA5B;IAGA7D,IAAI,CAACmD,IAAL,GAAYO,mBAAmB,CAACI,MAApB,CAA2B9D,IAAI,CAACmD,IAAhC,CAAZ;WACOnD,IAAI,CAAC2D,UAAZ;;;EAGFI,eAAe,CACbC,SADa,EAEb7D,MAFa,EAGb5B,WAHa,EAIbD,OAJa,EAKb2F,aALa,EAMbC,iBANa,EAOP;SACDC,WAAL,CACEhE,MADF,EAEE5B,WAFF,EAGED,OAHF,EAIE2F,aAJF,EAKEC,iBALF,EAME,aANF,EAOE,IAPF;;QASI/D,MAAM,CAACiE,cAAX,EAA2B;MAEzBjE,MAAM,CAACS,KAAP,CAAawD,cAAb,GAA8BjE,MAAM,CAACiE,cAArC;aACOjE,MAAM,CAACiE,cAAd;;;IAEFJ,SAAS,CAACb,IAAV,CAAekB,IAAf,CAAoBlE,MAApB;;;EAGFmE,aAAa,CAACC,sBAAD,EAA8C;YACjD,KAAKC,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAAChM,MAAR;eACS,KAAK4H,wBAAL,CAA8B,KAAKmE,KAAL,CAAW5D,KAAzC,CAAP;;WAEG6D,KAAE,CAAClM,GAAR;WACKkM,KAAE,CAAC/L,MAAR;eACS,KAAKiI,kBAAL,CAAwB,KAAK6D,KAAL,CAAW5D,KAAnC,CAAP;;WAEG6D,KAAE,CAACvH,KAAR;eACS,KAAKyD,kBAAL,CAAwB,IAAxB,CAAP;;WAEG8D,KAAE,CAACtH,KAAR;eACS,KAAKwD,kBAAL,CAAwB,IAAxB,CAAP;;WAEG8D,KAAE,CAACrH,MAAR;eACS,KAAKuD,kBAAL,CAAwB,KAAxB,CAAP;;;eAGO,MAAM2D,aAAN,CAAoBC,sBAApB,CAAP;;;;EAIN1D,YAAY,CACVD,KADU,EAEVX,IAFU,EAGVyE,QAHU,EAIVC,QAJU,EAKP;UACG3E,IAAI,GAAG,MAAMa,YAAN,CAAmBD,KAAnB,EAA0BX,IAA1B,EAAgCyE,QAAhC,EAA0CC,QAA1C,CAAb;IACA3E,IAAI,CAACsB,GAAL,GAAWtB,IAAI,CAACuB,KAAL,CAAWD,GAAtB;WACOtB,IAAI,CAACuB,KAAZ;WAEOvB,IAAP;;;EAGF4E,iBAAiB,CACf5E,IADe,EAEf6E,eAFe,EAGfC,QAAkB,GAAG,KAHN,EAIT;UACAF,iBAAN,CAAwB5E,IAAxB,EAA8B6E,eAA9B,EAA+CC,QAA/C;IACA9E,IAAI,CAACqB,UAAL,GAAkBrB,IAAI,CAACmD,IAAL,CAAUlD,IAAV,KAAmB,gBAArC;;;EAGFkE,WAAW,CACTnE,IADS,EAETzB,WAFS,EAGTD,OAHS,EAIT2F,aAJS,EAKTc,gBALS,EAMT9E,IANS,EAOT+E,YAAqB,GAAG,KAPf,EAQN;QACCC,QAAQ,GAAG,KAAKC,SAAL,EAAf;IACAD,QAAQ,CAAC/E,IAAT,GAAgBF,IAAI,CAACE,IAArB;IACA+E,QAAQ,GAAG,MAAMd,WAAN,CACTc,QADS,EAET1G,WAFS,EAGTD,OAHS,EAIT2F,aAJS,EAKTc,gBALS,EAMT9E,IANS,EAOT+E,YAPS,CAAX;IASAC,QAAQ,CAAChF,IAAT,GAAgB,oBAAhB;WACOgF,QAAQ,CAAC/E,IAAhB;IAEAF,IAAI,CAACY,KAAL,GAAaqE,QAAb;IAEAhF,IAAI,GAAGA,IAAI,KAAK,aAAT,GAAyB,kBAAzB,GAA8CA,IAArD;WACO,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;;;EAGFmF,iBAAiB,CACftD,IADe,EAEfvD,WAFe,EAGfD,OAHe,EAIf+G,SAJe,EAKfC,WALe,EAME;UACXtF,IAAsB,GAAI,MAAMoF,iBAAN,CAC9BtD,IAD8B,EAE9BvD,WAF8B,EAG9BD,OAH8B,EAI9B+G,SAJ8B,EAK9BC,WAL8B,CAAhC;;QAQItF,IAAJ,EAAU;MACRA,IAAI,CAACC,IAAL,GAAY,UAAZ;UACMD,IAAF,CAA6BE,IAA7B,KAAsC,QAA1C,EAAoDF,IAAI,CAACE,IAAL,GAAY,MAAZ;MACpDF,IAAI,CAAC6C,SAAL,GAAiB,KAAjB;;;WAGM7C,IAAR;;;EAGFuF,mBAAmB,CACjBzD,IADiB,EAEjB4C,QAFiB,EAGjBC,QAHiB,EAIjBU,SAJiB,EAKjBd,sBALiB,EAME;UACbvE,IAAsB,GAAI,MAAMuF,mBAAN,CAC9BzD,IAD8B,EAE9B4C,QAF8B,EAG9BC,QAH8B,EAI9BU,SAJ8B,EAK9Bd,sBAL8B,CAAhC;;QAQIvE,IAAJ,EAAU;MACRA,IAAI,CAACE,IAAL,GAAY,MAAZ;MACAF,IAAI,CAACC,IAAL,GAAY,UAAZ;;;WAGMD,IAAR;;;EAGFwF,YAAY,CACVxF,IADU,EAEVyF,SAFU,EAGVlD,kBAHU,EAIF;QACJxC,gBAAgB,CAACC,IAAD,CAApB,EAA4B;WACrBwF,YAAL,CAAkBxF,IAAI,CAACY,KAAvB,EAA8B6E,SAA9B,EAAyClD,kBAAzC;aAEOvC,IAAP;;;WAGK,MAAMwF,YAAN,CAAmBxF,IAAnB,EAAyByF,SAAzB,EAAoClD,kBAApC,CAAP;;;EAGFmD,gCAAgC,CAC9B5D,IAD8B,EAE9B2D,SAF8B,EAG9BE,MAH8B,EAI9B;QACI7D,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAC5B,IAAL,KAAc,KAAzC,EAAgD;WACzCgC,KAAL,CACEJ,IAAI,CAACgB,GAAL,CAAS3B,KADX,EAEE,+CAFF;KADF,MAKO,IAAIW,IAAI,CAAC3B,MAAT,EAAiB;WACjB+B,KAAL,CAAWJ,IAAI,CAACgB,GAAL,CAAS3B,KAApB,EAA2B,sCAA3B;KADK,MAEA;YACCuE,gCAAN,CAAuC5D,IAAvC,EAA6C2D,SAA7C,EAAwDE,MAAxD;;;;CA5WR;;ACXO,MAAMC,SAAS,GAAG,wBAAlB;AACP,AAAO,MAAMC,UAAU,GAAG,IAAIpF,MAAJ,CAAWmF,SAAS,CAACE,MAArB,EAA6B,GAA7B,CAAnB;AAGP,AAAO,SAASC,SAAT,CAAmBC,IAAnB,EAA0C;UACvCA,IAAR;;;;;aAKW,IAAP;;;aAGO,KAAP;;;AAIN,AAAO,MAAMC,cAAc,GAAG,+BAAvB;AAGP,AAAO,SAASC,YAAT,CAAsBF,IAAtB,EAA6C;UAC1CA,IAAR;SACO,MAAL;SACK,MAAL;SACK,MAAL;;;;SAIK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;SACK,MAAL;aACS,IAAP;;;aAGO,KAAP;;;;AC3CC,MAAMG,UAAN,CAAiB;EACtB5O,WAAW,CACTY,KADS,EAETiO,MAFS,EAGTC,aAHS,EAITC,QAJS,EAKT;SACKnO,KAAL,GAAaA,KAAb;SACKiO,MAAL,GAAc,CAAC,CAACA,MAAhB;SACKC,aAAL,GAAqB,CAAC,CAACA,aAAvB;SACKC,QAAL,GAAgBA,QAAhB;;;;AASJ,AAAO,MAAMhO,OAEZ,GAAG;EACFiO,cAAc,EAAE,IAAIJ,UAAJ,CAAe,GAAf,EAAoB,KAApB,CADd;EAEFK,eAAe,EAAE,IAAIL,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAFf;EAGFM,aAAa,EAAE,IAAIN,UAAJ,CAAe,IAAf,EAAqB,KAArB,CAHb;EAIFO,cAAc,EAAE,IAAIP,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAJd;EAKFQ,eAAe,EAAE,IAAIR,UAAJ,CAAe,GAAf,EAAoB,IAApB,CALf;EAMFvM,QAAQ,EAAE,IAAIuM,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgCS,CAAC,IAAIA,CAAC,CAACC,aAAF,EAArC,CANR;EAOFC,kBAAkB,EAAE,IAAIX,UAAJ,CAAe,UAAf,EAA2B,IAA3B,CAPlB;EAQFY,iBAAiB,EAAE,IAAIZ,UAAJ,CAAe,UAAf,EAA2B,KAA3B;CAVd;;AAeP1B,KAAE,CAACtL,MAAH,CAAUtB,aAAV,GAA0B4M,KAAE,CAACzL,MAAH,CAAUnB,aAAV,GAA0B,YAAW;MACzD,KAAK2M,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnB,KAA8B,CAAlC,EAAqC;SAC9BuC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;;;;MAIEC,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAV;;MACID,GAAG,KAAK5O,OAAK,CAACiO,cAAd,IAAgC,KAAKa,UAAL,GAAkBjP,KAAlB,KAA4B,UAAhE,EAA4E;IAC1E+O,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAN;;;OAGG3C,KAAL,CAAWyC,WAAX,GAAyB,CAACC,GAAG,CAACd,MAA9B;CAXF;;AAcA3B,KAAE,CAACxM,IAAH,CAAQJ,aAAR,GAAwB,UAASwP,QAAT,EAAmB;MACrCC,OAAO,GAAG,KAAd;;MACID,QAAQ,KAAK5C,KAAE,CAACjL,GAApB,EAAyB;QAEpB,KAAKgL,KAAL,CAAW5D,KAAX,KAAqB,IAArB,IAA6B,CAAC,KAAK4D,KAAL,CAAWyC,WAA1C,IACC,KAAKzC,KAAL,CAAW5D,KAAX,KAAqB,OAArB,IAAgC,KAAK2G,KAAL,CAAWC,WAF9C,EAGE;MACAF,OAAO,GAAG,IAAV;;;;OAGC9C,KAAL,CAAWyC,WAAX,GAAyBK,OAAzB;;MAEI,KAAK9C,KAAL,CAAWiD,UAAf,EAA2B;SACpBjD,KAAL,CAAWiD,UAAX,GAAwB,KAAxB;;CAbJ;;AAiBAhD,KAAE,CAAC3L,MAAH,CAAUjB,aAAV,GAA0B,UAASwP,QAAT,EAAmB;OACtC7C,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CACE,KAAKqD,YAAL,CAAkBL,QAAlB,IAA8B/O,OAAK,CAACiO,cAApC,GAAqDjO,OAAK,CAACkO,eAD7D;OAGKhC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;CAJF;;AAOAxC,KAAE,CAAC1K,YAAH,CAAgBlC,aAAhB,GAAgC,YAAW;OACpC2M,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwB/L,OAAK,CAACmO,aAA9B;OACKjC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;CAFF;;AAKAxC,KAAE,CAACvL,MAAH,CAAUrB,aAAV,GAA0B,UAASwP,QAAT,EAAmB;QACrCM,eAAe,GACnBN,QAAQ,KAAK5C,KAAE,CAACvI,GAAhB,IACAmL,QAAQ,KAAK5C,KAAE,CAACzI,IADhB,IAEAqL,QAAQ,KAAK5C,KAAE,CAAC/H,KAFhB,IAGA2K,QAAQ,KAAK5C,KAAE,CAAChI,MAJlB;OAKK+H,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CACEsD,eAAe,GAAGrP,OAAK,CAACoO,cAAT,GAA0BpO,OAAK,CAACqO,eADjD;OAGKnC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;CATF;;AAYAxC,KAAE,CAACpK,MAAH,CAAUxC,aAAV,GAA0B,YAAW,EAArC;;AAIA4M,KAAE,CAACxI,SAAH,CAAapE,aAAb,GAA6B4M,KAAE,CAAC3H,MAAH,CAAUjF,aAAV,GAA0B,UAASwP,QAAT,EAAmB;MAEtEA,QAAQ,CAACrQ,UAAT,IACAqQ,QAAQ,KAAK5C,KAAE,CAACpL,IADhB,IAEAgO,QAAQ,KAAK5C,KAAE,CAAC3I,KAFhB,IAGA,EACEuL,QAAQ,KAAK5C,KAAE,CAACtI,OAAhB,IACAyJ,SAAS,CAACgC,IAAV,CAAe,KAAKC,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWrD,KAAnD,CAAf,CAFF,CAHA,IAOA,EACE,CAACkG,QAAQ,KAAK5C,KAAE,CAACnL,KAAhB,IAAyB+N,QAAQ,KAAK5C,KAAE,CAAC3L,MAA1C,KACA,KAAKsO,UAAL,OAAsB9O,OAAK,CAACyP,MAF9B,CARF,EAYE;SACKvD,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwB/L,OAAK,CAACwO,kBAA9B;GAbF,MAcO;SACAtC,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwB/L,OAAK,CAACyO,iBAA9B;;;OAGGvC,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;CAnBF;;AAsBAxC,KAAE,CAAC3K,SAAH,CAAajC,aAAb,GAA6B,YAAW;MAClC,KAAKuP,UAAL,OAAsB9O,OAAK,CAACsB,QAAhC,EAA0C;SACnC4K,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;GADF,MAEO;SACA3C,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwB/L,OAAK,CAACsB,QAA9B;;;OAEG4K,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;CANF;;ACrHA,MAAMe,aAAa,GAAG;EACpBC,MAAM,EAAE,CACN,YADM,EAEN,WAFM,EAGN,KAHM,EAIN,SAJM,EAKN,SALM,EAMN,WANM,EAON,QAPM,EAQN,QARM,EASN,OATM,CADY;EAYpBC,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT;CAZd;AAeA,MAAMC,sBAAsB,GAAG,IAAIC,GAAJ,CAAQJ,aAAa,CAACC,MAAtB,CAA/B;AACA,MAAMI,0BAA0B,GAAG,IAAID,GAAJ,CACjCJ,aAAa,CAACC,MAAd,CAAqBnE,MAArB,CAA4BkE,aAAa,CAACE,UAA1C,CADiC,CAAnC;AAOA,AAAO,MAAMI,cAAc,GAAG,CAACC,IAAD,EAAeC,QAAf,KAA8C;SAClEA,QAAQ,IAAID,IAAI,KAAK,OAAtB,IAAkCA,IAAI,KAAK,MAAlD;CADK;AASP,AAAO,SAASE,oBAAT,CAA8BF,IAA9B,EAA4CC,QAA5C,EAAwE;SACtEF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCL,sBAAsB,CAACO,GAAvB,CAA2BH,IAA3B,CAAzC;;AAQF,AAAO,SAASI,wBAAT,CACLJ,IADK,EAELC,QAFK,EAGI;SACFF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCH,0BAA0B,CAACK,GAA3B,CAA+BH,IAA/B,CAAzC;;AAGF,AAAO,SAASK,SAAT,CAAmBL,IAAnB,EAA0C;SACxCzQ,QAAQ,CAAC4Q,GAAT,CAAaH,IAAb,CAAP;;AAGF,AAAO,MAAMM,yBAAyB,GAAG,iBAAlC;AAWP,IAAIC,4BAA4B,GAAG,urIAAnC;AAEA,IAAIC,uBAAuB,GAAG,kiFAA9B;AAEA,MAAMC,uBAAuB,GAAG,IAAIvI,MAAJ,CAC9B,MAAMqI,4BAAN,GAAqC,GADP,CAAhC;AAGA,MAAMG,kBAAkB,GAAG,IAAIxI,MAAJ,CACzB,MAAMqI,4BAAN,GAAqCC,uBAArC,GAA+D,GADtC,CAA3B;AAIAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD;AAQA,MAAMG,0BAA0B,GAAG,CAAC,CAAD,EAAG,EAAH,EAAM,CAAN,EAAQ,EAAR,EAAW,CAAX,EAAa,EAAb,EAAgB,CAAhB,EAAkB,CAAlB,EAAoB,CAApB,EAAsB,EAAtB,EAAyB,CAAzB,EAA2B,EAA3B,EAA8B,EAA9B,EAAiC,GAAjC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,GAA3C,EAA+C,EAA/C,EAAkD,CAAlD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,CAAnE,EAAqE,EAArE,EAAwE,EAAxE,EAA2E,EAA3E,EAA8E,CAA9E,EAAgF,EAAhF,EAAmF,CAAnF,EAAqF,CAArF,EAAuF,CAAvF,EAAyF,CAAzF,EAA2F,EAA3F,EAA8F,GAA9F,EAAkG,EAAlG,EAAqG,EAArG,EAAwG,CAAxG,EAA0G,EAA1G,EAA6G,CAA7G,EAA+G,EAA/G,EAAkH,CAAlH,EAAoH,EAApH,EAAuH,GAAvH,EAA2H,GAA3H,EAA+H,EAA/H,EAAkI,EAAlI,EAAqI,EAArI,EAAwI,CAAxI,EAA0I,GAA1I,EAA8I,CAA9I,EAAgJ,CAAhJ,EAAkJ,CAAlJ,EAAoJ,CAApJ,EAAsJ,EAAtJ,EAAyJ,CAAzJ,EAA2J,CAA3J,EAA6J,CAA7J,EAA+J,CAA/J,EAAiK,CAAjK,EAAmK,EAAnK,EAAsK,EAAtK,EAAyK,EAAzK,EAA4K,EAA5K,EAA+K,EAA/K,EAAkL,EAAlL,EAAqL,EAArL,EAAwL,CAAxL,EAA0L,CAA1L,EAA4L,EAA5L,EAA+L,EAA/L,EAAkM,EAAlM,EAAqM,EAArM,EAAwM,EAAxM,EAA2M,EAA3M,EAA8M,CAA9M,EAAgN,CAAhN,EAAkN,EAAlN,EAAqN,CAArN,EAAuN,EAAvN,EAA0N,CAA1N,EAA4N,CAA5N,EAA8N,CAA9N,EAAgO,CAAhO,EAAkO,EAAlO,EAAqO,EAArO,EAAwO,EAAxO,EAA2O,CAA3O,EAA6O,EAA7O,EAAgP,EAAhP,EAAmP,CAAnP,EAAqP,CAArP,EAAuP,EAAvP,EAA0P,EAA1P,EAA6P,EAA7P,EAAgQ,EAAhQ,EAAmQ,EAAnQ,EAAsQ,EAAtQ,EAAyQ,EAAzQ,EAA4Q,EAA5Q,EAA+Q,EAA/Q,EAAkR,GAAlR,EAAsR,EAAtR,EAAyR,EAAzR,EAA4R,EAA5R,EAA+R,EAA/R,EAAkS,EAAlS,EAAqS,EAArS,EAAwS,EAAxS,EAA2S,GAA3S,EAA+S,EAA/S,EAAkT,EAAlT,EAAqT,CAArT,EAAuT,CAAvT,EAAyT,EAAzT,EAA4T,GAA5T,EAAgU,EAAhU,EAAmU,EAAnU,EAAsU,EAAtU,EAAyU,EAAzU,EAA4U,EAA5U,EAA+U,EAA/U,EAAkV,EAAlV,EAAqV,EAArV,EAAwV,EAAxV,EAA2V,EAA3V,EAA8V,CAA9V,EAAgW,EAAhW,EAAmW,EAAnW,EAAsW,CAAtW,EAAwW,CAAxW,EAA0W,EAA1W,EAA6W,EAA7W,EAAgX,EAAhX,EAAmX,CAAnX,EAAqX,EAArX,EAAwX,CAAxX,EAA0X,CAA1X,EAA4X,CAA5X,EAA8X,EAA9X,EAAiY,EAAjY,EAAoY,CAApY,EAAsY,EAAtY,EAAyY,EAAzY,EAA4Y,CAA5Y,EAA8Y,CAA9Y,EAAgZ,CAAhZ,EAAkZ,CAAlZ,EAAoZ,CAApZ,EAAsZ,CAAtZ,EAAwZ,EAAxZ,EAA2Z,CAA3Z,EAA6Z,CAA7Z,EAA+Z,CAA/Z,EAAia,EAAja,EAAoa,EAApa,EAAua,CAAva,EAAya,CAAza,EAA2a,CAA3a,EAA6a,CAA7a,EAA+a,EAA/a,EAAkb,CAAlb,EAAob,CAApb,EAAsb,CAAtb,EAAwb,CAAxb,EAA0b,CAA1b,EAA4b,CAA5b,EAA8b,CAA9b,EAAgc,CAAhc,EAAkc,EAAlc,EAAqc,CAArc,EAAuc,EAAvc,EAA0c,CAA1c,EAA4c,GAA5c,EAAgd,EAAhd,EAAmd,EAAnd,EAAsd,CAAtd,EAAwd,EAAxd,EAA2d,CAA3d,EAA6d,EAA7d,EAAge,EAAhe,EAAme,EAAne,EAAse,CAAte,EAAwe,CAAxe,EAA0e,CAA1e,EAA4e,GAA5e,EAAgf,EAAhf,EAAmf,EAAnf,EAAsf,CAAtf,EAAwf,EAAxf,EAA2f,EAA3f,EAA8f,EAA9f,EAAigB,CAAjgB,EAAmgB,EAAngB,EAAsgB,EAAtgB,EAAygB,EAAzgB,EAA4gB,CAA5gB,EAA8gB,EAA9gB,EAAihB,EAAjhB,EAAohB,GAAphB,EAAwhB,EAAxhB,EAA2hB,GAA3hB,EAA+hB,EAA/hB,EAAkiB,EAAliB,EAAqiB,CAAriB,EAAuiB,GAAviB,EAA2iB,CAA3iB,EAA6iB,CAA7iB,EAA+iB,EAA/iB,EAAkjB,EAAljB,EAAqjB,CAArjB,EAAujB,CAAvjB,EAAyjB,CAAzjB,EAA2jB,EAA3jB,EAA8jB,CAA9jB,EAAgkB,EAAhkB,EAAmkB,EAAnkB,EAAskB,CAAtkB,EAAwkB,CAAxkB,EAA0kB,EAA1kB,EAA6kB,CAA7kB,EAA+kB,EAA/kB,EAAklB,EAAllB,EAAqlB,EAArlB,EAAwlB,CAAxlB,EAA0lB,EAA1lB,EAA6lB,EAA7lB,EAAgmB,GAAhmB,EAAomB,CAApmB,EAAsmB,CAAtmB,EAAwmB,EAAxmB,EAA2mB,EAA3mB,EAA8mB,CAA9mB,EAAgnB,EAAhnB,EAAmnB,EAAnnB,EAAsnB,GAAtnB,EAA0nB,CAA1nB,EAA4nB,CAA5nB,EAA8nB,CAA9nB,EAAgoB,CAAhoB,EAAkoB,EAAloB,EAAqoB,EAAroB,EAAwoB,CAAxoB,EAA0oB,EAA1oB,EAA6oB,CAA7oB,EAA+oB,CAA/oB,EAAipB,CAAjpB,EAAmpB,CAAnpB,EAAqpB,EAArpB,EAAwpB,EAAxpB,EAA2pB,CAA3pB,EAA6pB,GAA7pB,EAAiqB,EAAjqB,EAAoqB,GAApqB,EAAwqB,GAAxqB,EAA4qB,GAA5qB,EAAgrB,GAAhrB,EAAorB,EAAprB,EAAurB,GAAvrB,EAA2rB,IAA3rB,EAAgsB,IAAhsB,EAAqsB,IAArsB,EAA0sB,GAA1sB,EAA8sB,IAA9sB,EAAmtB,GAAntB,EAAutB,CAAvtB,EAAytB,EAAztB,EAA4tB,GAA5tB,EAAguB,EAAhuB,EAAmuB,EAAnuB,EAAsuB,EAAtuB,EAAyuB,EAAzuB,EAA4uB,CAA5uB,EAA8uB,EAA9uB,EAAivB,EAAjvB,EAAovB,CAApvB,EAAsvB,EAAtvB,EAAyvB,GAAzvB,EAA6vB,EAA7vB,EAAgwB,GAAhwB,EAAowB,EAApwB,EAAuwB,CAAvwB,EAAywB,CAAzwB,EAA2wB,EAA3wB,EAA8wB,EAA9wB,EAAixB,EAAjxB,EAAoxB,CAApxB,EAAsxB,CAAtxB,EAAwxB,CAAxxB,EAA0xB,EAA1xB,EAA6xB,IAA7xB,EAAkyB,CAAlyB,EAAoyB,GAApyB,EAAwyB,IAAxyB,EAA6yB,GAA7yB,EAAizB,EAAjzB,EAAozB,CAApzB,EAAszB,EAAtzB,EAAyzB,CAAzzB,EAA2zB,CAA3zB,EAA6zB,GAA7zB,EAAi0B,IAAj0B,EAAs0B,GAAt0B,EAA00B,CAA10B,EAA40B,EAA50B,EAA+0B,CAA/0B,EAAi1B,CAAj1B,EAAm1B,CAAn1B,EAAq1B,CAAr1B,EAAu1B,IAAv1B,EAA41B,EAA51B,EAA+1B,CAA/1B,EAAi2B,EAAj2B,EAAo2B,CAAp2B,EAAs2B,CAAt2B,EAAw2B,CAAx2B,EAA02B,CAA12B,EAA42B,CAA52B,EAA82B,CAA92B,EAAg3B,CAAh3B,EAAk3B,CAAl3B,EAAo3B,CAAp3B,EAAs3B,EAAt3B,EAAy3B,CAAz3B,EAA23B,CAA33B,EAA63B,CAA73B,EAA+3B,CAA/3B,EAAi4B,CAAj4B,EAAm4B,EAAn4B,EAAs4B,CAAt4B,EAAw4B,CAAx4B,EAA04B,CAA14B,EAA44B,CAA54B,EAA84B,CAA94B,EAAg5B,CAAh5B,EAAk5B,CAAl5B,EAAo5B,EAAp5B,EAAu5B,CAAv5B,EAAy5B,CAAz5B,EAA25B,CAA35B,EAA65B,CAA75B,EAA+5B,CAA/5B,EAAi6B,CAAj6B,EAAm6B,CAAn6B,EAAq6B,CAAr6B,EAAu6B,CAAv6B,EAAy6B,GAAz6B,EAA66B,CAA76B,EAA+6B,EAA/6B,EAAk7B,CAAl7B,EAAo7B,EAAp7B,EAAu7B,CAAv7B,EAAy7B,EAAz7B,EAA47B,CAA57B,EAA87B,EAA97B,EAAi8B,CAAj8B,EAAm8B,EAAn8B,EAAs8B,CAAt8B,EAAw8B,EAAx8B,EAA28B,CAA38B,EAA68B,EAA78B,EAAg9B,CAAh9B,EAAk9B,EAAl9B,EAAq9B,CAAr9B,EAAu9B,EAAv9B,EAA09B,CAA19B,EAA49B,EAA59B,EAA+9B,CAA/9B,EAAi+B,CAAj+B,EAAm+B,IAAn+B,EAAw+B,EAAx+B,EAA2+B,EAA3+B,EAA8+B,CAA9+B,EAAg/B,EAAh/B,EAAm/B,CAAn/B,EAAq/B,GAAr/B,EAAy/B,EAAz/B,EAA4/B,IAA5/B,EAAigC,GAAjgC,EAAqgC,EAArgC,EAAwgC,EAAxgC,EAA2gC,CAA3gC,EAA6gC,CAA7gC,EAA+gC,IAA/gC,EAAohC,CAAphC,EAAshC,CAAthC,EAAwhC,EAAxhC,EAA2hC,CAA3hC,EAA6hC,CAA7hC,EAA+hC,CAA/hC,EAAiiC,CAAjiC,EAAmiC,CAAniC,EAAqiC,CAAriC,EAAuiC,CAAviC,EAAyiC,CAAziC,EAA2iC,CAA3iC,EAA6iC,CAA7iC,EAA+iC,CAA/iC,EAAijC,CAAjjC,EAAmjC,CAAnjC,EAAqjC,CAArjC,EAAujC,CAAvjC,EAAyjC,CAAzjC,EAA2jC,CAA3jC,EAA6jC,CAA7jC,EAA+jC,CAA/jC,EAAikC,CAAjkC,EAAmkC,CAAnkC,EAAqkC,CAArkC,EAAukC,CAAvkC,EAAykC,CAAzkC,EAA2kC,CAA3kC,EAA6kC,CAA7kC,EAA+kC,CAA/kC,EAAilC,CAAjlC,EAAmlC,CAAnlC,EAAqlC,CAArlC,EAAulC,CAAvlC,EAAylC,CAAzlC,EAA2lC,CAA3lC,EAA6lC,CAA7lC,EAA+lC,CAA/lC,EAAimC,CAAjmC,EAAmmC,CAAnmC,EAAqmC,CAArmC,EAAumC,CAAvmC,EAAymC,CAAzmC,EAA2mC,CAA3mC,EAA6mC,CAA7mC,EAA+mC,CAA/mC,EAAinC,CAAjnC,EAAmnC,CAAnnC,EAAqnC,CAArnC,EAAunC,CAAvnC,EAAynC,CAAznC,EAA2nC,CAA3nC,EAA6nC,CAA7nC,EAA+nC,CAA/nC,EAAioC,CAAjoC,EAAmoC,CAAnoC,EAAqoC,CAAroC,EAAuoC,CAAvoC,EAAyoC,EAAzoC,EAA4oC,CAA5oC,EAA8oC,CAA9oC,EAAgpC,CAAhpC,EAAkpC,CAAlpC,EAAopC,CAAppC,EAAspC,EAAtpC,EAAypC,IAAzpC,EAA8pC,KAA9pC,EAAoqC,EAApqC,EAAuqC,IAAvqC,EAA4qC,EAA5qC,EAA+qC,GAA/qC,EAAmrC,CAAnrC,EAAqrC,IAArrC,EAA0rC,EAA1rC,EAA6rC,IAA7rC,EAAksC,IAAlsC,EAAusC,GAAvsC,CAAnC;AAEA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAK,CAAL,EAAO,GAAP,EAAW,CAAX,EAAa,GAAb,EAAiB,CAAjB,EAAmB,GAAnB,EAAuB,CAAvB,EAAyB,IAAzB,EAA8B,CAA9B,EAAgC,CAAhC,EAAkC,CAAlC,EAAoC,CAApC,EAAsC,CAAtC,EAAwC,EAAxC,EAA2C,CAA3C,EAA6C,CAA7C,EAA+C,CAA/C,EAAiD,GAAjD,EAAqD,CAArD,EAAuD,GAAvD,EAA2D,CAA3D,EAA6D,CAA7D,EAA+D,CAA/D,EAAiE,GAAjE,EAAqE,EAArE,EAAwE,GAAxE,EAA4E,CAA5E,EAA8E,EAA9E,EAAiF,EAAjF,EAAoF,EAApF,EAAuF,CAAvF,EAAyF,EAAzF,EAA4F,CAA5F,EAA8F,EAA9F,EAAiG,EAAjG,EAAoG,EAApG,EAAuG,CAAvG,EAAyG,CAAzG,EAA2G,CAA3G,EAA6G,EAA7G,EAAgH,EAAhH,EAAmH,CAAnH,EAAqH,CAArH,EAAuH,CAAvH,EAAyH,CAAzH,EAA2H,EAA3H,EAA8H,CAA9H,EAAgI,EAAhI,EAAmI,CAAnI,EAAqI,EAArI,EAAwI,EAAxI,EAA2I,CAA3I,EAA6I,CAA7I,EAA+I,CAA/I,EAAiJ,CAAjJ,EAAmJ,EAAnJ,EAAsJ,EAAtJ,EAAyJ,CAAzJ,EAA2J,CAA3J,EAA6J,GAA7J,EAAiK,EAAjK,EAAoK,CAApK,EAAsK,CAAtK,EAAwK,CAAxK,EAA0K,CAA1K,EAA4K,EAA5K,EAA+K,CAA/K,EAAiL,CAAjL,EAAmL,CAAnL,EAAqL,CAArL,EAAuL,CAAvL,EAAyL,CAAzL,EAA2L,CAA3L,EAA6L,EAA7L,EAAgM,CAAhM,EAAkM,EAAlM,EAAqM,CAArM,EAAuM,CAAvM,EAAyM,CAAzM,EAA2M,CAA3M,EAA6M,CAA7M,EAA+M,GAA/M,EAAmN,EAAnN,EAAsN,EAAtN,EAAyN,CAAzN,EAA2N,CAA3N,EAA6N,CAA7N,EAA+N,EAA/N,EAAkO,EAAlO,EAAqO,EAArO,EAAwO,CAAxO,EAA0O,GAA1O,EAA8O,CAA9O,EAAgP,CAAhP,EAAkP,CAAlP,EAAoP,EAApP,EAAuP,CAAvP,EAAyP,EAAzP,EAA4P,EAA5P,EAA+P,EAA/P,EAAkQ,CAAlQ,EAAoQ,EAApQ,EAAuQ,EAAvQ,EAA0Q,CAA1Q,EAA4Q,CAA5Q,EAA8Q,EAA9Q,EAAiR,EAAjR,EAAoR,CAApR,EAAsR,CAAtR,EAAwR,GAAxR,EAA4R,EAA5R,EAA+R,GAA/R,EAAmS,CAAnS,EAAqS,GAArS,EAAyS,CAAzS,EAA2S,CAA3S,EAA6S,CAA7S,EAA+S,CAA/S,EAAiT,CAAjT,EAAmT,EAAnT,EAAsT,CAAtT,EAAwT,EAAxT,EAA2T,CAA3T,EAA6T,CAA7T,EAA+T,CAA/T,EAAiU,CAAjU,EAAmU,CAAnU,EAAqU,EAArU,EAAwU,EAAxU,EAA2U,EAA3U,EAA8U,EAA9U,EAAiV,GAAjV,EAAqV,CAArV,EAAuV,CAAvV,EAAyV,CAAzV,EAA2V,EAA3V,EAA8V,CAA9V,EAAgW,EAAhW,EAAmW,EAAnW,EAAsW,CAAtW,EAAwW,EAAxW,EAA2W,GAA3W,EAA+W,CAA/W,EAAiX,CAAjX,EAAmX,CAAnX,EAAqX,CAArX,EAAuX,CAAvX,EAAyX,CAAzX,EAA2X,CAA3X,EAA6X,CAA7X,EAA+X,CAA/X,EAAiY,CAAjY,EAAmY,CAAnY,EAAqY,EAArY,EAAwY,CAAxY,EAA0Y,CAA1Y,EAA4Y,CAA5Y,EAA8Y,CAA9Y,EAAgZ,CAAhZ,EAAkZ,CAAlZ,EAAoZ,CAApZ,EAAsZ,GAAtZ,EAA0Z,CAA1Z,EAA4Z,KAA5Z,EAAka,CAAla,EAAoa,GAApa,EAAwa,CAAxa,EAA0a,EAA1a,EAA6a,CAA7a,EAA+a,EAA/a,EAAkb,CAAlb,EAAob,IAApb,EAAyb,CAAzb,EAA2b,CAA3b,EAA6b,EAA7b,EAAgc,CAAhc,EAAkc,CAAlc,EAAoc,KAApc,EAA0c,CAA1c,EAA4c,IAA5c,EAAid,CAAjd,EAAmd,CAAnd,EAAqd,CAArd,EAAud,CAAvd,EAAyd,CAAzd,EAA2d,CAA3d,EAA6d,CAA7d,EAA+d,EAA/d,EAAke,CAAle,EAAoe,GAApe,EAAwe,CAAxe,EAA0e,IAA1e,EAA+e,EAA/e,EAAkf,GAAlf,EAAsf,EAAtf,EAAyf,CAAzf,EAA2f,EAA3f,EAA8f,CAA9f,EAAggB,CAAhgB,EAAkgB,EAAlgB,EAAqgB,CAArgB,EAAugB,EAAvgB,EAA0gB,CAA1gB,EAA4gB,CAA5gB,EAA8gB,EAA9gB,EAAihB,IAAjhB,EAAshB,CAAthB,EAAwhB,CAAxhB,EAA0hB,EAA1hB,EAA6hB,CAA7hB,EAA+hB,CAA/hB,EAAiiB,CAAjiB,EAAmiB,CAAniB,EAAqiB,CAAriB,EAAuiB,CAAviB,EAAyiB,GAAziB,EAA6iB,CAA7iB,EAA+iB,EAA/iB,EAAkjB,CAAljB,EAAojB,GAApjB,EAAwjB,EAAxjB,EAA2jB,IAA3jB,EAAgkB,CAAhkB,EAAkkB,GAAlkB,EAAskB,CAAtkB,EAAwkB,CAAxkB,EAA0kB,CAA1kB,EAA4kB,MAA5kB,EAAmlB,GAAnlB,CAA9B;;AAKA,SAASC,aAAT,CAAuBpD,IAAvB,EAAqC5N,GAArC,EAA2E;MACrEiR,GAAG,GAAG,OAAV;;OACK,IAAIC,CAAC,GAAG,CAAR,EAAWrH,MAAM,GAAG7J,GAAG,CAAC6J,MAA7B,EAAqCqH,CAAC,GAAGrH,MAAzC,EAAiDqH,CAAC,IAAI,CAAtD,EAAyD;IACvDD,GAAG,IAAIjR,GAAG,CAACkR,CAAD,CAAV;QACID,GAAG,GAAGrD,IAAV,EAAgB,OAAO,KAAP;IAEhBqD,GAAG,IAAIjR,GAAG,CAACkR,CAAC,GAAG,CAAL,CAAV;QACID,GAAG,IAAIrD,IAAX,EAAiB,OAAO,IAAP;;;SAEZ,KAAP;;;AAKF,AAAO,SAASuD,iBAAT,CAA2BvD,IAA3B,EAAkD;MACnDA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;MAC7BA,IAAI,MAAR,EAAkC,OAAO,IAAP;MAC9BA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;MAC7BA,IAAI,OAAR,EAAkC,OAAO,IAAP;;MAC9BA,IAAI,IAAI,MAAZ,EAAoB;WAEhBA,IAAI,IAAI,IAAR,IAAgBgD,uBAAuB,CAACpB,IAAxB,CAA6B7E,MAAM,CAACyG,YAAP,CAAoBxD,IAApB,CAA7B,CADlB;;;SAIKoD,aAAa,CAACpD,IAAD,EAAOkD,0BAAP,CAApB;;AAKF,AAAO,SAASO,eAAT,CAAyBC,OAAzB,EAA0CC,IAA1C,EAAiE;SAC/DD,OAAO,OAAP,IAAgCC,IAAI,OAA3C;;AAKF,AAAO,SAASC,gBAAT,CAA0B5D,IAA1B,EAAiD;MAClDA,IAAI,KAAR,EAA6B,OAAOA,IAAI,OAAX;MACzBA,IAAI,KAAR,EAA4B,OAAO,IAAP;MACxBA,IAAI,KAAR,EAAiC,OAAO,KAAP;MAC7BA,IAAI,MAAR,EAAkC,OAAO,IAAP;MAC9BA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;MAC7BA,IAAI,OAAR,EAAkC,OAAO,IAAP;;MAC9BA,IAAI,IAAI,MAAZ,EAAoB;WACXA,IAAI,IAAI,IAAR,IAAgBiD,kBAAkB,CAACrB,IAAnB,CAAwB7E,MAAM,CAACyG,YAAP,CAAoBxD,IAApB,CAAxB,CAAvB;;;SAGAoD,aAAa,CAACpD,IAAD,EAAOkD,0BAAP,CAAb,IACAE,aAAa,CAACpD,IAAD,EAAOmD,qBAAP,CAFf;;;ACzHF,MAAMU,aAAa,GAAG,CACpB,KADoB,EAEpB,MAFoB,EAGpB,SAHoB,EAIpB,OAJoB,EAKpB,OALoB,EAMpB,OANoB,EAOpB,MAPoB,EAQpB,QARoB,EASpB,QAToB,EAUpB,QAVoB,EAWpB,MAXoB,EAYpB,QAZoB,EAapB,MAboB,EAcpB,WAdoB,EAepB,SAfoB,EAgBpB,GAhBoB,CAAtB;;AAmBA,SAASC,cAAT,CAAwBC,WAAxB,EAAsD;SAElDA,WAAW,CAAC9J,IAAZ,KAAqB,6BAArB,IACC8J,WAAW,CAAC9J,IAAZ,KAAqB,0BAArB,KACE,CAAC8J,WAAW,CAACC,WAAb,IACED,WAAW,CAACC,WAAZ,CAAwB/J,IAAxB,KAAiC,WAAjC,IACC8J,WAAW,CAACC,WAAZ,CAAwB/J,IAAxB,KAAiC,sBAHtC,CAFH;;;AASF,SAASgK,iBAAT,CAA2BjK,IAA3B,EAAkD;SACzCA,IAAI,CAACkK,UAAL,KAAoB,MAApB,IAA8BlK,IAAI,CAACkK,UAAL,KAAoB,QAAzD;;;AAGF,SAASC,oBAAT,CAA8B3F,KAA9B,EAAqD;SAEjD,CAACA,KAAK,CAACvE,IAAN,KAAewE,KAAE,CAACxM,IAAlB,IAA0B,CAAC,CAACuM,KAAK,CAACvE,IAAN,CAAWvI,OAAxC,KAAoD8M,KAAK,CAAC5D,KAAN,KAAgB,MADtE;;;AAKF,MAAMwJ,iBAAiB,GAAG;EACxBC,KAAK,EAAE,oBADiB;EAExBC,GAAG,EAAE,oBAFmB;EAGxBrK,IAAI,EAAE,aAHkB;EAIxBsK,SAAS,EAAE;CAJb;;AAQA,SAASC,SAAT,CACEC,IADF,EAEE7C,IAFF,EAGc;QACN8C,KAAK,GAAG,EAAd;QACMC,KAAK,GAAG,EAAd;;OACK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,IAAI,CAACxI,MAAzB,EAAiCqH,CAAC,EAAlC,EAAsC;KACnC1B,IAAI,CAAC6C,IAAI,CAACnB,CAAD,CAAL,EAAUA,CAAV,EAAamB,IAAb,CAAJ,GAAyBC,KAAzB,GAAiCC,KAAlC,EAAyCtG,IAAzC,CAA8CoG,IAAI,CAACnB,CAAD,CAAlD;;;SAEK,CAACoB,KAAD,EAAQC,KAAR,CAAP;;;AAGF,MAAMC,iBAAiB,GAAG,wBAA1B;AAEA,YAAgBxK,UAAD,IACb,cAAcA,UAAd,CAAyB;EAMvB7I,WAAW,CAACW,OAAD,EAAoB2P,KAApB,EAAmC;UACtC3P,OAAN,EAAe2P,KAAf;SACKgD,UAAL,GAAkBC,SAAlB;;;EAGFC,gBAAgB,GAAY;WACnB,KAAKC,eAAL,CAAqB,MAArB,EAA6B,KAA7B,KAAuC,KAAKH,UAAL,KAAoB,MAAlE;;;EAGFI,WAAW,CAAChL,IAAD,EAAkBiL,GAAlB,EAAkC;QAEzCjL,IAAI,KAAKwE,KAAE,CAAC/L,MAAZ,IACAuH,IAAI,KAAKwE,KAAE,CAACpL,IADZ,IAEA4G,IAAI,KAAKwE,KAAE,CAACvK,oBAHd,EAIE;UACI,KAAK2Q,UAAL,KAAoBC,SAAxB,EAAmC;aAC5BD,UAAL,GAAkB,IAAlB;;;;WAGG,MAAMI,WAAN,CAAkBhL,IAAlB,EAAwBiL,GAAxB,CAAP;;;EAGFC,UAAU,CAACC,OAAD,EAA2B;QAC/B,KAAKP,UAAL,KAAoBC,SAAxB,EAAmC;YAE3BO,OAAO,GAAGT,iBAAiB,CAACU,IAAlB,CAAuBF,OAAO,CAACxK,KAA/B,CAAhB;;UACI,CAACyK,OAAL,EAAc,CAAd,MAEO,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,MAAnB,EAA2B;aAC3BR,UAAL,GAAkB,MAAlB;OADK,MAEA,IAAIQ,OAAO,CAAC,CAAD,CAAP,KAAe,QAAnB,EAA6B;aAC7BR,UAAL,GAAkB,QAAlB;OADK,MAEA;cACC,IAAIU,KAAJ,CAAU,wBAAV,CAAN;;;;WAGG,MAAMJ,UAAN,CAAiBC,OAAjB,CAAP;;;EAGFI,wBAAwB,CAACC,GAAD,EAA8B;UAC9CC,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;SACKnH,KAAL,CAAWmH,MAAX,GAAoB,IAApB;SACKC,MAAL,CAAYH,GAAG,IAAIhH,KAAE,CAACnL,KAAtB;UAEM2G,IAAI,GAAG,KAAK4L,aAAL,EAAb;SACKrH,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;WACOzL,IAAP;;;EAGF6L,kBAAkB,GAAe;UACzB9L,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACM6G,SAAS,GAAG,KAAKvH,KAAL,CAAWG,QAA7B;UACMqH,SAAS,GAAG,KAAKxH,KAAL,CAAWrD,KAA7B;SACKyK,MAAL,CAAYnH,KAAE,CAACtJ,MAAf;UACM8Q,SAAS,GAAG,KAAKzH,KAAL,CAAWG,QAA7B;SACKuH,gBAAL,CAAsB,QAAtB;;QAGEH,SAAS,CAACI,IAAV,KAAmBF,SAAS,CAACE,IAA7B,IACAJ,SAAS,CAACK,MAAV,KAAqBH,SAAS,CAACG,MAAV,GAAmB,CAF1C,EAGE;WACKlK,KAAL,CACE8J,SADF,EAEE,uDAFF;;;QAKE,KAAKK,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAJ,EAAyB;MACvB8G,IAAI,CAACY,KAAL,GAAa,KAAK0L,eAAL,EAAb;WACKV,MAAL,CAAYnH,KAAE,CAACtL,MAAf;aACO,KAAKgM,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;KAHF,MAIO;aACE,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;;EAIJuM,oCAAoC,GAAoC;UAChEb,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;SACKnH,KAAL,CAAWmH,MAAX,GAAoB,IAApB;SACKC,MAAL,CAAYnH,KAAE,CAACnL,KAAf;QACI2G,IAAI,GAAG,IAAX;QACIuM,SAAS,GAAG,IAAhB;;QACI,KAAKC,KAAL,CAAWhI,KAAE,CAACtJ,MAAd,CAAJ,EAA2B;WACpBqJ,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;MACAc,SAAS,GAAG,KAAKV,kBAAL,EAAZ;KAFF,MAGO;MACL7L,IAAI,GAAG,KAAK4L,aAAL,EAAP;WACKrH,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;;UACI,KAAKe,KAAL,CAAWhI,KAAE,CAACtJ,MAAd,CAAJ,EAA2B;QACzBqR,SAAS,GAAG,KAAKV,kBAAL,EAAZ;;;;WAGG,CAAC7L,IAAD,EAAOuM,SAAP,CAAP;;;EAGFE,qBAAqB,CAAC1M,IAAD,EAA+C;SAC7D2J,IAAL;SACKgD,qBAAL,CAA2B3M,IAA3B,EAA6C,IAA7C;WACO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGF4M,wBAAwB,CACtB5M,IADsB,EAEC;SAClB2J,IAAL;UAEMkD,EAAE,GAAI7M,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAtB;UAEMC,QAAQ,GAAG,KAAK7H,SAAL,EAAjB;UACM8H,aAAa,GAAG,KAAK9H,SAAL,EAAtB;;QAEI,KAAK+H,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BF,QAAQ,CAAC3I,cAAT,GAA0B,KAAK8I,iCAAL,EAA1B;KADF,MAEO;MACLH,QAAQ,CAAC3I,cAAT,GAA0B,IAA1B;;;SAGGwH,MAAL,CAAYnH,KAAE,CAACvL,MAAf;UACMiU,GAAG,GAAG,KAAKC,2BAAL,EAAZ;IACAL,QAAQ,CAAC/K,MAAT,GAAkBmL,GAAG,CAACnL,MAAtB;IACA+K,QAAQ,CAACM,IAAT,GAAgBF,GAAG,CAACE,IAApB;SACKzB,MAAL,CAAYnH,KAAE,CAACtL,MAAf;KAIE4T,QAAQ,CAACO,UAFX,EAIEtN,IAAI,CAACwM,SAJP,IAKI,KAAKD,oCAAL,EALJ;IAOAS,aAAa,CAACO,cAAd,GAA+B,KAAKpI,UAAL,CAC7B4H,QAD6B,EAE7B,wBAF6B,CAA/B;IAKAF,EAAE,CAACU,cAAH,GAAoB,KAAKpI,UAAL,CAAgB6H,aAAhB,EAA+B,gBAA/B,CAApB;SAEKQ,gBAAL,CAAsBX,EAAtB;SACKY,SAAL;WAEO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGF0N,gBAAgB,CACd1N,IADc,EAEd2N,YAFc,EAGC;QACX,KAAKlB,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAAJ,EAA2B;aAClB,KAAK4P,qBAAL,CAA2B1M,IAA3B,CAAP;KADF,MAEO,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAACxI,SAAd,CAAJ,EAA8B;aAC5B,KAAK2Q,wBAAL,CAA8B5M,IAA9B,CAAP;KADK,MAEA,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAAClI,IAAd,CAAJ,EAAyB;aACvB,KAAKqR,wBAAL,CAA8B5N,IAA9B,CAAP;KADK,MAEA,IAAI,KAAK6N,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;UACnC,KAAKpB,KAAL,CAAWhI,KAAE,CAACjL,GAAd,CAAJ,EAAwB;eACf,KAAKsU,6BAAL,CAAmC9N,IAAnC,CAAP;OADF,MAEO;YACD2N,YAAJ,EAAkB;eACXI,UAAL,CACE,KAAKvJ,KAAL,CAAWwJ,YADb,EAEE,iEAFF;;;eAKK,KAAKC,sBAAL,CAA4BjO,IAA5B,CAAP;;KAVG,MAYA,IAAI,KAAKkO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;aAC7B,KAAKC,yBAAL,CAA+BnO,IAA/B,CAAP;KADK,MAEA,IAAI,KAAKkO,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;aAC/B,KAAKE,0BAAL,CAAgCpO,IAAhC,CAAP;KADK,MAEA,IAAI,KAAKkO,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;aAClC,KAAKG,yBAAL,CAA+BrO,IAA/B,CAAP;KADK,MAEA,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAACzH,OAAd,CAAJ,EAA4B;aAC1B,KAAKsR,iCAAL,CAAuCtO,IAAvC,EAA6C2N,YAA7C,CAAP;KADK,MAEA;YACC,KAAKI,UAAL,EAAN;;;;EAIJH,wBAAwB,CACtB5N,IADsB,EAEC;SAClB2J,IAAL;IACA3J,IAAI,CAAC6M,EAAL,GAAU,KAAK0B,kCAAL,CACmB,IADnB,CAAV;SAGKd,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFiO,sBAAsB,CAACjO,IAAD,EAAiD;SAChEuH,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;;QAEI,KAAK+O,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAJ,EAA2B;MACzBsH,IAAI,CAAC6M,EAAL,GAAU,KAAKvI,aAAL,EAAV;KADF,MAEO;MACLtE,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;;;UAGI2B,QAAQ,GAAIzO,IAAI,CAACmD,IAAL,GAAY,KAAK+B,SAAL,EAA9B;UACM/B,IAAI,GAAIsL,QAAQ,CAACtL,IAAT,GAAgB,EAA9B;SACKyI,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;;WACO,CAAC,KAAK2T,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAR,EAA+B;UACzByV,QAAQ,GAAG,KAAKvJ,SAAL,EAAf;;UAEI,KAAKuH,KAAL,CAAWhI,KAAE,CAACxH,OAAd,CAAJ,EAA4B;aACrB0M,IAAL;;YACI,CAAC,KAAKuE,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKzB,KAAL,CAAWhI,KAAE,CAAClH,OAAd,CAAnC,EAA2D;eACpDwQ,UAAL,CACE,KAAKvJ,KAAL,CAAWwJ,YADb,EAEE,wFAFF;;;aAKGU,WAAL,CAAiBD,QAAjB;OARF,MASO;aACAvC,gBAAL,CACE,SADF,EAEE,kEAFF;QAKAuC,QAAQ,GAAG,KAAKf,gBAAL,CAAsBe,QAAtB,EAAgC,IAAhC,CAAX;;;MAGFtL,IAAI,CAACkB,IAAL,CAAUoK,QAAV;;;SAGGlH,KAAL,CAAWoH,IAAX;SAEK/C,MAAL,CAAYnH,KAAE,CAACzL,MAAf;SAEKmM,UAAL,CAAgBsJ,QAAhB,EAA0B,gBAA1B;QAEIvO,IAAI,GAAG,IAAX;QACI0O,eAAe,GAAG,KAAtB;UACMC,YAAY,GAChB,kFACA,0FAFF;IAGA1L,IAAI,CAACV,OAAL,CAAasH,WAAW,IAAI;UACtBD,cAAc,CAACC,WAAD,CAAlB,EAAiC;YAC3B7J,IAAI,KAAK,UAAb,EAAyB;eAClB6N,UAAL,CAAgBhE,WAAW,CAAC5I,KAA5B,EAAmC0N,YAAnC;;;QAEF3O,IAAI,GAAG,IAAP;OAJF,MAKO,IAAI6J,WAAW,CAAC9J,IAAZ,KAAqB,sBAAzB,EAAiD;YAClD2O,eAAJ,EAAqB;eACdb,UAAL,CACEhE,WAAW,CAAC5I,KADd,EAEE,8CAFF;;;YAKEjB,IAAI,KAAK,IAAb,EAAmB,KAAK6N,UAAL,CAAgBhE,WAAW,CAAC5I,KAA5B,EAAmC0N,YAAnC;QACnB3O,IAAI,GAAG,UAAP;QACA0O,eAAe,GAAG,IAAlB;;KAfJ;IAmBA5O,IAAI,CAACE,IAAL,GAAYA,IAAI,IAAI,UAApB;WACO,KAAKiF,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFsO,iCAAiC,CAC/BtO,IAD+B,EAE/B2N,YAF+B,EAGC;SAC3B/B,MAAL,CAAYnH,KAAE,CAACzH,OAAf;;QAEI,KAAKqP,GAAL,CAAS5H,KAAE,CAAC7I,QAAZ,CAAJ,EAA2B;UACrB,KAAK6Q,KAAL,CAAWhI,KAAE,CAACxI,SAAd,KAA4B,KAAKwQ,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAAhC,EAAuD;QAGrDkD,IAAI,CAACgK,WAAL,GAAmB,KAAK0D,gBAAL,CAAsB,KAAKxI,SAAL,EAAtB,CAAnB;OAHF,MAIO;QAELlF,IAAI,CAACgK,WAAL,GAAmB,KAAK6B,aAAL,EAAnB;aACK4B,SAAL;;;MAEFzN,IAAI,CAAC8O,OAAL,GAAe,IAAf;aAEO,KAAK3J,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;KAZF,MAaO;UAEH,KAAKyM,KAAL,CAAWhI,KAAE,CAACjI,MAAd,KACA,KAAKuS,KAAL,EADA,IAEC,CAAC,KAAKb,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA9B,KACC,CAACP,YAJL,EAKE;cACMnW,KAAK,GAAG,KAAKgN,KAAL,CAAW5D,KAAzB;cACMoO,UAAU,GAAG5E,iBAAiB,CAAC5S,KAAD,CAApC;aACKuW,UAAL,CACE,KAAKvJ,KAAL,CAAWrD,KADb,EAEG,oBAAmB3J,KAAM,8BAA6BwX,UAAW,YAFpE;;;UAOA,KAAKvC,KAAL,CAAWhI,KAAE,CAAClI,IAAd,KACA,KAAKkQ,KAAL,CAAWhI,KAAE,CAACxI,SAAd,CADA,IAEA,KAAKwQ,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAFA,IAGA,KAAKoR,YAAL,CAAkB,QAAlB,CAJF,EAKE;UACAlO,IAAI,CAACgK,WAAL,GAAmB,KAAK0D,gBAAL,CAAsB,KAAKxI,SAAL,EAAtB,CAAnB;UACAlF,IAAI,CAAC8O,OAAL,GAAe,KAAf;iBAEO,KAAK3J,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;SATF,MAUO,IACL,KAAKyM,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,KACA,KAAKqR,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CADA,IAEA,KAAKoV,YAAL,CAAkB,WAAlB,CAFA,IAGA,KAAKA,YAAL,CAAkB,MAAlB,CAHA,IAIA,KAAKA,YAAL,CAAkB,QAAlB,CALK,EAML;UACAlO,IAAI,GAAG,KAAKiP,WAAL,CAAiBjP,IAAjB,CAAP;;cACIA,IAAI,CAACC,IAAL,KAAc,wBAAlB,EAA4C;YAG1CD,IAAI,CAACC,IAAL,GAAY,mBAAZ;YAEAD,IAAI,CAAC8O,OAAL,GAAe,KAAf;mBACO9O,IAAI,CAACkP,UAAZ;;;UAIFlP,IAAI,CAACC,IAAL,GAAY,YAAYD,IAAI,CAACC,IAA7B;iBAEOD,IAAP;;;;UAIE,KAAK+N,UAAL,EAAN;;;EAGFD,6BAA6B,CAC3B9N,IAD2B,EAEC;SACvB2J,IAAL;SACKuC,gBAAL,CAAsB,SAAtB;IACAlM,IAAI,CAACuN,cAAL,GAAsB,KAAK4B,uBAAL,EAAtB;SACK1B,SAAL;WAEO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;EAGFmO,yBAAyB,CACvBnO,IADuB,EAEC;SACnB2J,IAAL;SACKyF,kBAAL,CAAwBpP,IAAxB;IAEAA,IAAI,CAACC,IAAL,GAAY,kBAAZ;WACOD,IAAP;;;EAGFoO,0BAA0B,CACxBpO,IADwB,EAEC;SACpB2J,IAAL;SACK0F,mBAAL,CAAyBrP,IAAzB,EAA+B,IAA/B;IAEAA,IAAI,CAACC,IAAL,GAAY,mBAAZ;WACOD,IAAP;;;EAGFqO,yBAAyB,CACvBrO,IADuB,EAEC;SACnB2J,IAAL;SACKgD,qBAAL,CAA2B3M,IAA3B;WACO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;EAKF2M,qBAAqB,CACnB3M,IADmB,EAEnBsP,OAAiB,GAAG,KAFD,EAGb;IACNtP,IAAI,CAAC6M,EAAL,GAAU,KAAK0C,6BAAL,CAA+C,CAACD,OAAhD,CAAV;;QAEI,KAAKrC,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;KADF,MAEO;MACLlN,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;;IAGFpE,IAAI,CAACwP,OAAL,GAAe,EAAf;IACAxP,IAAI,CAACyP,UAAL,GAAkB,EAAlB;IACAzP,IAAI,CAAC0P,MAAL,GAAc,EAAd;;QAEI,KAAKrD,GAAL,CAAS5H,KAAE,CAAC1H,QAAZ,CAAJ,EAA2B;SACtB;QACDiD,IAAI,CAACwP,OAAL,CAAanL,IAAb,CAAkB,KAAKsL,yBAAL,EAAlB;OADF,QAES,CAACL,OAAD,IAAY,KAAKjD,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAFrB;;;QAKE,KAAK8U,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;WAC1BvE,IAAL;;SACG;QACD3J,IAAI,CAAC0P,MAAL,CAAYrL,IAAZ,CAAiB,KAAKsL,yBAAL,EAAjB;OADF,QAES,KAAKtD,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAFT;;;QAKE,KAAK8U,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;WAC9BvE,IAAL;;SACG;QACD3J,IAAI,CAACyP,UAAL,CAAgBpL,IAAhB,CAAqB,KAAKsL,yBAAL,EAArB;OADF,QAES,KAAKtD,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAFT;;;IAKF4G,IAAI,CAACmD,IAAL,GAAY,KAAKyM,mBAAL,CAAyB;MACnCC,WAAW,EAAEP,OADsB;MAEnCQ,UAAU,EAAE,KAFuB;MAGnCC,WAAW,EAAE,KAHsB;MAInCC,UAAU,EAAEV,OAJuB;MAKnCW,YAAY,EAAE;KALJ,CAAZ;;;EASFN,yBAAyB,GAA2B;UAC5C3P,IAAI,GAAG,KAAKkF,SAAL,EAAb;IAEAlF,IAAI,CAAC6M,EAAL,GAAU,KAAKqD,gCAAL,EAAV;;QACI,KAAKjD,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK+L,mCAAL,EAAtB;KADF,MAEO;MACLnQ,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;;WAGK,KAAKe,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;EAGFoQ,kBAAkB,CAACpQ,IAAD,EAAyC;SACpD2M,qBAAL,CAA2B3M,IAA3B;WACO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;EAGFqQ,kBAAkB,CAAC9H,IAAD,EAAe;QAC3BA,IAAI,KAAK,GAAb,EAAkB;YACV,KAAKwF,UAAL,CACJ,IADI,EAEJ,uDAFI,CAAN;;;;EAOJuC,iBAAiB,CAAC/H,IAAD,EAAe5D,QAAf,EAAiC;QAC5CkF,aAAa,CAAC0G,OAAd,CAAsBhI,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;WAC/BrG,KAAL,CAAWyC,QAAX,EAAsB,kCAAiC4D,IAAK,EAA5D;;;;EAIJgH,6BAA6B,CAACiB,OAAD,EAAkC;SACxDF,iBAAL,CAAuB,KAAK9L,KAAL,CAAW5D,KAAlC,EAAyC,KAAK4D,KAAL,CAAWrD,KAApD;WACO,KAAK2L,eAAL,CAAqB0D,OAArB,CAAP;;;EAKFpB,kBAAkB,CAACpP,IAAD,EAAyC;IACzDA,IAAI,CAAC6M,EAAL,GAAU,KAAK0C,6BAAL,EAAV;SACKhI,KAAL,CAAWkJ,WAAX,CAAuBzQ,IAAI,CAAC6M,EAAL,CAAQ5U,IAA/B,EAAqCmH,YAArC,EAAmDY,IAAI,CAAC6M,EAAL,CAAQ1L,KAA3D;;QAEI,KAAK8L,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;KADF,MAEO;MACLlN,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;;IAGFpE,IAAI,CAAC0Q,KAAL,GAAa,KAAKlF,wBAAL,CAA8B/G,KAAE,CAACtK,EAAjC,CAAb;SACKsT,SAAL;WAEO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,WAAtB,CAAP;;;EAGFqP,mBAAmB,CACjBrP,IADiB,EAEjB2Q,OAFiB,EAGC;SACbzE,gBAAL,CAAsB,MAAtB;IACAlM,IAAI,CAAC6M,EAAL,GAAU,KAAK0C,6BAAL,CAA+C,IAA/C,CAAV;SACKhI,KAAL,CAAWkJ,WAAX,CAAuBzQ,IAAI,CAAC6M,EAAL,CAAQ5U,IAA/B,EAAqCmH,YAArC,EAAmDY,IAAI,CAAC6M,EAAL,CAAQ1L,KAA3D;;QAEI,KAAK8L,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;KADF,MAEO;MACLlN,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;;IAIFpE,IAAI,CAAC4Q,SAAL,GAAiB,IAAjB;;QACI,KAAKnE,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB0G,IAAI,CAAC4Q,SAAL,GAAiB,KAAKpF,wBAAL,CAA8B/G,KAAE,CAACnL,KAAjC,CAAjB;;;IAGF0G,IAAI,CAAC6Q,QAAL,GAAgB,IAAhB;;QACI,CAACF,OAAL,EAAc;MACZ3Q,IAAI,CAAC6Q,QAAL,GAAgB,KAAKrF,wBAAL,CAA8B/G,KAAE,CAACtK,EAAjC,CAAhB;;;SAEGsT,SAAL;WAEO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,YAAtB,CAAP;;;EAKF8Q,sBAAsB,CAACC,cAAwB,GAAG,KAA5B,EAAoD;UAClEC,SAAS,GAAG,KAAKxM,KAAL,CAAWrD,KAA7B;UAEMnB,IAAI,GAAG,KAAKkF,SAAL,EAAb;UAEM+L,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;UAEMC,KAAK,GAAG,KAAK5C,kCAAL,EAAd;IACAvO,IAAI,CAAC/H,IAAL,GAAYkZ,KAAK,CAAClZ,IAAlB;IACA+H,IAAI,CAACiR,QAAL,GAAgBA,QAAhB;IACAjR,IAAI,CAACoR,KAAL,GAAaD,KAAK,CAAC5D,cAAnB;;QAEI,KAAKd,KAAL,CAAWhI,KAAE,CAACtK,EAAd,CAAJ,EAAuB;WAChBkS,GAAL,CAAS5H,KAAE,CAACtK,EAAZ;MACA6F,IAAI,CAAC8O,OAAL,GAAe,KAAKjD,aAAL,EAAf;KAFF,MAGO;UACDkF,cAAJ,EAAoB;aACbhD,UAAL,CACEiD,SADF,EAGE,yGAHF;;;;WAQG,KAAK7L,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFkN,iCAAiC,GAA+B;UACxDxB,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;UACM3L,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAACgC,MAAL,GAAc,EAAd;SAEKwC,KAAL,CAAWmH,MAAX,GAAoB,IAApB;;QAGI,KAAKsB,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWhI,KAAE,CAAC4M,WAAd,CAA9B,EAA0D;WACnD1H,IAAL;KADF,MAEO;WACAoE,UAAL;;;QAGEuD,eAAe,GAAG,KAAtB;;OAEG;YACKC,aAAa,GAAG,KAAKT,sBAAL,CAA4BQ,eAA5B,CAAtB;MAEAtR,IAAI,CAACgC,MAAL,CAAYqC,IAAZ,CAAiBkN,aAAjB;;UAEIA,aAAa,CAACzC,OAAlB,EAA2B;QACzBwC,eAAe,GAAG,IAAlB;;;UAGE,CAAC,KAAKrE,YAAL,CAAkB,GAAlB,CAAL,EAA6B;aACtBrB,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;KAVJ,QAYS,CAAC,KAAK6T,YAAL,CAAkB,GAAlB,CAZV;;SAaKuE,gBAAL,CAAsB,GAAtB;SAEKhN,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;WAEO,KAAKvG,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;;EAGFmQ,mCAAmC,GAAiC;UAC5DnQ,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACMwG,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;IACA3L,IAAI,CAACgC,MAAL,GAAc,EAAd;SAEKwC,KAAL,CAAWmH,MAAX,GAAoB,IAApB;SAEK6F,gBAAL,CAAsB,GAAtB;UACMC,qBAAqB,GAAG,KAAKjN,KAAL,CAAWkN,kBAAzC;SACKlN,KAAL,CAAWkN,kBAAX,GAAgC,KAAhC;;WACO,CAAC,KAAKzE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;MAC9BjN,IAAI,CAACgC,MAAL,CAAYqC,IAAZ,CAAiB,KAAKwH,aAAL,EAAjB;;UACI,CAAC,KAAKoB,YAAL,CAAkB,GAAlB,CAAL,EAA6B;aACtBrB,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;;SAGCoL,KAAL,CAAWkN,kBAAX,GAAgCD,qBAAhC;SACKD,gBAAL,CAAsB,GAAtB;SAEKhN,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;WAEO,KAAKvG,UAAL,CAAgBnF,IAAhB,EAAsB,4BAAtB,CAAP;;;EAGF2R,4CAA4C,GAAiC;UACrE3R,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACMwG,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;IACA3L,IAAI,CAACgC,MAAL,GAAc,EAAd;SAEKwC,KAAL,CAAWmH,MAAX,GAAoB,IAApB;SAEK6F,gBAAL,CAAsB,GAAtB;;WACO,CAAC,KAAKvE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;MAC9BjN,IAAI,CAACgC,MAAL,CAAYqC,IAAZ,CAAiB,KAAKuN,oCAAL,EAAjB;;UACI,CAAC,KAAK3E,YAAL,CAAkB,GAAlB,CAAL,EAA6B;aACtBrB,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;;SAGCoY,gBAAL,CAAsB,GAAtB;SAEKhN,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;WAEO,KAAKvG,UAAL,CAAgBnF,IAAhB,EAAsB,4BAAtB,CAAP;;;EAGF6R,sBAAsB,GAAwB;UACtC7R,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKgH,gBAAL,CAAsB,WAAtB;IAEAlM,IAAI,CAACwP,OAAL,GAAe,EAAf;;QACI,KAAKnD,GAAL,CAAS5H,KAAE,CAAC1H,QAAZ,CAAJ,EAA2B;SACtB;QACDiD,IAAI,CAACwP,OAAL,CAAanL,IAAb,CAAkB,KAAKsL,yBAAL,EAAlB;OADF,QAES,KAAKtD,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAFT;;;IAKF4G,IAAI,CAACmD,IAAL,GAAY,KAAKyM,mBAAL,CAAyB;MACnCC,WAAW,EAAE,KADsB;MAEnCC,UAAU,EAAE,KAFuB;MAGnCC,WAAW,EAAE,KAHsB;MAInCC,UAAU,EAAE,KAJuB;MAKnCC,YAAY,EAAE;KALJ,CAAZ;WAQO,KAAK9K,UAAL,CAAgBnF,IAAhB,EAAsB,yBAAtB,CAAP;;;EAGF8R,0BAA0B,GAAiB;WAClC,KAAKrF,KAAL,CAAWhI,KAAE,CAAClM,GAAd,KAAsB,KAAKkU,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAtB,GACH,KAAK4L,aAAL,EADG,GAEH,KAAKwI,eAAL,CAAqB,IAArB,CAFJ;;;EAKFiF,0BAA0B,CACxB/R,IADwB,EAExBgS,QAFwB,EAGxBf,QAHwB,EAIC;IACzBjR,IAAI,CAACiS,MAAL,GAAcD,QAAd;;QAGI,KAAKE,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACnL,KAAjC,EAAwC;MACtC0G,IAAI,CAAC6M,EAAL,GAAU,KAAKiF,0BAAL,EAAV;MACA9R,IAAI,CAAC8C,GAAL,GAAW,KAAK0I,wBAAL,EAAX;KAFF,MAGO;MACLxL,IAAI,CAAC6M,EAAL,GAAU,IAAV;MACA7M,IAAI,CAAC8C,GAAL,GAAW,KAAK+I,aAAL,EAAX;;;SAEGD,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;IACAmH,IAAI,CAACY,KAAL,GAAa,KAAK4K,wBAAL,EAAb;IACAxL,IAAI,CAACiR,QAAL,GAAgBA,QAAhB;WAEO,KAAK9L,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGFmS,+BAA+B,CAC7BnS,IAD6B,EAE7BgS,QAF6B,EAGC;IAC9BhS,IAAI,CAACiS,MAAL,GAAcD,QAAd;IAEAhS,IAAI,CAAC6M,EAAL,GAAU,KAAKiF,0BAAL,EAAV;SACKlG,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;SACK+S,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;;QACI,KAAKoU,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAA9B,EAAqD;MACnD8G,IAAI,CAACG,MAAL,GAAc,IAAd;MACAH,IAAI,CAACoS,QAAL,GAAgB,KAAhB;MACApS,IAAI,CAACY,KAAL,GAAa,KAAKyR,4BAAL,CACX,KAAKnR,WAAL,CAAiBlB,IAAI,CAACmB,KAAtB,EAA6BnB,IAAI,CAACoB,GAAL,CAASD,KAAtC,CADW,CAAb;KAHF,MAMO;MACLnB,IAAI,CAACG,MAAL,GAAc,KAAd;;UACI,KAAKkM,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;QACzBuG,IAAI,CAACoS,QAAL,GAAgB,IAAhB;;;MAEFpS,IAAI,CAACY,KAAL,GAAa,KAAK4K,wBAAL,EAAb;;;WAEK,KAAKrG,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGFqS,4BAA4B,CAC1BrS,IAD0B,EAEI;IAC9BA,IAAI,CAACgC,MAAL,GAAc,EAAd;IACAhC,IAAI,CAACqN,IAAL,GAAY,IAAZ;IACArN,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;QAEI,KAAK6I,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;;;SAGGtB,MAAL,CAAYnH,KAAE,CAACvL,MAAf;;WACO,CAAC,KAAKuT,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAD,IAA0B,CAAC,KAAKsT,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAlC,EAA2D;MACzDmG,IAAI,CAACgC,MAAL,CAAYqC,IAAZ,CAAiB,KAAKiO,0BAAL,EAAjB;;UACI,CAAC,KAAK7F,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAL,EAA4B;aACrByS,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;;QAIA,KAAKiT,GAAL,CAAS5H,KAAE,CAAC5K,QAAZ,CAAJ,EAA2B;MACzBmG,IAAI,CAACqN,IAAL,GAAY,KAAKiF,0BAAL,EAAZ;;;SAEG1G,MAAL,CAAYnH,KAAE,CAACtL,MAAf;IACA6G,IAAI,CAACsN,UAAL,GAAkB,KAAK9B,wBAAL,EAAlB;WAEO,KAAKrG,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGFuS,+BAA+B,CAC7BvS,IAD6B,EAE7BgS,QAF6B,EAGC;UACxBQ,SAAS,GAAG,KAAKtN,SAAL,EAAlB;IACAlF,IAAI,CAACiS,MAAL,GAAcD,QAAd;IACAhS,IAAI,CAACY,KAAL,GAAa,KAAKyR,4BAAL,CAAkCG,SAAlC,CAAb;WACO,KAAKrN,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGF4P,mBAAmB,CAAC;IAClBC,WADkB;IAElBC,UAFkB;IAGlBC,WAHkB;IAIlBC,UAJkB;IAKlBC;GALiB,EAYY;UACvBvE,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;SACKnH,KAAL,CAAWmH,MAAX,GAAoB,IAApB;UAEMqF,SAAS,GAAG,KAAK9L,SAAL,EAAlB;IAEA8L,SAAS,CAACyB,cAAV,GAA2B,EAA3B;IACAzB,SAAS,CAACxO,UAAV,GAAuB,EAAvB;IACAwO,SAAS,CAAC0B,QAAV,GAAqB,EAArB;IACA1B,SAAS,CAAC2B,aAAV,GAA0B,EAA1B;QAEIC,QAAJ;QACIC,KAAJ;QACIC,OAAO,GAAG,KAAd;;QACIhD,UAAU,IAAI,KAAKrD,KAAL,CAAWhI,KAAE,CAAC1L,SAAd,CAAlB,EAA4C;WACrC6S,MAAL,CAAYnH,KAAE,CAAC1L,SAAf;MACA6Z,QAAQ,GAAGnO,KAAE,CAACxL,SAAd;MACA4Z,KAAK,GAAG,IAAR;KAHF,MAIO;WACAjH,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;MACA8Z,QAAQ,GAAGnO,KAAE,CAACzL,MAAd;MACA6Z,KAAK,GAAG,KAAR;;;IAGF7B,SAAS,CAAC6B,KAAV,GAAkBA,KAAlB;;WAEO,CAAC,KAAKpG,KAAL,CAAWmG,QAAX,CAAR,EAA8B;UACxBZ,QAAQ,GAAG,KAAf;UACIe,UAAmB,GAAG,IAA1B;YACM/S,IAAI,GAAG,KAAKkF,SAAL,EAAb;;UAEI8K,UAAU,IAAI,KAAK9B,YAAL,CAAkB,OAAlB,CAAlB,EAA8C;cACtCgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;YAEIA,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAACnL,KAAtB,IAA+B4Y,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAAChL,QAAzD,EAAmE;eAC5DkQ,IAAL;UACAoJ,UAAU,GAAG,KAAKvO,KAAL,CAAWrD,KAAxB;UACA0O,WAAW,GAAG,KAAd;;;;UAIAA,WAAW,IAAI,KAAK3B,YAAL,CAAkB,QAAlB,CAAnB,EAAgD;cACxCgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;YAGIA,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAACnL,KAAtB,IAA+B4Y,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAAChL,QAAzD,EAAmE;eAC5DkQ,IAAL;UACAqI,QAAQ,GAAG,IAAX;;;;YAIEf,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;;UAEI,KAAK7E,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAJ,EAA2B;YACrBma,UAAU,IAAI,IAAlB,EAAwB;eACjBhF,UAAL,CAAgBgF,UAAhB;;;YAEE,KAAK1G,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAJ,EAA2B;cACrBqY,QAAJ,EAAc;iBACPlD,UAAL,CAAgBkD,QAAQ,CAAC9P,KAAzB;;;UAEF6P,SAAS,CAAC2B,aAAV,CAAwBtO,IAAxB,CACE,KAAK8N,+BAAL,CAAqCnS,IAArC,EAA2CgS,QAA3C,CADF;SAJF,MAOO;UACLhB,SAAS,CAAC0B,QAAV,CAAmBrO,IAAnB,CACE,KAAK0N,0BAAL,CAAgC/R,IAAhC,EAAsCgS,QAAtC,EAAgDf,QAAhD,CADF;;OAZJ,MAgBO,IAAI,KAAKxE,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,KAAK+T,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;YACtD8F,UAAU,IAAI,IAAlB,EAAwB;eACjBhF,UAAL,CAAgBgF,UAAhB;;;YAEE9B,QAAJ,EAAc;eACPlD,UAAL,CAAgBkD,QAAQ,CAAC9P,KAAzB;;;QAEF6P,SAAS,CAACyB,cAAV,CAAyBpO,IAAzB,CACE,KAAKkO,+BAAL,CAAqCvS,IAArC,EAA2CgS,QAA3C,CADF;OAPK,MAUA;YACD9R,IAAI,GAAG,MAAX;;YAEI,KAAKgO,YAAL,CAAkB,KAAlB,KAA4B,KAAKA,YAAL,CAAkB,KAAlB,CAAhC,EAA0D;gBAClDgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;cAEEA,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAACxM,IAAtB,IACAia,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAAC/L,MADtB,IAEAwZ,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAAClM,GAHxB,EAIE;YACA2H,IAAI,GAAG,KAAKsE,KAAL,CAAW5D,KAAlB;iBACK+I,IAAL;;;;cAIEqJ,aAAa,GAAG,KAAKC,2BAAL,CACpBjT,IADoB,EAEpBgS,QAFoB,EAGpBe,UAHoB,EAIpB9B,QAJoB,EAKpB/Q,IALoB,EAMpB6P,WANoB,EAOpBE,YAPoB,CAAtB;;YAUI+C,aAAa,KAAK,IAAtB,EAA4B;UAC1BF,OAAO,GAAG,IAAV;SADF,MAEO;UACL9B,SAAS,CAACxO,UAAV,CAAqB6B,IAArB,CAA0B2O,aAA1B;;;;WAICE,uBAAL;;;SAGGtH,MAAL,CAAYgH,QAAZ;;QAOI7C,WAAJ,EAAiB;MACfiB,SAAS,CAAC8B,OAAV,GAAoBA,OAApB;;;UAGI5L,GAAG,GAAG,KAAK/B,UAAL,CAAgB6L,SAAhB,EAA2B,sBAA3B,CAAZ;SAEKxM,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;WAEOxE,GAAP;;;EAGF+L,2BAA2B,CACzBjT,IADyB,EAEzBgS,QAFyB,EAGzBe,UAHyB,EAIzB9B,QAJyB,EAKzB/Q,IALyB,EAMzB6P,WANyB,EAOzBE,YAPyB,EAQ2C;QAChE,KAAKxD,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;UACvB,CAACkW,WAAL,EAAkB;aACXhC,UAAL,CACE,IADF,EAEE,iEAFF;;;UAKEgF,UAAU,IAAI,IAAlB,EAAwB;aACjBhF,UAAL,CAAgBgF,UAAhB;;;UAEE9B,QAAJ,EAAc;aACPlD,UAAL,CACEkD,QAAQ,CAAC9P,KADX,EAEE,wCAFF;;;WAKGyK,MAAL,CAAYnH,KAAE,CAAC5K,QAAf;YACMsZ,cAAc,GAAG,KAAK9G,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,KAAsB,KAAKiT,GAAL,CAAS5H,KAAE,CAACpL,IAAZ,CAA7C;;UAEI,KAAKoT,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAJ,EAA2B;YACrBiX,YAAJ,EAAkB,OAAO,IAAP;aACblC,UAAL,CACE,IADF,EAEE,gEAFF;;;UAME,KAAKtB,KAAL,CAAWhI,KAAE,CAACxL,SAAd,CAAJ,EAA8B;aACvB8U,UAAL,CACE,IADF,EAEE,4EAFF;;;UAMEoF,cAAJ,EAAoB;aACbpF,UAAL,CACE,IADF,EAEE,qEAFF;;;MAKF/N,IAAI,CAACoT,QAAL,GAAgB,KAAKvH,aAAL,EAAhB;aACO,KAAK1G,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;KAzCF,MA0CO;MACLA,IAAI,CAAC8C,GAAL,GAAW,KAAKgP,0BAAL,EAAX;MACA9R,IAAI,CAACiS,MAAL,GAAcD,QAAd;MACAhS,IAAI,CAACgD,KAAL,GAAa+P,UAAU,IAAI,IAA3B;MACA/S,IAAI,CAACE,IAAL,GAAYA,IAAZ;UAEIkS,QAAQ,GAAG,KAAf;;UACI,KAAKnF,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAA9B,EAAqD;QAEnD8G,IAAI,CAACG,MAAL,GAAc,IAAd;;YAEI4S,UAAU,IAAI,IAAlB,EAAwB;eACjBhF,UAAL,CAAgBgF,UAAhB;;;YAEE9B,QAAJ,EAAc;eACPlD,UAAL,CAAgBkD,QAAQ,CAAC9P,KAAzB;;;QAGFnB,IAAI,CAACY,KAAL,GAAa,KAAKyR,4BAAL,CACX,KAAKnR,WAAL,CAAiBlB,IAAI,CAACmB,KAAtB,EAA6BnB,IAAI,CAACoB,GAAL,CAASD,KAAtC,CADW,CAAb;;YAGIjB,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC;eAC/BmT,2BAAL,CAAiCrT,IAAjC;;OAfJ,MAiBO;YACDE,IAAI,KAAK,MAAb,EAAqB,KAAK6N,UAAL;QAErB/N,IAAI,CAACG,MAAL,GAAc,KAAd;;YAEI,KAAKkM,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;UACzB2Y,QAAQ,GAAG,IAAX;;;QAEFpS,IAAI,CAACY,KAAL,GAAa,KAAK4K,wBAAL,EAAb;QACAxL,IAAI,CAACiR,QAAL,GAAgBA,QAAhB;;;MAGFjR,IAAI,CAACoS,QAAL,GAAgBA,QAAhB;aAEO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;;;EAMJqT,2BAA2B,CACzBC,QADyB,EAEnB;UACAvR,UAAU,GAAGuR,QAAQ,CAACpT,IAAT,KAAkB,KAAlB,GAA0B,CAA1B,GAA8B,CAAjD;UACMiB,KAAK,GAAGmS,QAAQ,CAACnS,KAAvB;UACMc,MAAM,GACVqR,QAAQ,CAAC1S,KAAT,CAAeoB,MAAf,CAAsBC,MAAtB,IAAgCqR,QAAQ,CAAC1S,KAAT,CAAeyM,IAAf,GAAsB,CAAtB,GAA0B,CAA1D,CADF;;QAEIpL,MAAM,KAAKF,UAAf,EAA2B;UACrBuR,QAAQ,CAACpT,IAAT,KAAkB,KAAtB,EAA6B;aACtBgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;OADF,MAEO;aACAe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;;;;QAIAmS,QAAQ,CAACpT,IAAT,KAAkB,KAAlB,IAA2BoT,QAAQ,CAAC1S,KAAT,CAAeyM,IAA9C,EAAoD;WAC7CnL,KAAL,CACEf,KADF,EAEE,uDAFF;;;;EAOJ+R,uBAAuB,GAAS;QAE5B,CAAC,KAAK7G,GAAL,CAAS5H,KAAE,CAACpL,IAAZ,CAAD,IACA,CAAC,KAAKgT,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CADD,IAEA,CAAC,KAAKqT,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAFD,IAGA,CAAC,KAAKyT,KAAL,CAAWhI,KAAE,CAACxL,SAAd,CAJH,EAKE;WACK8U,UAAL;;;;EAIJmC,gCAAgC,CAC9BxL,QAD8B,EAE9BC,QAF8B,EAG9BkI,EAH8B,EAIC;IAC/BnI,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWrD,KAAlC;IACAwD,QAAQ,GAAGA,QAAQ,IAAI,KAAKH,KAAL,CAAWG,QAAlC;QACI3E,IAAI,GAAG6M,EAAE,IAAI,KAAKC,eAAL,EAAjB;;WAEO,KAAKT,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAP,EAAyB;YACjB+Z,KAAK,GAAG,KAAKrS,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAd;MACA4O,KAAK,CAACC,aAAN,GAAsBxT,IAAtB;MACAuT,KAAK,CAAC1G,EAAN,GAAW,KAAKC,eAAL,EAAX;MACA9M,IAAI,GAAG,KAAKmF,UAAL,CAAgBoO,KAAhB,EAAuB,yBAAvB,CAAP;;;WAGKvT,IAAP;;;EAGFyT,oBAAoB,CAClB/O,QADkB,EAElBC,QAFkB,EAGlBkI,EAHkB,EAIW;UACvB7M,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;IAEA3E,IAAI,CAACoE,cAAL,GAAsB,IAAtB;IACApE,IAAI,CAAC6M,EAAL,GAAU,KAAKqD,gCAAL,CAAsCxL,QAAtC,EAAgDC,QAAhD,EAA0DkI,EAA1D,CAAV;;QAEI,KAAKI,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK+L,mCAAL,EAAtB;;;WAGK,KAAKhL,UAAL,CAAgBnF,IAAhB,EAAsB,uBAAtB,CAAP;;;EAGF0T,mBAAmB,GAA+B;UAC1C1T,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACK0G,MAAL,CAAYnH,KAAE,CAAClH,OAAf;IACAyC,IAAI,CAACoT,QAAL,GAAgB,KAAKO,oBAAL,EAAhB;WACO,KAAKxO,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;EAGF4T,kBAAkB,GAA8B;UACxC5T,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAAC1H,KAAL,GAAa,EAAb;SACKsT,MAAL,CAAYnH,KAAE,CAAC7L,QAAf;;WAEO,KAAK4L,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAAtB,IAAgC,CAAC,KAAKwK,KAAL,CAAWhI,KAAE,CAAC5L,QAAd,CAAxC,EAAiE;MAC/DmH,IAAI,CAAC1H,KAAL,CAAW+L,IAAX,CAAgB,KAAKwH,aAAL,EAAhB;UACI,KAAKY,KAAL,CAAWhI,KAAE,CAAC5L,QAAd,CAAJ,EAA6B;WACxB+S,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;SAEGwS,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;WACO,KAAKsM,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAGFsS,0BAA0B,GAA4B;QAChDra,IAAI,GAAG,IAAX;QACIma,QAAQ,GAAG,KAAf;QACI7E,cAAc,GAAG,IAArB;UACMvN,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACM2O,EAAE,GAAG,KAAK3B,SAAL,EAAX;;QACI2B,EAAE,CAAC5T,IAAH,KAAYwE,KAAE,CAACnL,KAAf,IAAwBua,EAAE,CAAC5T,IAAH,KAAYwE,KAAE,CAAChL,QAA3C,EAAqD;MACnDxB,IAAI,GAAG,KAAK6U,eAAL,EAAP;;UACI,KAAKT,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;QACzB2Y,QAAQ,GAAG,IAAX;;;MAEF7E,cAAc,GAAG,KAAK/B,wBAAL,EAAjB;KALF,MAMO;MACL+B,cAAc,GAAG,KAAK1B,aAAL,EAAjB;;;IAEF7L,IAAI,CAAC/H,IAAL,GAAYA,IAAZ;IACA+H,IAAI,CAACoS,QAAL,GAAgBA,QAAhB;IACApS,IAAI,CAACuN,cAAL,GAAsBA,cAAtB;WACO,KAAKpI,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGF8T,kCAAkC,CAChC7T,IADgC,EAEP;UACnBD,IAAI,GAAG,KAAKkB,WAAL,CAAiBjB,IAAI,CAACkB,KAAtB,EAA6BlB,IAAI,CAACmB,GAAL,CAASD,KAAtC,CAAb;IACAnB,IAAI,CAAC/H,IAAL,GAAY,IAAZ;IACA+H,IAAI,CAACoS,QAAL,GAAgB,KAAhB;IACApS,IAAI,CAACuN,cAAL,GAAsBtN,IAAtB;WACO,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGFoN,2BAA2B,CACzBpL,MAAiC,GAAG,EADX,EAE8C;QACnEqL,IAA8B,GAAG,IAArC;;WACO,CAAC,KAAKZ,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAD,IAA0B,CAAC,KAAKsT,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAlC,EAA2D;MACzDmI,MAAM,CAACqC,IAAP,CAAY,KAAKiO,0BAAL,EAAZ;;UACI,CAAC,KAAK7F,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAL,EAA4B;aACrByS,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;;QAGA,KAAKiT,GAAL,CAAS5H,KAAE,CAAC5K,QAAZ,CAAJ,EAA2B;MACzBwT,IAAI,GAAG,KAAKiF,0BAAL,EAAP;;;WAEK;MAAEtQ,MAAF;MAAUqL;KAAjB;;;EAGF0G,yBAAyB,CACvBrP,QADuB,EAEvBC,QAFuB,EAGvB3E,IAHuB,EAIvB6M,EAJuB,EAKD;YACdA,EAAE,CAAC5U,IAAX;WACO,KAAL;eACS,KAAKkN,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;WAEG,MAAL;WACK,SAAL;eACS,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,uBAAtB,CAAP;;WAEG,OAAL;eACS,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;WAEG,OAAL;eACS,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;WAEG,QAAL;eACS,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;WAEG,QAAL;eACS,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;aAGKqQ,kBAAL,CAAwBxD,EAAE,CAAC5U,IAA3B;eACO,KAAKwb,oBAAL,CAA0B/O,QAA1B,EAAoCC,QAApC,EAA8CkI,EAA9C,CAAP;;;;EAON8G,oBAAoB,GAAyB;UACrCjP,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACM3E,IAAI,GAAG,KAAKkF,SAAL,EAAb;QACIiI,GAAJ;QACIlN,IAAJ;QACI+T,aAAa,GAAG,KAApB;UACMvC,qBAAqB,GAAG,KAAKjN,KAAL,CAAWkN,kBAAzC;;YAEQ,KAAKlN,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAACxM,IAAR;YACM,KAAKiW,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;iBAC3B,KAAK2D,sBAAL,EAAP;;;eAGK,KAAKkC,yBAAL,CACLrP,QADK,EAELC,QAFK,EAGL3E,IAHK,EAIL,KAAK8M,eAAL,EAJK,CAAP;;WAOGrI,KAAE,CAAC3L,MAAR;eACS,KAAK8W,mBAAL,CAAyB;UAC9BC,WAAW,EAAE,KADiB;UAE9BC,UAAU,EAAE,KAFkB;UAG9BC,WAAW,EAAE,IAHiB;UAI9BC,UAAU,EAAE,KAJkB;UAK9BC,YAAY,EAAE;SALT,CAAP;;WAQGxL,KAAE,CAAC1L,SAAR;eACS,KAAK6W,mBAAL,CAAyB;UAC9BC,WAAW,EAAE,KADiB;UAE9BC,UAAU,EAAE,IAFkB;UAG9BC,WAAW,EAAE,IAHiB;UAI9BC,UAAU,EAAE,KAJkB;UAK9BC,YAAY,EAAE;SALT,CAAP;;WAQGxL,KAAE,CAAC7L,QAAR;aACO4L,KAAL,CAAWkN,kBAAX,GAAgC,KAAhC;QACAzR,IAAI,GAAG,KAAK2T,kBAAL,EAAP;aACKpP,KAAL,CAAWkN,kBAAX,GAAgCD,qBAAhC;eACOxR,IAAP;;WAEGwE,KAAE,CAACzJ,UAAR;YACM,KAAKwJ,KAAL,CAAW5D,KAAX,KAAqB,GAAzB,EAA8B;UAC5BZ,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;eACKtB,MAAL,CAAYnH,KAAE,CAACvL,MAAf;UACAiU,GAAG,GAAG,KAAKC,2BAAL,EAAN;UACApN,IAAI,CAACgC,MAAL,GAAcmL,GAAG,CAACnL,MAAlB;UACAhC,IAAI,CAACqN,IAAL,GAAYF,GAAG,CAACE,IAAhB;eACKzB,MAAL,CAAYnH,KAAE,CAACtL,MAAf;eAEKyS,MAAL,CAAYnH,KAAE,CAAC9K,KAAf;UAEAqG,IAAI,CAACsN,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;iBAEO,KAAK1G,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;;;WAICyE,KAAE,CAACvL,MAAR;aACOyQ,IAAL;;YAGI,CAAC,KAAK8C,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAD,IAA0B,CAAC,KAAKsT,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAA/B,EAAwD;cAClD,KAAK4S,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;kBACjBE,KAAK,GAAG,KAAK+Z,SAAL,GAAiBjS,IAA/B;YACA+T,aAAa,GAAG7b,KAAK,KAAKsM,KAAE,CAAChL,QAAb,IAAyBtB,KAAK,KAAKsM,KAAE,CAACnL,KAAtD;WAFF,MAGO;YACL0a,aAAa,GAAG,IAAhB;;;;YAIAA,aAAJ,EAAmB;eACZxP,KAAL,CAAWkN,kBAAX,GAAgC,KAAhC;UACAzR,IAAI,GAAG,KAAK4L,aAAL,EAAP;eACKrH,KAAL,CAAWkN,kBAAX,GAAgCD,qBAAhC;;cAIE,KAAKjN,KAAL,CAAWkN,kBAAX,IACA,EACE,KAAKjF,KAAL,CAAWhI,KAAE,CAACrL,KAAd,KACC,KAAKqT,KAAL,CAAWhI,KAAE,CAACtL,MAAd,KAAyB,KAAK+Y,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAAC9K,KAFzD,CAFF,EAME;iBACKiS,MAAL,CAAYnH,KAAE,CAACtL,MAAf;mBACO8G,IAAP;WARF,MASO;iBAEAoM,GAAL,CAAS5H,KAAE,CAACrL,KAAZ;;;;YAIA6G,IAAJ,EAAU;UACRkN,GAAG,GAAG,KAAKC,2BAAL,CAAiC,CACrC,KAAK0G,kCAAL,CAAwC7T,IAAxC,CADqC,CAAjC,CAAN;SADF,MAIO;UACLkN,GAAG,GAAG,KAAKC,2BAAL,EAAN;;;QAGFpN,IAAI,CAACgC,MAAL,GAAcmL,GAAG,CAACnL,MAAlB;QACAhC,IAAI,CAACqN,IAAL,GAAYF,GAAG,CAACE,IAAhB;aAEKzB,MAAL,CAAYnH,KAAE,CAACtL,MAAf;aAEKyS,MAAL,CAAYnH,KAAE,CAAC9K,KAAf;QAEAqG,IAAI,CAACsN,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;QAEA7L,IAAI,CAACoE,cAAL,GAAsB,IAAtB;eAEO,KAAKe,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;WAEGyE,KAAE,CAAC/L,MAAR;eACS,KAAKmI,YAAL,CACL,KAAK2D,KAAL,CAAW5D,KADN,EAEL,6BAFK,CAAP;;WAKG6D,KAAE,CAACtH,KAAR;WACKsH,KAAE,CAACrH,MAAR;QACE4C,IAAI,CAACY,KAAL,GAAa,KAAK6L,KAAL,CAAWhI,KAAE,CAACtH,KAAd,CAAb;aACKwM,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,8BAAtB,CAAP;;WAEGyE,KAAE,CAACvJ,OAAR;YACM,KAAKsJ,KAAL,CAAW5D,KAAX,KAAqB,GAAzB,EAA8B;eACvB+I,IAAL;;cACI,KAAK8C,KAAL,CAAWhI,KAAE,CAAClM,GAAd,CAAJ,EAAwB;mBACf,KAAKsI,YAAL,CACL,CAAC,KAAK2D,KAAL,CAAW5D,KADP,EAEL,6BAFK,EAGLZ,IAAI,CAACmB,KAHA,EAILnB,IAAI,CAACoB,GAAL,CAASD,KAJJ,CAAP;;;cAQE,KAAKsL,KAAL,CAAWhI,KAAE,CAACjM,MAAd,CAAJ,EAA2B;mBAClB,KAAKqI,YAAL,CACL,CAAC,KAAK2D,KAAL,CAAW5D,KADP,EAEL,6BAFK,EAGLZ,IAAI,CAACmB,KAHA,EAILnB,IAAI,CAACoB,GAAL,CAASD,KAJJ,CAAP;;;eAQG4M,UAAL,CACE,IADF,EAEG,iDAFH;;;aAMGA,UAAL;;WACGtJ,KAAE,CAAClM,GAAR;eACS,KAAKsI,YAAL,CACL,KAAK2D,KAAL,CAAW5D,KADN,EAEL,6BAFK,CAAP;;WAKG6D,KAAE,CAACjM,MAAR;eACS,KAAKqI,YAAL,CACL,KAAK2D,KAAL,CAAW5D,KADN,EAEL,6BAFK,CAAP;;WAKG6D,KAAE,CAACjH,KAAR;aACOmM,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;WAEGyE,KAAE,CAACvH,KAAR;aACOyM,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,2BAAtB,CAAP;;WAEGyE,KAAE,CAAC7H,KAAR;aACO+M,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;WAEGyE,KAAE,CAACrJ,IAAR;aACOuO,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;YAGI,KAAKwE,KAAL,CAAWvE,IAAX,CAAgBvI,OAAhB,KAA4B,QAAhC,EAA0C;iBACjC,KAAKgc,mBAAL,EAAP;SADF,MAEO,IAAI,KAAKlP,KAAL,CAAWvE,IAAX,CAAgBvI,OAApB,EAA6B;gBAC5BF,KAAK,GAAG,KAAKgN,KAAL,CAAWvE,IAAX,CAAgBzI,KAA9B;eACKmS,IAAL;iBACO,MAAMsK,gBAAN,CAAuBjU,IAAvB,EAA6BxI,KAA7B,CAAP;;;;;UAIA,KAAKuW,UAAL,EAAN;;;EAGFmG,oBAAoB,GAAyB;UACrCxP,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACEwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QADxB;QAEI1E,IAAI,GAAG,KAAK0T,oBAAL,EAAX;;WACO,KAAKlH,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,KAA2B,CAAC,KAAKub,kBAAL,EAAnC,EAA8D;YACtDnU,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAACoU,WAAL,GAAmBnU,IAAnB;WACK2L,MAAL,CAAYnH,KAAE,CAAC7L,QAAf;WACKgT,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;MACAoH,IAAI,GAAG,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;WAEKC,IAAP;;;EAGFoU,mBAAmB,GAAyB;UACpCrU,IAAI,GAAG,KAAKkF,SAAL,EAAb;;QACI,KAAKmH,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;MACzBuG,IAAI,CAACuN,cAAL,GAAsB,KAAK8G,mBAAL,EAAtB;aACO,KAAKlP,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;KAFF,MAGO;aACE,KAAKkU,oBAAL,EAAP;;;;EAIJI,kCAAkC,GAAyB;UACnDC,KAAK,GAAG,KAAKF,mBAAL,EAAd;;QACI,CAAC,KAAK7P,KAAL,CAAWkN,kBAAZ,IAAkC,KAAKrF,GAAL,CAAS5H,KAAE,CAAC9K,KAAZ,CAAtC,EAA0D;YAElDqG,IAAI,GAAG,KAAKkB,WAAL,CAAiBqT,KAAK,CAACpT,KAAvB,EAA8BoT,KAAK,CAACnT,GAAN,CAAUD,KAAxC,CAAb;MACAnB,IAAI,CAACgC,MAAL,GAAc,CAAC,KAAK8R,kCAAL,CAAwCS,KAAxC,CAAD,CAAd;MACAvU,IAAI,CAACqN,IAAL,GAAY,IAAZ;MACArN,IAAI,CAACsN,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;MACA7L,IAAI,CAACoE,cAAL,GAAsB,IAAtB;aACO,KAAKe,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;WAEKuU,KAAP;;;EAGFC,yBAAyB,GAAyB;UAC1CxU,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKmH,GAAL,CAAS5H,KAAE,CAAC3J,UAAZ;UACMmF,IAAI,GAAG,KAAKqU,kCAAL,EAAb;IACAtU,IAAI,CAAC1H,KAAL,GAAa,CAAC2H,IAAD,CAAb;;WACO,KAAKoM,GAAL,CAAS5H,KAAE,CAAC3J,UAAZ,CAAP,EAAgC;MAC9BkF,IAAI,CAAC1H,KAAL,CAAW+L,IAAX,CAAgB,KAAKiQ,kCAAL,EAAhB;;;WAEKtU,IAAI,CAAC1H,KAAL,CAAW2J,MAAX,KAAsB,CAAtB,GACHhC,IADG,GAEH,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,4BAAtB,CAFJ;;;EAKFyU,kBAAkB,GAAyB;UACnCzU,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKmH,GAAL,CAAS5H,KAAE,CAAC7J,SAAZ;UACMqF,IAAI,GAAG,KAAKuU,yBAAL,EAAb;IACAxU,IAAI,CAAC1H,KAAL,GAAa,CAAC2H,IAAD,CAAb;;WACO,KAAKoM,GAAL,CAAS5H,KAAE,CAAC7J,SAAZ,CAAP,EAA+B;MAC7BoF,IAAI,CAAC1H,KAAL,CAAW+L,IAAX,CAAgB,KAAKmQ,yBAAL,EAAhB;;;WAEKxU,IAAI,CAAC1H,KAAL,CAAW2J,MAAX,KAAsB,CAAtB,GACHhC,IADG,GAEH,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAFJ;;;EAKF6L,aAAa,GAAyB;UAC9BH,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;SACKnH,KAAL,CAAWmH,MAAX,GAAoB,IAApB;UACM1L,IAAI,GAAG,KAAKwU,kBAAL,EAAb;SACKjQ,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;SAGKlH,KAAL,CAAWyC,WAAX,GACE,KAAKzC,KAAL,CAAWyC,WAAX,IAA0B,KAAKzC,KAAL,CAAWkN,kBADvC;WAEOzR,IAAP;;;EAGF2R,oCAAoC,GAAyB;QACvD,KAAKpN,KAAL,CAAWvE,IAAX,KAAoBwE,KAAE,CAACxM,IAAvB,IAA+B,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,GAAxD,EAA6D;YACrD8D,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;YACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;YACM3E,IAAI,GAAG,KAAK8M,eAAL,EAAb;aACO,KAAK2G,oBAAL,CAA0B/O,QAA1B,EAAoCC,QAApC,EAA8C3E,IAA9C,CAAP;KAJF,MAKO;aACE,KAAK6L,aAAL,EAAP;;;;EAIJsD,uBAAuB,GAAyB;UACxCnP,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAACuN,cAAL,GAAsB,KAAK/B,wBAAL,EAAtB;WACO,KAAKrG,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFuO,kCAAkC,CAChCmG,sBADgC,EAElB;UACRvD,KAAK,GAAGuD,sBAAsB,GAChC,KAAK5H,eAAL,EADgC,GAEhC,KAAKyC,6BAAL,EAFJ;;QAGI,KAAK9C,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB6X,KAAK,CAAC5D,cAAN,GAAuB,KAAK4B,uBAAL,EAAvB;WACK3B,gBAAL,CAAsB2D,KAAtB;;;WAEKA,KAAP;;;EAGFwD,mBAAmB,CAAC3U,IAAD,EAAuB;IACxCA,IAAI,CAACqB,UAAL,CAAgBkM,cAAhB,GAAiCvN,IAAI,CAACuN,cAAtC;SAEKC,gBAAL,CACExN,IAAI,CAACqB,UADP,EAEErB,IAAI,CAACuN,cAAL,CAAoB9L,GAFtB,EAGEzB,IAAI,CAACuN,cAAL,CAAoBnM,GAApB,CAAwBK,GAH1B;WAMOzB,IAAI,CAACqB,UAAZ;;;EAGF6P,iBAAiB,GAAoB;QAC/BD,QAAQ,GAAG,IAAf;;QACI,KAAKxE,KAAL,CAAWhI,KAAE,CAACvJ,OAAd,CAAJ,EAA4B;MAC1B+V,QAAQ,GAAG,KAAK/L,SAAL,EAAX;;UACI,KAAKV,KAAL,CAAW5D,KAAX,KAAqB,GAAzB,EAA8B;QAC5BqQ,QAAQ,CAAC/Q,IAAT,GAAgB,MAAhB;OADF,MAEO;QACL+Q,QAAQ,CAAC/Q,IAAT,GAAgB,OAAhB;;;WAEGyJ,IAAL;WACKxE,UAAL,CAAgB8L,QAAhB,EAA0B,UAA1B;;;WAEKA,QAAP;;;EAOFrM,iBAAiB,CACf5E,IADe,EAEf4U,mBAFe,EAGf9P,QAAkB,GAAG,KAHN,EAIT;QACF8P,mBAAJ,EAAyB;aAChB,KAAKC,gCAAL,CAAsC7U,IAAtC,EAA4C,MACjD,MAAM4E,iBAAN,CAAwB5E,IAAxB,EAA8B,IAA9B,EAAoC8E,QAApC,CADK,CAAP;;;WAKK,MAAMF,iBAAN,CAAwB5E,IAAxB,EAA8B,KAA9B,EAAqC8E,QAArC,CAAP;;;EAGFgQ,0BAA0B,CACxB9U,IADwB,EAExBC,IAFwB,EAGxB6E,QAAkB,GAAG,KAHG,EAIlB;QACF,KAAK2H,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClByT,QAAQ,GAAG,KAAK7H,SAAL,EAAjB;OAIE6H,QAAQ,CAACQ,cAFX,EAIEvN,IAAI,CAACwM,SAJP,IAKI,KAAKD,oCAAL,EALJ;MAOAvM,IAAI,CAACsN,UAAL,GAAkBP,QAAQ,CAACQ,cAAT,GACd,KAAKpI,UAAL,CAAgB4H,QAAhB,EAA0B,gBAA1B,CADc,GAEd,IAFJ;;;UAKI+H,0BAAN,CAAiC9U,IAAjC,EAAuCC,IAAvC,EAA6C6E,QAA7C;;;EAIFiQ,cAAc,CAAC/N,OAAD,EAAmBvD,QAAnB,EAAoD;QAG9D,KAAKe,KAAL,CAAWyD,MAAX,IACA,KAAKwE,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CADA,IAEA,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,WAHvB,EAIE;YACMZ,IAAI,GAAG,KAAKkF,SAAL,EAAb;WACKyE,IAAL;aACO,KAAKyG,kBAAL,CAAwBpQ,IAAxB,CAAP;KAPF,MAQO;YACCiB,IAAI,GAAG,MAAM8T,cAAN,CAAqB/N,OAArB,EAA8BvD,QAA9B,CAAb;;UAEI,KAAKoH,UAAL,KAAoBC,SAApB,IAAiC,CAAC,KAAK1H,gBAAL,CAAsBnC,IAAtB,CAAtC,EAAmE;aAC5D4J,UAAL,GAAkB,IAAlB;;;aAEK5J,IAAP;;;;EAKJ+T,wBAAwB,CACtBhV,IADsB,EAEtBoC,IAFsB,EAGC;QACnBA,IAAI,CAACnC,IAAL,KAAc,YAAlB,EAAgC;UAC1BmC,IAAI,CAACnK,IAAL,KAAc,SAAlB,EAA6B;YAEzB,KAAKwU,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,KACA,KAAK2P,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CADA,IAEA,KAAKwU,KAAL,CAAWhI,KAAE,CAACxI,SAAd,CAFA,IAGA,KAAKwQ,KAAL,CAAWhI,KAAE,CAAClI,IAAd,CAHA,IAIA,KAAKkQ,KAAL,CAAWhI,KAAE,CAACzH,OAAd,CALF,EAME;iBACO,KAAK0Q,gBAAL,CAAsB1N,IAAtB,CAAP;;OARJ,MAUO,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;YAC1BmK,IAAI,CAACnK,IAAL,KAAc,WAAlB,EAA+B;iBACtB,KAAKmY,kBAAL,CAAwBpQ,IAAxB,CAAP;SADF,MAEO,IAAIoC,IAAI,CAACnK,IAAL,KAAc,MAAlB,EAA0B;iBACxB,KAAKmX,kBAAL,CAAwBpP,IAAxB,CAAP;SADK,MAEA,IAAIoC,IAAI,CAACnK,IAAL,KAAc,QAAlB,EAA4B;iBAC1B,KAAKoX,mBAAL,CAAyBrP,IAAzB,EAA+B,KAA/B,CAAP;;;;;WAKC,MAAMgV,wBAAN,CAA+BhV,IAA/B,EAAqCoC,IAArC,CAAP;;;EAIF6S,4BAA4B,GAAY;WAEpC,KAAK/G,YAAL,CAAkB,MAAlB,KACA,KAAKA,YAAL,CAAkB,WAAlB,CADA,IAEA,KAAKA,YAAL,CAAkB,QAAlB,CAFA,IAGA,MAAM+G,4BAAN,EAJF;;;EAQFC,wBAAwB,GAAY;QAEhC,KAAKzI,KAAL,CAAWhI,KAAE,CAACxM,IAAd,MACC,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,MAArB,IACC,KAAK4D,KAAL,CAAW5D,KAAX,KAAqB,WADtB,IAEC,KAAK4D,KAAL,CAAW5D,KAAX,KAAqB,QAHvB,CADF,EAKE;aACO,KAAP;;;WAGK,MAAMsU,wBAAN,EAAP;;;EAGFC,gBAAgB,CACd/S,IADc,EAEdgT,IAFc,EAGd1Q,QAHc,EAIdC,QAJc,EAKd0Q,gBALc,EAMA;QACV,CAAC,KAAK5I,KAAL,CAAWhI,KAAE,CAAChL,QAAd,CAAL,EAA8B,OAAO2I,IAAP;;QAI1BiT,gBAAJ,EAAsB;YACd7Q,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;eACK,MAAMH,gBAAN,CAAuB/S,IAAvB,EAA6BgT,IAA7B,EAAmC1Q,QAAnC,EAA6CC,QAA7C,CAAP;OADF,CAEE,OAAO4Q,GAAP,EAAY;YACRA,GAAG,YAAYC,WAAnB,EAAgC;eACzBhR,KAAL,GAAaA,KAAb;UACA6Q,gBAAgB,CAAClU,KAAjB,GAAyBoU,GAAG,CAAClM,GAAJ,IAAW,KAAK7E,KAAL,CAAWrD,KAA/C;iBACOiB,IAAP;SAHF,MAIO;gBAECmT,GAAN;;;;;SAID3J,MAAL,CAAYnH,KAAE,CAAChL,QAAf;UACM+K,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;UACMG,iBAAiB,GAAG,KAAKjR,KAAL,CAAWkR,SAArC;UACM1V,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;QACI;MAAEgR,UAAF;MAAcC;QAAW,KAAKC,6BAAL,EAA7B;QACI,CAACC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAvB;;QAEIC,MAAM,IAAIG,OAAO,CAAC9T,MAAR,GAAiB,CAA/B,EAAkC;YAC1ByT,SAAS,GAAG,CAAC,GAAGD,iBAAJ,CAAlB;;UAEIM,OAAO,CAAC9T,MAAR,GAAiB,CAArB,EAAwB;aACjBuC,KAAL,GAAaA,KAAb;aACKA,KAAL,CAAWkR,SAAX,GAAuBA,SAAvB;;aAEK,IAAIpM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyM,OAAO,CAAC9T,MAA5B,EAAoCqH,CAAC,EAArC,EAAyC;UACvCoM,SAAS,CAACrR,IAAV,CAAe0R,OAAO,CAACzM,CAAD,CAAP,CAAWnI,KAA1B;;;SAGD;UAAEwU,UAAF;UAAcC;YAAW,KAAKC,6BAAL,EAA1B;SACCC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAnB;;;UAGEC,MAAM,IAAIE,KAAK,CAAC7T,MAAN,GAAe,CAA7B,EAAgC;aAMzBC,KAAL,CACEsC,KAAK,CAACrD,KADR,EAEE,gFAFF;;;UAMEyU,MAAM,IAAIE,KAAK,CAAC7T,MAAN,KAAiB,CAA/B,EAAkC;aAC3BuC,KAAL,GAAaA,KAAb;aACKA,KAAL,CAAWkR,SAAX,GAAuBA,SAAS,CAAC5R,MAAV,CAAiBgS,KAAK,CAAC,CAAD,CAAL,CAAS3U,KAA1B,CAAvB;SACC;UAAEwU,UAAF;UAAcC;YAAW,KAAKC,6BAAL,EAA1B;;;WAGGG,uBAAL,CAA6BL,UAA7B,EAAyC,IAAzC;;;SAGGnR,KAAL,CAAWkR,SAAX,GAAuBD,iBAAvB;SACK7J,MAAL,CAAYnH,KAAE,CAACnL,KAAf;IAEA0G,IAAI,CAAC4H,IAAL,GAAYxF,IAAZ;IACApC,IAAI,CAAC2V,UAAL,GAAkBA,UAAlB;IACA3V,IAAI,CAACiW,SAAL,GAAiB,KAAKpB,gCAAL,CAAsC7U,IAAtC,EAA4C,MAC3D,KAAKkW,gBAAL,CAAsBd,IAAtB,EAA4BtK,SAA5B,EAAuCA,SAAvC,EAAkDA,SAAlD,CADe,CAAjB;WAIO,KAAK3F,UAAL,CAAgBnF,IAAhB,EAAsB,uBAAtB,CAAP;;;EAGF6V,6BAA6B,GAG3B;SACKrR,KAAL,CAAW2R,yBAAX,CAAqC9R,IAArC,CAA0C,KAAKG,KAAL,CAAWrD,KAArD;UAEMwU,UAAU,GAAG,KAAKO,gBAAL,EAAnB;UACMN,MAAM,GAAG,CAAC,KAAKnJ,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAhB;SAEKkL,KAAL,CAAW2R,yBAAX,CAAqChP,GAArC;WAEO;MAAEwO,UAAF;MAAcC;KAArB;;;EAUFI,uBAAuB,CACrBhW,IADqB,EAErBoW,eAFqB,EAGuC;UACtDC,KAAK,GAAG,CAACrW,IAAD,CAAd;UACMsW,MAAmC,GAAG,EAA5C;;WAEOD,KAAK,CAACpU,MAAN,KAAiB,CAAxB,EAA2B;YACnBjC,IAAI,GAAGqW,KAAK,CAAClP,GAAN,EAAb;;UACInH,IAAI,CAACC,IAAL,KAAc,yBAAlB,EAA6C;YACvCD,IAAI,CAACoE,cAAL,IAAuB,CAACpE,IAAI,CAACsN,UAAjC,EAA6C;eAEtCiJ,gBAAL,CAGIvW,IAAI,CAACgC,MAHT,EAIE,IAJF,EAKE,2BALF;eAQKuF,KAAL,CAAWiH,KAAX,CAAiBnQ,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAb,GAA8BN,WAA/C;gBAEMyY,WAAN,CAAkBxW,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;eACKuH,KAAL,CAAWoH,IAAX;SAbF,MAcO;UACL2H,MAAM,CAACjS,IAAP,CAAYrE,IAAZ;;;QAEFqW,KAAK,CAAChS,IAAN,CAAWrE,IAAI,CAACmD,IAAhB;OAlBF,MAmBO,IAAInD,IAAI,CAACC,IAAL,KAAc,uBAAlB,EAA2C;QAChDoW,KAAK,CAAChS,IAAN,CAAWrE,IAAI,CAAC2V,UAAhB;QACAU,KAAK,CAAChS,IAAN,CAAWrE,IAAI,CAACiW,SAAhB;;;;QAIAG,eAAJ,EAAqB;WACd,IAAI9M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgN,MAAM,CAACrU,MAA3B,EAAmCqH,CAAC,EAApC,EAAwC;aACjCiN,gBAAL,CACIvW,IAAI,CAACgC,MADT,EAEE,IAFF,EAGE,2BAHF;;;aAMK,CAACsU,MAAD,EAAS,EAAT,CAAP;;;WAGK9L,SAAS,CAAC8L,MAAD,EAAStW,IAAI,IAAI;UAC3B;aACGuW,gBAAL,CACIvW,IAAI,CAACgC,MADT,EAEE,IAFF,EAGE,2BAHF;eAKO,IAAP;OANF,CAOE,OAAOuT,GAAP,EAAY;eACL,KAAP;;KATY,CAAhB;;;EAcFV,gCAAgC,CAAI7U,IAAJ,EAAkByW,KAAlB,EAAqC;QAC/DC,MAAJ;;QACI,KAAKlS,KAAL,CAAW2R,yBAAX,CAAqC5F,OAArC,CAA6CvQ,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;WAC9DqD,KAAL,CAAW2R,yBAAX,CAAqC9R,IAArC,CAA0C,KAAKG,KAAL,CAAWrD,KAArD;MACAuV,MAAM,GAAGD,KAAK,EAAd;WACKjS,KAAL,CAAW2R,yBAAX,CAAqChP,GAArC;KAHF,MAIO;MACLuP,MAAM,GAAGD,KAAK,EAAd;;;WAGKC,MAAP;;;EAGFC,cAAc,CACZ3W,IADY,EAEZ0E,QAFY,EAGZC,QAHY,EAIE;IACd3E,IAAI,GAAG,MAAM2W,cAAN,CAAqB3W,IAArB,EAA2B0E,QAA3B,EAAqCC,QAArC,CAAP;;QACI,KAAK0H,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;MACzBuG,IAAI,CAACoS,QAAL,GAAgB,IAAhB;WAIK5E,gBAAL,CAAsBxN,IAAtB;;;QAGE,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClBsd,YAAY,GAAG,KAAK1V,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAArB;MACAiS,YAAY,CAACvV,UAAb,GAA0BrB,IAA1B;MACA4W,YAAY,CAACrJ,cAAb,GAA8B,KAAK4B,uBAAL,EAA9B;aAEO,KAAKhK,UAAL,CAAgByR,YAAhB,EAA8B,oBAA9B,CAAP;;;WAGK5W,IAAP;;;EAGF6W,uBAAuB,CAAC7W,IAAD,EAAe;QAEjCA,IAAI,CAACC,IAAL,KAAc,mBAAd,KACED,IAAI,CAACkK,UAAL,KAAoB,MAApB,IAA8BlK,IAAI,CAACkK,UAAL,KAAoB,QADpD,CAAD,IAEClK,IAAI,CAACC,IAAL,KAAc,wBAAd,IACCD,IAAI,CAACkP,UAAL,KAAoB,MAHtB,IAIClP,IAAI,CAACC,IAAL,KAAc,sBAAd,IAAwCD,IAAI,CAACkP,UAAL,KAAoB,MAL/D,EAME;;;;UAMI2H,uBAAN,CAA8B7W,IAA9B;;;EAGFiP,WAAW,CAACjP,IAAD,EAA4B;UAC/B8W,IAAI,GAAG,MAAM7H,WAAN,CAAkBjP,IAAlB,CAAb;;QAEE8W,IAAI,CAAC7W,IAAL,KAAc,wBAAd,IACA6W,IAAI,CAAC7W,IAAL,KAAc,sBAFhB,EAGE;MACA6W,IAAI,CAAC5H,UAAL,GAAkB4H,IAAI,CAAC5H,UAAL,IAAmB,OAArC;;;WAEK4H,IAAP;;;EAGFC,sBAAsB,CAAC/W,IAAD,EAAiD;QACjE,KAAKkO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;MAC7BlO,IAAI,CAACkP,UAAL,GAAkB,MAAlB;YAEM8H,eAAe,GAAG,KAAK9R,SAAL,EAAxB;WACKyE,IAAL;;UAEI,KAAK8C,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;QAEzBkH,IAAI,CAACiX,UAAL,GAAkB,KAAKC,qBAAL,EAAlB;aACKC,eAAL,CAAqBnX,IAArB;eACO,IAAP;OAJF,MAKO;eAEE,KAAKoP,kBAAL,CAAwB4H,eAAxB,CAAP;;KAbJ,MAeO,IAAI,KAAK9I,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;MACtClO,IAAI,CAACkP,UAAL,GAAkB,MAAlB;YAEM8H,eAAe,GAAG,KAAK9R,SAAL,EAAxB;WACKyE,IAAL;aAEO,KAAK0F,mBAAL,CAAyB2H,eAAzB,EAA0C,KAA1C,CAAP;KANK,MAOA,IAAI,KAAK9I,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;MACzClO,IAAI,CAACkP,UAAL,GAAkB,MAAlB;YACM8H,eAAe,GAAG,KAAK9R,SAAL,EAAxB;WACKyE,IAAL;aACO,KAAKyG,kBAAL,CAAwB4G,eAAxB,CAAP;KAJK,MAKA;aACE,MAAMD,sBAAN,CAA6B/W,IAA7B,CAAP;;;;EAIJoX,aAAa,CAACpX,IAAD,EAAwB;QAC/B,MAAMoX,aAAN,CAAoB,GAAGC,SAAvB,CAAJ,EAAuC,OAAO,IAAP;;QAEnC,KAAKnJ,YAAL,CAAkB,MAAlB,KAA6B,KAAKgE,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACrJ,IAA9D,EAAoE;MAClE4E,IAAI,CAACkP,UAAL,GAAkB,MAAlB;WACKvF,IAAL;WACKA,IAAL;aACO,IAAP;;;WAGK,KAAP;;;EAGF2N,kCAAkC,CAACtX,IAAD,EAAwB;UAClDqJ,GAAG,GAAG,KAAK7E,KAAL,CAAWrD,KAAvB;UACMoW,YAAY,GAAG,MAAMD,kCAAN,CAAyCtX,IAAzC,CAArB;;QACIuX,YAAY,IAAIvX,IAAI,CAACkP,UAAL,KAAoB,MAAxC,EAAgD;WACzCnB,UAAL,CAAgB1E,GAAhB;;;WAEKkO,YAAP;;;EAGFC,YAAY,CAACxX,IAAD,EAAgByX,WAAhB,EAAsCC,UAAtC,EAA4D;UAChEF,YAAN,CAAmBxX,IAAnB,EAAyByX,WAAzB,EAAsCC,UAAtC;;QACI,KAAKzK,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;;;;EAKJyK,gBAAgB,CAAC3R,IAAD,EAAqB;UAC7B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QACIrD,IAAI,QAAJ,IAAqC2D,IAAI,QAA7C,EAAyE;aAChE,KAAKkO,QAAL,CAAcpT,KAAE,CAAC1L,SAAjB,EAA4B,CAA5B,CAAP;KADF,MAEO,IACL,KAAKyL,KAAL,CAAWmH,MAAX,KACC3F,IAAI,OAAJ,IAAkCA,IAAI,OADvC,CADK,EAGL;aACO,KAAK6R,QAAL,CAAcpT,KAAE,CAACzJ,UAAjB,EAA6B,CAA7B,CAAP;KAJK,MAKA,IAAIyO,eAAe,CAACzD,IAAD,EAAO2D,IAAP,CAAnB,EAAiC;WACjCnF,KAAL,CAAWiD,UAAX,GAAwB,IAAxB;aACO,MAAMqQ,QAAN,EAAP;KAFK,MAGA;aACE,MAAMH,gBAAN,CAAuB3R,IAAvB,CAAP;;;;EAIJR,YAAY,CACVxF,IADU,EAEVyF,SAFU,EAGVlD,kBAHU,EAIF;QACJvC,IAAI,CAACC,IAAL,KAAc,oBAAlB,EAAwC;aAC/B,MAAMuF,YAAN,CACL,KAAKmP,mBAAL,CAAyB3U,IAAzB,CADK,EAELyF,SAFK,EAGLlD,kBAHK,CAAP;KADF,MAMO;aACE,MAAMiD,YAAN,CAAmBxF,IAAnB,EAAyByF,SAAzB,EAAoClD,kBAApC,CAAP;;;;EAKJgU,gBAAgB,CACdwB,QADc,EAEdtS,SAFc,EAGdlD,kBAHc,EAIa;SACtB,IAAI+G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyO,QAAQ,CAAC9V,MAA7B,EAAqCqH,CAAC,EAAtC,EAA0C;YAClClH,IAAI,GAAG2V,QAAQ,CAACzO,CAAD,CAArB;;UACIlH,IAAI,IAAIA,IAAI,CAACnC,IAAL,KAAc,oBAA1B,EAAgD;QAC9C8X,QAAQ,CAACzO,CAAD,CAAR,GAAc,KAAKqL,mBAAL,CAAyBvS,IAAzB,CAAd;;;;WAGG,MAAMmU,gBAAN,CAAuBwB,QAAvB,EAAiCtS,SAAjC,EAA4ClD,kBAA5C,CAAP;;;EAKFyV,gBAAgB,CACdD,QADc,EAEdE,mBAFc,EAGiB;SAC1B,IAAI3O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyO,QAAQ,CAAC9V,MAA7B,EAAqCqH,CAAC,EAAtC,EAA0C;YAClClH,IAAI,GAAG2V,QAAQ,CAACzO,CAAD,CAArB;;UAEElH,IAAI,IACJA,IAAI,CAACnC,IAAL,KAAc,oBADd,KAEC,CAACmC,IAAI,CAACb,KAAN,IAAe,CAACa,IAAI,CAACb,KAAL,CAAW8B,aAF5B,MAGC0U,QAAQ,CAAC9V,MAAT,GAAkB,CAAlB,IAAuB,CAACgW,mBAHzB,CADF,EAKE;aACK/V,KAAL,CACEE,IAAI,CAACmL,cAAL,CAAoBpM,KADtB,EAEE,qEAFF;;;;WAOG4W,QAAP;;;EAGF5V,SAAS,CACPC,IADO,EAEPC,WAAyB,GAAG1C,SAFrB,EAGP2C,YAHO,EAIPC,kBAJO,EAKD;QACFH,IAAI,CAACnC,IAAL,KAAc,oBAAlB,EAAwC;aAC/B,MAAMkC,SAAN,CACLC,IADK,EAELC,WAFK,EAGLC,YAHK,EAILC,kBAJK,CAAP;;;;EAUJ2V,kBAAkB,CAAClY,IAAD,EAAyC;QACrD,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB0G,IAAI,CAACuN,cAAL,GAAsB,KAAK4B,uBAAL,EAAtB;;;WAEK,MAAM+I,kBAAN,CAAyBlY,IAAzB,CAAP;;;EAGFmY,yBAAyB,CACvBnY,IADuB,EAEC;QACpB,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB0G,IAAI,CAACuN,cAAL,GAAsB,KAAK4B,uBAAL,EAAtB;;;WAEK,MAAMgJ,yBAAN,CAAgCnY,IAAhC,CAAP;;;EAIFoY,aAAa,GAAY;WAChB,KAAKnL,YAAL,CAAkB,GAAlB,KAA0B,MAAMmL,aAAN,EAAjC;;;EAIFC,eAAe,GAAY;WAClB,KAAK5L,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KAAwB,MAAM+e,eAAN,EAA/B;;;EAGFC,sBAAsB,CAACnY,MAAD,EAAmD;WAChE,CAAC,KAAKsM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAD,IAAyB,MAAMgf,sBAAN,CAA6BnY,MAA7B,CAAhC;;;EAIF4D,eAAe,CACbC,SADa,EAEb7D,MAFa,EAGb5B,WAHa,EAIbD,OAJa,EAKb2F,aALa,EAMbC,iBANa,EAOP;QACD/D,MAAD,CAAqB8Q,QAAzB,EAAmC;WAC5BlD,UAAL,CAAiB5N,MAAD,CAAqB8Q,QAArB,CAA8B9P,KAA9C;;;WAEMhB,MAAD,CAAqB8Q,QAA5B;;QACI,KAAKhE,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1B9M,MAAM,CAACiE,cAAP,GAAwB,KAAK8I,iCAAL,EAAxB;;;UAGInJ,eAAN,CACEC,SADF,EAEE7D,MAFF,EAGE5B,WAHF,EAIED,OAJF,EAKE2F,aALF,EAMEC,iBANF;;;EAUFqU,sBAAsB,CACpBvU,SADoB,EAEpB7D,MAFoB,EAGpB5B,WAHoB,EAIpBD,OAJoB,EAKd;QACD6B,MAAD,CAAqB8Q,QAAzB,EAAmC;WAC5BlD,UAAL,CAAiB5N,MAAD,CAAqB8Q,QAArB,CAA8B9P,KAA9C;;;WAEMhB,MAAD,CAAqB8Q,QAA5B;;QACI,KAAKhE,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1B9M,MAAM,CAACiE,cAAP,GAAwB,KAAK8I,iCAAL,EAAxB;;;UAGIqL,sBAAN,CAA6BvU,SAA7B,EAAwC7D,MAAxC,EAAgD5B,WAAhD,EAA6DD,OAA7D;;;EAIFka,eAAe,CAACxY,IAAD,EAAsB;UAC7BwY,eAAN,CAAsBxY,IAAtB;;QACIA,IAAI,CAACI,UAAL,IAAmB,KAAK6M,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;MAC7CjN,IAAI,CAACyY,mBAAL,GAA2B,KAAKtI,mCAAL,EAA3B;;;QAEE,KAAKjC,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;WAC9BvE,IAAL;YACM+O,WAAoC,GAAI1Y,IAAI,CAACyP,UAAL,GAAkB,EAAhE;;SACG;cACKzP,IAAI,GAAG,KAAKkF,SAAL,EAAb;QACAlF,IAAI,CAAC6M,EAAL,GAAU,KAAK0C,6BAAL,CAA+C,IAA/C,CAAV;;YACI,KAAKtC,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;UAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK+L,mCAAL,EAAtB;SADF,MAEO;UACLnQ,IAAI,CAACoE,cAAL,GAAsB,IAAtB;;;QAEFsU,WAAW,CAACrU,IAAZ,CAAiB,KAAKc,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAjB;OARF,QASS,KAAKqM,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CATT;;;;EAaJuf,iBAAiB,CACf3Y,IADe,EAED;UACRiR,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;UACMpO,GAAG,GAAG,MAAM6V,iBAAN,CAAwB3Y,IAAxB,CAAZ;IAEAA,IAAI,CAACiR,QAAL,GAAgBA,QAAhB;WACOnO,GAAP;;;EAIF8V,iBAAiB,CACf9W,IADe,EAEf4C,QAFe,EAGfC,QAHe,EAIfpG,WAJe,EAKfD,OALe,EAMf+G,SANe,EAOfd,sBAPe,EAQfe,WARe,EAST;QACDxD,IAAD,CAAmBmP,QAAvB,EAAiC;WAC1BlD,UAAL,CAAiBjM,IAAD,CAAmBmP,QAAnB,CAA4B9P,KAA5C;;;WAEMW,IAAD,CAAmBmP,QAA1B;QAEI7M,cAAJ;;QAGI,KAAK6I,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1B7I,cAAc,GAAG,KAAK8I,iCAAL,EAAjB;UACI,CAAC,KAAKT,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAL,EAA4B,KAAK6U,UAAL;;;UAGxB6K,iBAAN,CACE9W,IADF,EAEE4C,QAFF,EAGEC,QAHF,EAIEpG,WAJF,EAKED,OALF,EAME+G,SANF,EAOEd,sBAPF,EAQEe,WARF;;QAYIlB,cAAJ,EAAoB;OACjBtC,IAAI,CAAClB,KAAL,IAAckB,IAAf,EAAqBsC,cAArB,GAAsCA,cAAtC;;;;EAIJyU,4BAA4B,CAACtE,KAAD,EAA8B;QACpD,KAAKlI,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;UACrB8a,KAAK,CAACtU,IAAN,KAAe,YAAnB,EAAiC;cACzB,KAAKiC,KAAL,CACJqS,KAAK,CAACpT,KADF,EAEJ,gFAFI,CAAN;;;MAMFoT,KAAK,CAACnC,QAAN,GAAiB,IAAjB;;;QAEE,KAAK3F,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxBib,KAAK,CAAChH,cAAN,GAAuB,KAAK4B,uBAAL,EAAvB;;;SAEG3B,gBAAL,CAAsB+G,KAAtB;WACOA,KAAP;;;EAGFuE,iBAAiB,CACfpU,QADe,EAEfC,QAFe,EAGfoU,IAHe,EAIJ;UACL/Y,IAAI,GAAG,MAAM8Y,iBAAN,CAAwBpU,QAAxB,EAAkCC,QAAlC,EAA4CoU,IAA5C,CAAb;;QAGE/Y,IAAI,CAACC,IAAL,KAAc,mBAAd,IACAD,IAAI,CAACuN,cADL,IAEAvN,IAAI,CAAC0Q,KAAL,CAAWvP,KAAX,GAAmBnB,IAAI,CAACuN,cAAL,CAAoBpM,KAHzC,EAIE;WACKe,KAAL,CACElC,IAAI,CAACuN,cAAL,CAAoBpM,KADtB,EAEE,4DACE,2DAHJ;;;WAOKnB,IAAP;;;EAGFgZ,wBAAwB,CAAChZ,IAAD,EAAqC;QACvD,CAACiK,iBAAiB,CAACjK,IAAD,CAAtB,EAA8B;aACrB,MAAMgZ,wBAAN,CAA+BhZ,IAA/B,CAAP;;;WAGKmK,oBAAoB,CAAC,KAAK3F,KAAN,CAA3B;;;EAGFyU,yBAAyB,CACvBjZ,IADuB,EAEvBkZ,SAFuB,EAGvBjZ,IAHuB,EAIvBsC,kBAJuB,EAKjB;IACN2W,SAAS,CAACC,KAAV,GAAkBlP,iBAAiB,CAACjK,IAAD,CAAjB,GACd,KAAKuP,6BAAL,CAAmC,IAAnC,CADc,GAEd,KAAKzC,eAAL,EAFJ;SAIK3K,SAAL,CACE+W,SAAS,CAACC,KADZ,EAEE/Z,YAFF,EAGE0L,SAHF,EAIEvI,kBAJF;IAMAvC,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB,KAAKc,UAAL,CAAgB+T,SAAhB,EAA2BjZ,IAA3B,CAArB;;;EAIFmZ,gCAAgC,CAACpZ,IAAD,EAAqC;IACnEA,IAAI,CAACkK,UAAL,GAAkB,OAAlB;QAEIhK,IAAI,GAAG,IAAX;;QACI,KAAKuM,KAAL,CAAWhI,KAAE,CAAClH,OAAd,CAAJ,EAA4B;MAC1B2C,IAAI,GAAG,QAAP;KADF,MAEO,IAAI,KAAKgO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;MACpChO,IAAI,GAAG,MAAP;;;QAEEA,IAAJ,EAAU;YACF2T,EAAE,GAAG,KAAK3B,SAAL,EAAX;;UAGIhS,IAAI,KAAK,MAAT,IAAmB2T,EAAE,CAAC5T,IAAH,KAAYwE,KAAE,CAACrJ,IAAtC,EAA4C;aACrC2S,UAAL,CAAgB8F,EAAE,CAAC1S,KAAnB;;;UAIAgJ,oBAAoB,CAAC0J,EAAD,CAApB,IACAA,EAAE,CAAC5T,IAAH,KAAYwE,KAAE,CAAC3L,MADf,IAEA+a,EAAE,CAAC5T,IAAH,KAAYwE,KAAE,CAACrJ,IAHjB,EAIE;aACKuO,IAAL;QACA3J,IAAI,CAACkK,UAAL,GAAkBhK,IAAlB;;;;WAIG,MAAMkZ,gCAAN,CAAuCpZ,IAAvC,CAAP;;;EAIFqZ,oBAAoB,CAACrZ,IAAD,EAAkC;UAC9CkZ,SAAS,GAAG,KAAKhU,SAAL,EAAlB;UACMoU,aAAa,GAAG,KAAK9U,KAAL,CAAWrD,KAAjC;UACMoY,UAAU,GAAG,KAAKzM,eAAL,CAAqB,IAArB,CAAnB;QAEI0M,iBAAiB,GAAG,IAAxB;;QACID,UAAU,CAACthB,IAAX,KAAoB,MAAxB,EAAgC;MAC9BuhB,iBAAiB,GAAG,MAApB;KADF,MAEO,IAAID,UAAU,CAACthB,IAAX,KAAoB,QAAxB,EAAkC;MACvCuhB,iBAAiB,GAAG,QAApB;;;QAGE/T,SAAS,GAAG,KAAhB;;QACI,KAAKyI,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKuL,qBAAL,CAA2B,IAA3B,CAAhC,EAAkE;YAC1DC,QAAQ,GAAG,KAAK5M,eAAL,CAAqB,IAArB,CAAjB;;UAEE0M,iBAAiB,KAAK,IAAtB,IACA,CAAC,KAAK/M,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CADD,IAEA,CAAC,KAAKuM,KAAL,CAAWvE,IAAX,CAAgBvI,OAHnB,EAIE;QAEAwhB,SAAS,CAACS,QAAV,GAAqBD,QAArB;QACAR,SAAS,CAAChP,UAAV,GAAuBsP,iBAAvB;QACAN,SAAS,CAACC,KAAV,GAAkBO,QAAQ,CAACE,OAAT,EAAlB;OARF,MASO;QAELV,SAAS,CAACS,QAAV,GAAqBJ,UAArB;QACAL,SAAS,CAAChP,UAAV,GAAuB,IAAvB;QACAgP,SAAS,CAACC,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;;KAfJ,MAiBO,IACL0M,iBAAiB,KAAK,IAAtB,KACC,KAAK/M,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KAAuB,KAAKuM,KAAL,CAAWvE,IAAX,CAAgBvI,OADxC,CADK,EAGL;MAEAwhB,SAAS,CAACS,QAAV,GAAqB,KAAK7M,eAAL,CAAqB,IAArB,CAArB;MACAoM,SAAS,CAAChP,UAAV,GAAuBsP,iBAAvB;;UACI,KAAK3L,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;QAC5BqL,SAAS,CAACC,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;OADF,MAEO;QACLrH,SAAS,GAAG,IAAZ;QACAyT,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;;KAXG,MAaA;MACLnU,SAAS,GAAG,IAAZ;MACAyT,SAAS,CAACS,QAAV,GAAqBJ,UAArB;MACAL,SAAS,CAAChP,UAAV,GAAuB,IAAvB;MACAgP,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;;;UAGIC,gBAAgB,GAAG5P,iBAAiB,CAACjK,IAAD,CAA1C;UACM8Z,qBAAqB,GAAG7P,iBAAiB,CAACiP,SAAD,CAA/C;;QAEIW,gBAAgB,IAAIC,qBAAxB,EAA+C;WACxC5X,KAAL,CACEoX,aADF,EAEE,mFACE,yFAHJ;;;QAOEO,gBAAgB,IAAIC,qBAAxB,EAA+C;WACxCxJ,iBAAL,CAAuB4I,SAAS,CAACC,KAAV,CAAgBlhB,IAAvC,EAA6CihB,SAAS,CAACC,KAAV,CAAgBhY,KAA7D;;;QAGEsE,SAAS,IAAI,CAACoU,gBAAd,IAAkC,CAACC,qBAAvC,EAA8D;WACvDC,iBAAL,CACEb,SAAS,CAACC,KAAV,CAAgBlhB,IADlB,EAEEihB,SAAS,CAAC/X,KAFZ,EAGE,IAHF,EAIE,IAJF;;;SAQGgB,SAAL,CACE+W,SAAS,CAACC,KADZ,EAEE/Z,YAFF,EAGE0L,SAHF,EAIE,kBAJF;IAMA9K,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB,KAAKc,UAAL,CAAgB+T,SAAhB,EAA2B,iBAA3B,CAArB;;;EAIFc,mBAAmB,CAACha,IAAD,EAAmBia,cAAnB,EAAmD;UAE9D/Z,IAAI,GAAGF,IAAI,CAACE,IAAlB;;QACIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoC,KAAK+M,YAAL,CAAkB,GAAlB,CAAxC,EAAgE;MAC9DjN,IAAI,CAACoE,cAAL,GAAsB,KAAK8I,iCAAL,EAAtB;;;UAEI8M,mBAAN,CAA0Bha,IAA1B,EAAgCia,cAAhC;;;EAIFC,UAAU,CACRpD,IADQ,EAER5W,IAFQ,EAGF;UACAga,UAAN,CAAiBpD,IAAjB,EAAuB5W,IAAvB;;QACI,KAAKuM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxBwd,IAAI,CAACjK,EAAL,CAAQU,cAAR,GAAyB,KAAK4B,uBAAL,EAAzB;WACK3B,gBAAL,CAAsBsJ,IAAI,CAACjK,EAA3B;;;;EAKJsN,iCAAiC,CAC/Bna,IAD+B,EAE/Boa,IAF+B,EAGJ;QACvB,KAAK3N,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClBmY,qBAAqB,GAAG,KAAKjN,KAAL,CAAWkN,kBAAzC;WACKlN,KAAL,CAAWkN,kBAAX,GAAgC,IAAhC;MACA1R,IAAI,CAACsN,UAAL,GAAkB,KAAK6B,uBAAL,EAAlB;WACK3K,KAAL,CAAWkN,kBAAX,GAAgCD,qBAAhC;;;WAGK,MAAM0I,iCAAN,CAAwCna,IAAxC,EAA8Coa,IAA9C,CAAP;;;EAIFC,qBAAqB,GAAY;WACxB,KAAK5N,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KAAwB,MAAM+gB,qBAAN,EAA/B;;;EAaFnE,gBAAgB,CACdd,IADc,EAEd7Q,sBAFc,EAGd+V,cAHc,EAIdjF,gBAJc,EAKA;QACVkF,QAAQ,GAAG,IAAf;;QAEE,KAAKC,SAAL,CAAe,KAAf,MACC,KAAK/N,KAAL,CAAWhI,KAAE,CAAC4M,WAAd,KAA8B,KAAKpE,YAAL,CAAkB,GAAlB,CAD/B,CADF,EAGE;YACMzI,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;eACK,MAAMY,gBAAN,CACLd,IADK,EAEL7Q,sBAFK,EAGL+V,cAHK,EAILjF,gBAJK,CAAP;OADF,CAOE,OAAOE,GAAP,EAAY;YACRA,GAAG,YAAYC,WAAnB,EAAgC;eACzBhR,KAAL,GAAaA,KAAb;gBAKMiW,OAAO,GAAG,KAAKjW,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnC;;cACI,KAAKuC,KAAL,CAAWwC,OAAX,CAAmByT,OAAO,GAAG,CAA7B,MAAoCC,OAAE,CAACC,MAA3C,EAAmD;iBAC5CnW,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnB,IAA6B,CAA7B;;;UAGFsY,QAAQ,GAAGhF,GAAX;SAXF,MAYO;gBAECA,GAAN;;;;;QAKFgF,QAAQ,IAAI,IAAZ,IAAoB,KAAKtN,YAAL,CAAkB,GAAlB,CAAxB,EAAgD;UAC1C2N,eAAJ;UACIxW,cAAJ;;UACI;QACFA,cAAc,GAAG,KAAK8I,iCAAL,EAAjB;QACA0N,eAAe,GAAG,KAAK/F,gCAAL,CAChBzQ,cADgB,EAEhB,MACE,MAAM8R,gBAAN,CACEd,IADF,EAEE7Q,sBAFF,EAGE+V,cAHF,EAIEjF,gBAJF,CAHc,CAAlB;QAUAuF,eAAe,CAACxW,cAAhB,GAAiCA,cAAjC;aACKyW,0BAAL,CAAgCD,eAAhC,EAAiDxW,cAAjD;OAbF,CAcE,OAAOmR,GAAP,EAAY;cACNgF,QAAQ,IAAIhF,GAAlB;;;UAGEqF,eAAe,CAAC3a,IAAhB,KAAyB,yBAA7B,EAAwD;eAC/C2a,eAAP;OADF,MAEO,IAAIL,QAAQ,IAAI,IAAhB,EAAsB;cACrBA,QAAN;OADK,MAEA;aACArY,KAAL,CACEkC,cAAc,CAACjD,KADjB,EAEE,kEAFF;;;;WAOG,MAAM+U,gBAAN,CACLd,IADK,EAEL7Q,sBAFK,EAGL+V,cAHK,EAILjF,gBAJK,CAAP;;;EASFyF,UAAU,CAAC9a,IAAD,EAA8D;QAClE,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClBkL,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;cACI7D,qBAAqB,GAAG,KAAKjN,KAAL,CAAWkN,kBAAzC;aACKlN,KAAL,CAAWkN,kBAAX,GAAgC,IAAhC;cAEM3E,QAAQ,GAAG,KAAK7H,SAAL,EAAjB;SAIE6H,QAAQ,CAACQ,cAFX,EAIEvN,IAAI,CAACwM,SAJP,IAKI,KAAKD,oCAAL,EALJ;aAOK/H,KAAL,CAAWkN,kBAAX,GAAgCD,qBAAhC;YAEI,KAAK0C,kBAAL,EAAJ,EAA+B,KAAKpG,UAAL;YAC3B,CAAC,KAAKtB,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,CAAL,EAA2B,KAAKoU,UAAL;QAG3B/N,IAAI,CAACsN,UAAL,GAAkBP,QAAQ,CAACQ,cAAT,GACd,KAAKpI,UAAL,CAAgB4H,QAAhB,EAA0B,gBAA1B,CADc,GAEd,IAFJ;OAnBF,CAsBE,OAAOwI,GAAP,EAAY;YACRA,GAAG,YAAYC,WAAnB,EAAgC;eACzBhR,KAAL,GAAaA,KAAb;SADF,MAEO;gBAEC+Q,GAAN;;;;;WAKC,MAAMuF,UAAN,CAAiB9a,IAAjB,CAAP;;;EAGF+a,gBAAgB,GAAY;WACnB,KAAKtO,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KAAwB,MAAMyhB,gBAAN,EAA/B;;;EAGFC,0BAA0B,CACxBhb,IADwB,EAExBgC,MAFwB,EAGlB;QACF,KAAKwC,KAAL,CAAW2R,yBAAX,CAAqC5F,OAArC,CAA6CvQ,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;MACnEnB,IAAI,CAACgC,MAAL,GAAcA,MAAd;KADF,MAEO;YACCgZ,0BAAN,CAAiChb,IAAjC,EAAuCgC,MAAvC;;;;EAIJwU,WAAW,CACTxW,IADS,EAETib,eAFS,EAGTC,eAHS,EAIH;QAEJA,eAAe,IACf,KAAK1W,KAAL,CAAW2R,yBAAX,CAAqC5F,OAArC,CAA6CvQ,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAFhE,EAGE;;;;WAIK,MAAMqV,WAAN,CAAkBxW,IAAlB,EAAwBib,eAAxB,EAAyCC,eAAzC,CAAP;;;EAGFC,kCAAkC,CAACC,UAAD,EAAoC;WAC7D,MAAMD,kCAAN,CACLC,UAAU,IAAI,KAAK5W,KAAL,CAAWkR,SAAX,CAAqBnF,OAArB,CAA6B,KAAK/L,KAAL,CAAWrD,KAAxC,MAAmD,CAAC,CAD7D,CAAP;;;EAKFka,eAAe,CACbC,IADa,EAEb5W,QAFa,EAGbC,QAHa,EAIb4W,OAJa,EAKC;QAEZD,IAAI,CAACrb,IAAL,KAAc,YAAd,IACAqb,IAAI,CAACrjB,IAAL,KAAc,OADd,IAEA,KAAKuM,KAAL,CAAWkR,SAAX,CAAqBnF,OAArB,CAA6B7L,QAA7B,MAA2C,CAAC,CAH9C,EAIE;WACKiF,IAAL;YAEM3J,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAACwb,MAAL,GAAcF,IAAd;MACAtb,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CAAkChX,KAAE,CAACtL,MAArC,EAA6C,KAA7C,CAAjB;MACAmiB,IAAI,GAAG,KAAKnW,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;KAVF,MAWO,IACLsb,IAAI,CAACrb,IAAL,KAAc,YAAd,IACAqb,IAAI,CAACrjB,IAAL,KAAc,OADd,IAEA,KAAKgV,YAAL,CAAkB,GAAlB,CAHK,EAIL;YACMzI,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;UACIoG,KAAJ;;UACI;cACI1b,IAAI,GAAG,KAAK2b,iCAAL,CACXjX,QADW,EAEXC,QAFW,CAAb;YAII3E,IAAJ,EAAU,OAAOA,IAAP;OALZ,CAME,OAAOU,CAAP,EAAU;QACVgb,KAAK,GAAGhb,CAAR;;;WAGG8D,KAAL,GAAaA,KAAb;;UACI;eACK,MAAM6W,eAAN,CAAsBC,IAAtB,EAA4B5W,QAA5B,EAAsCC,QAAtC,EAAgD4W,OAAhD,CAAP;OADF,CAEE,OAAO7a,CAAP,EAAU;cACJgb,KAAK,IAAIhb,CAAf;;;;WAIG,MAAM2a,eAAN,CAAsBC,IAAtB,EAA4B5W,QAA5B,EAAsCC,QAAtC,EAAgD4W,OAAhD,CAAP;;;EAGFK,cAAc,CACZN,IADY,EAEZ5W,QAFY,EAGZC,QAHY,EAIZ4W,OAJY,EAKZM,cALY,EAMZC,eANY,EAOE;QACV,KAAKrP,KAAL,CAAWhI,KAAE,CAAC/K,WAAd,KAA8B,KAAKqiB,qBAAL,CAA2B,GAA3B,CAAlC,EAAmE;WAC5DC,YAAL,CAAkB,kBAAlB;MACAH,cAAc,CAACI,mBAAf,GAAqC,IAArC;;UACIV,OAAJ,EAAa;QACXM,cAAc,CAACK,IAAf,GAAsB,IAAtB;eACOZ,IAAP;;;WAEG3R,IAAL;YACM3J,IAA8B,GAAG,KAAKkB,WAAL,CACrCwD,QADqC,EAErCC,QAFqC,CAAvC;MAIA3E,IAAI,CAACwb,MAAL,GAAcF,IAAd;MACAtb,IAAI,CAACmc,aAAL,GAAqB,KAAKhM,mCAAL,EAArB;WACKvE,MAAL,CAAYnH,KAAE,CAACvL,MAAf;MAEA8G,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CAAkChX,KAAE,CAACtL,MAArC,EAA6C,KAA7C,CAAjB;MACA6G,IAAI,CAACoS,QAAL,GAAgB,IAAhB;aACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;KAlBF,MAmBO,IACL,CAACub,OAAD,IACA,KAAKxQ,gBAAL,EADA,IAEA,KAAKkC,YAAL,CAAkB,GAAlB,CAHK,EAIL;YACMjN,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAACwb,MAAL,GAAcF,IAAd;YACM9W,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;QACFtV,IAAI,CAACmc,aAAL,GAAqB,KAAKxK,4CAAL,EAArB;aACK/F,MAAL,CAAYnH,KAAE,CAACvL,MAAf;QACA8G,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CAAkChX,KAAE,CAACtL,MAArC,EAA6C,KAA7C,CAAjB;;YACI0iB,cAAc,CAACI,mBAAnB,EAAwC;UACtCjc,IAAI,CAACoS,QAAL,GAAgB,KAAhB;iBACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;eAEK,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;OARF,CASE,OAAOU,CAAP,EAAU;YACNA,CAAC,YAAY8U,WAAjB,EAA8B;eACvBhR,KAAL,GAAaA,KAAb;SADF,MAEO;gBACC9D,CAAN;;;;;WAKC,MAAMkb,cAAN,CACLN,IADK,EAEL5W,QAFK,EAGLC,QAHK,EAIL4W,OAJK,EAKLM,cALK,EAMLC,eANK,CAAP;;;EAUFM,iBAAiB,CAACpc,IAAD,EAA8B;QACzCqc,KAAK,GAAG,IAAZ;;QACI,KAAKtR,gBAAL,MAA2B,KAAKkC,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;YAC/CzI,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;QACF+G,KAAK,GAAG,KAAK1K,4CAAL,EAAR;OADF,CAEE,OAAOjR,CAAP,EAAU;YACNA,CAAC,YAAY8U,WAAjB,EAA8B;eACvBhR,KAAL,GAAaA,KAAb;SADF,MAEO;gBACC9D,CAAN;;;;;IAINV,IAAI,CAACmc,aAAL,GAAqBE,KAArB;UAEMD,iBAAN,CAAwBpc,IAAxB;;;EAGF2b,iCAAiC,CAC/BjX,QAD+B,EAE/BC,QAF+B,EAGH;UACtB3E,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;SACKqV,mBAAL,CAAyBha,IAAzB;QACI,CAAC,KAAK8a,UAAL,CAAgB9a,IAAhB,CAAL,EAA4B;WACrB,KAAKsc,oBAAL,CACLtc,IADK,EAEQ8K,SAFR,EAGS,IAHT,CAAP;;;EAOFyR,qBAAqB,CAACvW,IAAD,EAAqB;UAClC2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QAEErD,IAAI,OAAJ,IACA2D,IAAI,OADJ,IAEA,KAAKnF,KAAL,CAAWgY,cAHb,EAIE;WACKhY,KAAL,CAAWgY,cAAX,GAA4B,KAA5B;WACKhY,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;WACKoT,SAAL;;;;UAIIF,qBAAN,CAA4BvW,IAA5B;;;EAGF0W,kBAAkB,CAAC1W,IAAD,EAAqB;UAC/B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QAEErD,IAAI,QAAJ,IACA2D,IAAI,QAFN,EAGE;WAEKkO,QAAL,CAAcpT,KAAE,CAACxL,SAAjB,EAA4B,CAA5B;;;;UAIIyjB,kBAAN,CAAyB1W,IAAzB;;;EAGF2W,aAAa,CAACC,IAAD,EAAeC,OAAf,EAA2C;UAChDC,QAAQ,GAAG,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,OAA1B,CAAjB;;QACI,KAAKrY,KAAL,CAAWgY,cAAf,EAA+B;WACxBzO,UAAL,CAAgB,IAAhB,EAAsB,2BAAtB;;;WAEK+O,QAAP;;;EAGFC,gBAAgB,GAAS;QACnB,KAAKvC,SAAL,CAAe,cAAf,KAAkC,KAAKwC,eAAL,EAAtC,EAA8D;UACxD,KAAKxY,KAAL,CAAWgY,cAAf,EAA+B;aACxBzO,UAAL,CACE,IADF,EAEE,wDAFF;;;WAKGkP,wBAAL;WACKzY,KAAL,CAAW6E,GAAX,IAAkB,KAAK2T,eAAL,EAAlB;WACKxY,KAAL,CAAWgY,cAAX,GAA4B,IAA5B;;;;QAIE,KAAKhY,KAAL,CAAWgY,cAAf,EAA+B;YACvB/a,GAAG,GAAG,KAAKoG,KAAL,CAAW0I,OAAX,CAAmB,KAAnB,EAA2B,KAAK/L,KAAL,CAAW6E,GAAX,IAAkB,CAA7C,CAAZ;UACI5H,GAAG,KAAK,CAAC,CAAb,EAAgB,KAAKS,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAX,GAAiB,CAA5B,EAA+B,sBAA/B;WACX7E,KAAL,CAAW6E,GAAX,GAAiB5H,GAAG,GAAG,CAAvB;;;;UAIIsb,gBAAN;;;EAGFC,eAAe,GAAqB;UAC5B;MAAE3T;QAAQ,KAAK7E,KAArB;QACI0Y,yBAAyB,GAAG,CAAhC;;WAEE,QAAiCC,QAAjC,CACE,KAAKtV,KAAL,CAAW+P,UAAX,CAAsBvO,GAAG,GAAG6T,yBAA5B,CADF,CADF,EAIE;MACAA,yBAAyB;;;UAGrBE,GAAG,GAAG,KAAKvV,KAAL,CAAW+P,UAAX,CAAsBsF,yBAAyB,GAAG7T,GAAlD,CAAZ;UACMgU,GAAG,GAAG,KAAKxV,KAAL,CAAW+P,UAAX,CAAsBsF,yBAAyB,GAAG7T,GAA5B,GAAkC,CAAxD,CAAZ;;QAEI+T,GAAG,OAAH,IAA2BC,GAAG,OAAlC,EAAwD;aAC/CH,yBAAyB,GAAG,CAAnC;;;QAGA,KAAKrV,KAAL,CAAWnG,KAAX,CACEwb,yBAAyB,GAAG7T,GAD9B,EAEE6T,yBAAyB,GAAG7T,GAA5B,GAAkC,EAFpC,MAGM,cAJR,EAKE;aACO6T,yBAAyB,GAAG,EAAnC;;;QAEEE,GAAG,OAAH,IAA2BC,GAAG,OAAlC,EAAwD;aAC/CH,yBAAP;;;WAEK,KAAP;;;EAGFD,wBAAwB,GAAS;UACzBxb,GAAG,GAAG,KAAKoG,KAAL,CAAW0I,OAAX,CAAmB,IAAnB,EAAyB,KAAK/L,KAAL,CAAW6E,GAApC,CAAZ;;QACI5H,GAAG,KAAK,CAAC,CAAb,EAAgB;WACTS,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,sBAA3B;;;;CArrFR;;AC/EA,MAAMiU,QAAoC,GAAG;EAC3CC,IAAI,EAAE,QADqC;EAE3CC,GAAG,EAAE,GAFsC;EAG3CC,IAAI,EAAE,QAHqC;EAI3CC,EAAE,EAAE,GAJuC;EAK3CC,EAAE,EAAE,GALuC;EAM3CC,IAAI,EAAE,QANqC;EAO3CC,KAAK,EAAE,QAPoC;EAQ3CC,IAAI,EAAE,QARqC;EAS3CC,KAAK,EAAE,QAToC;EAU3CC,MAAM,EAAE,QAVmC;EAW3CC,GAAG,EAAE,QAXsC;EAY3CC,MAAM,EAAE,QAZmC;EAa3CC,IAAI,EAAE,QAbqC;EAc3CC,GAAG,EAAE,QAdsC;EAe3CC,IAAI,EAAE,QAfqC;EAgB3CC,IAAI,EAAE,QAhBqC;EAiB3CC,KAAK,EAAE,QAjBoC;EAkB3CC,GAAG,EAAE,QAlBsC;EAmB3CC,GAAG,EAAE,QAnBsC;EAoB3CC,GAAG,EAAE,QApBsC;EAqB3CC,IAAI,EAAE,QArBqC;EAsB3CC,GAAG,EAAE,QAtBsC;EAuB3CC,MAAM,EAAE,QAvBmC;EAwB3CC,IAAI,EAAE,QAxBqC;EAyB3CC,IAAI,EAAE,QAzBqC;EA0B3CC,KAAK,EAAE,QA1BoC;EA2B3CC,KAAK,EAAE,QA3BoC;EA4B3CC,IAAI,EAAE,QA5BqC;EA6B3CC,MAAM,EAAE,QA7BmC;EA8B3CC,KAAK,EAAE,QA9BoC;EA+B3CC,IAAI,EAAE,QA/BqC;EAgC3CC,IAAI,EAAE,QAhCqC;EAiC3CC,KAAK,EAAE,QAjCoC;EAkC3CC,MAAM,EAAE,QAlCmC;EAmC3CC,MAAM,EAAE,QAnCmC;EAoC3CC,MAAM,EAAE,QApCmC;EAqC3CC,MAAM,EAAE,QArCmC;EAsC3CC,MAAM,EAAE,QAtCmC;EAuC3CC,MAAM,EAAE,QAvCmC;EAwC3CC,KAAK,EAAE,QAxCoC;EAyC3CC,MAAM,EAAE,QAzCmC;EA0C3CC,IAAI,EAAE,QA1CqC;EA2C3CC,KAAK,EAAE,QA3CoC;EA4C3CC,KAAK,EAAE,QA5CoC;EA6C3CC,MAAM,EAAE,QA7CmC;EA8C3CC,MAAM,EAAE,QA9CmC;EA+C3CC,MAAM,EAAE,QA/CmC;EAgD3CC,KAAK,EAAE,QAhDoC;EAiD3CC,IAAI,EAAE,QAjDqC;EAkD3CC,MAAM,EAAE,QAlDmC;EAmD3CC,MAAM,EAAE,QAnDmC;EAoD3CC,KAAK,EAAE,QApDoC;EAqD3CC,IAAI,EAAE,QArDqC;EAsD3CC,GAAG,EAAE,QAtDsC;EAuD3CC,MAAM,EAAE,QAvDmC;EAwD3CC,MAAM,EAAE,QAxDmC;EAyD3CC,MAAM,EAAE,QAzDmC;EA0D3CC,KAAK,EAAE,QA1DoC;EA2D3CC,MAAM,EAAE,QA3DmC;EA4D3CC,IAAI,EAAE,QA5DqC;EA6D3CC,KAAK,EAAE,QA7DoC;EA8D3CC,MAAM,EAAE,QA9DmC;EA+D3CC,MAAM,EAAE,QA/DmC;EAgE3CC,MAAM,EAAE,QAhEmC;EAiE3CC,KAAK,EAAE,QAjEoC;EAkE3CC,IAAI,EAAE,QAlEqC;EAmE3CC,MAAM,EAAE,QAnEmC;EAoE3CC,KAAK,EAAE,QApEoC;EAqE3CC,KAAK,EAAE,QArEoC;EAsE3CC,MAAM,EAAE,QAtEmC;EAuE3CC,MAAM,EAAE,QAvEmC;EAwE3CC,KAAK,EAAE,QAxEoC;EAyE3CC,MAAM,EAAE,QAzEmC;EA0E3CC,IAAI,EAAE,QA1EqC;EA2E3CC,KAAK,EAAE,QA3EoC;EA4E3CC,KAAK,EAAE,QA5EoC;EA6E3CC,MAAM,EAAE,QA7EmC;EA8E3CC,MAAM,EAAE,QA9EmC;EA+E3CC,MAAM,EAAE,QA/EmC;EAgF3CC,KAAK,EAAE,QAhFoC;EAiF3CC,IAAI,EAAE,QAjFqC;EAkF3CC,MAAM,EAAE,QAlFmC;EAmF3CC,MAAM,EAAE,QAnFmC;EAoF3CC,KAAK,EAAE,QApFoC;EAqF3CC,IAAI,EAAE,QArFqC;EAsF3CC,GAAG,EAAE,QAtFsC;EAuF3CC,MAAM,EAAE,QAvFmC;EAwF3CC,MAAM,EAAE,QAxFmC;EAyF3CC,MAAM,EAAE,QAzFmC;EA0F3CC,KAAK,EAAE,QA1FoC;EA2F3CC,MAAM,EAAE,QA3FmC;EA4F3CC,IAAI,EAAE,QA5FqC;EA6F3CC,MAAM,EAAE,QA7FmC;EA8F3CC,MAAM,EAAE,QA9FmC;EA+F3CC,MAAM,EAAE,QA/FmC;EAgG3CC,MAAM,EAAE,QAhGmC;EAiG3CC,KAAK,EAAE,QAjGoC;EAkG3CC,IAAI,EAAE,QAlGqC;EAmG3CC,MAAM,EAAE,QAnGmC;EAoG3CC,KAAK,EAAE,QApGoC;EAqG3CC,IAAI,EAAE,QArGqC;EAsG3CC,KAAK,EAAE,QAtGoC;EAuG3CC,KAAK,EAAE,QAvGoC;EAwG3CC,MAAM,EAAE,QAxGmC;EAyG3CC,MAAM,EAAE,QAzGmC;EA0G3CC,IAAI,EAAE,QA1GqC;EA2G3CC,IAAI,EAAE,QA3GqC;EA4G3CC,IAAI,EAAE,QA5GqC;EA6G3C3pB,KAAK,EAAE,QA7GoC;EA8G3C4pB,KAAK,EAAE,QA9GoC;EA+G3CC,IAAI,EAAE,QA/GqC;EAgH3CC,KAAK,EAAE,QAhHoC;EAiH3CC,KAAK,EAAE,QAjHoC;EAkH3CC,OAAO,EAAE,QAlHkC;EAmH3CC,IAAI,EAAE,QAnHqC;EAoH3CC,GAAG,EAAE,QApHsC;EAqH3CC,KAAK,EAAE,QArHoC;EAsH3CC,IAAI,EAAE,QAtHqC;EAuH3CC,KAAK,EAAE,QAvHoC;EAwH3CC,MAAM,EAAE,QAxHmC;EAyH3CC,EAAE,EAAE,QAzHuC;EA0H3CC,EAAE,EAAE,QA1HuC;EA2H3CC,EAAE,EAAE,QA3HuC;EA4H3CC,OAAO,EAAE,QA5HkC;EA6H3CC,EAAE,EAAE,QA7HuC;EA8H3CC,GAAG,EAAE,QA9HsC;EA+H3CC,KAAK,EAAE,QA/HoC;EAgI3CC,GAAG,EAAE,QAhIsC;EAiI3CC,OAAO,EAAE,QAjIkC;EAkI3CC,GAAG,EAAE,QAlIsC;EAmI3CC,GAAG,EAAE,QAnIsC;EAoI3CC,GAAG,EAAE,QApIsC;EAqI3CC,KAAK,EAAE,QArIoC;EAsI3CC,KAAK,EAAE,QAtIoC;EAuI3CC,IAAI,EAAE,QAvIqC;EAwI3CC,KAAK,EAAE,QAxIoC;EAyI3CC,KAAK,EAAE,QAzIoC;EA0I3CC,OAAO,EAAE,QA1IkC;EA2I3CC,IAAI,EAAE,QA3IqC;EA4I3CC,GAAG,EAAE,QA5IsC;EA6I3CC,KAAK,EAAE,QA7IoC;EA8I3CC,IAAI,EAAE,QA9IqC;EA+I3CC,KAAK,EAAE,QA/IoC;EAgJ3CC,MAAM,EAAE,QAhJmC;EAiJ3CC,EAAE,EAAE,QAjJuC;EAkJ3CC,EAAE,EAAE,QAlJuC;EAmJ3CC,EAAE,EAAE,QAnJuC;EAoJ3CC,OAAO,EAAE,QApJkC;EAqJ3CC,EAAE,EAAE,QArJuC;EAsJ3CC,GAAG,EAAE,QAtJsC;EAuJ3CC,MAAM,EAAE,QAvJmC;EAwJ3CC,KAAK,EAAE,QAxJoC;EAyJ3CC,GAAG,EAAE,QAzJsC;EA0J3CC,OAAO,EAAE,QA1JkC;EA2J3CC,GAAG,EAAE,QA3JsC;EA4J3CC,GAAG,EAAE,QA5JsC;EA6J3CC,GAAG,EAAE,QA7JsC;EA8J3CC,KAAK,EAAE,QA9JoC;EA+J3CC,QAAQ,EAAE,QA/JiC;EAgK3CC,KAAK,EAAE,QAhKoC;EAiK3CC,GAAG,EAAE,QAjKsC;EAkK3CC,IAAI,EAAE,QAlKqC;EAmK3CC,IAAI,EAAE,QAnKqC;EAoK3CC,MAAM,EAAE,QApKmC;EAqK3CC,IAAI,EAAE,QArKqC;EAsK3CC,GAAG,EAAE,QAtKsC;EAuK3CC,GAAG,EAAE,QAvKsC;EAwK3CC,GAAG,EAAE,QAxKsC;EAyK3CC,KAAK,EAAE,QAzKoC;EA0K3CC,KAAK,EAAE,QA1KoC;EA2K3CC,KAAK,EAAE,QA3KoC;EA4K3CC,KAAK,EAAE,QA5KoC;EA6K3CC,KAAK,EAAE,QA7KoC;EA8K3CC,KAAK,EAAE,QA9KoC;EA+K3CC,KAAK,EAAE,QA/KoC;EAgL3CC,KAAK,EAAE,QAhLoC;EAiL3CC,MAAM,EAAE,QAjLmC;EAkL3CC,MAAM,EAAE,QAlLmC;EAmL3CC,IAAI,EAAE,QAnLqC;EAoL3CC,MAAM,EAAE,QApLmC;EAqL3CC,MAAM,EAAE,QArLmC;EAsL3CC,KAAK,EAAE,QAtLoC;EAuL3CC,KAAK,EAAE,QAvLoC;EAwL3CC,MAAM,EAAE,QAxLmC;EAyL3CC,MAAM,EAAE,QAzLmC;EA0L3CC,KAAK,EAAE,QA1LoC;EA2L3CC,KAAK,EAAE,QA3LoC;EA4L3CC,IAAI,EAAE,QA5LqC;EA6L3CC,KAAK,EAAE,QA7LoC;EA8L3CC,MAAM,EAAE,QA9LmC;EA+L3CC,IAAI,EAAE,QA/LqC;EAgM3CC,KAAK,EAAE,QAhMoC;EAiM3CC,OAAO,EAAE,QAjMkC;EAkM3CC,IAAI,EAAE,QAlMqC;EAmM3CC,IAAI,EAAE,QAnMqC;EAoM3CC,IAAI,EAAE,QApMqC;EAqM3CC,IAAI,EAAE,QArMqC;EAsM3CC,IAAI,EAAE,QAtMqC;EAuM3CC,KAAK,EAAE,QAvMoC;EAwM3CC,IAAI,EAAE,QAxMqC;EAyM3CC,IAAI,EAAE,QAzMqC;EA0M3CC,IAAI,EAAE,QA1MqC;EA2M3CC,IAAI,EAAE,QA3MqC;EA4M3CC,IAAI,EAAE,QA5MqC;EA6M3CC,MAAM,EAAE,QA7MmC;EA8M3CC,IAAI,EAAE,QA9MqC;EA+M3CC,KAAK,EAAE,QA/MoC;EAgN3CC,KAAK,EAAE,QAhNoC;EAiN3CC,KAAK,EAAE,QAjNoC;EAkN3CC,IAAI,EAAE,QAlNqC;EAmN3CC,KAAK,EAAE,QAnNoC;EAoN3CC,EAAE,EAAE,QApNuC;EAqN3CC,IAAI,EAAE,QArNqC;EAsN3CC,GAAG,EAAE,QAtNsC;EAuN3CC,KAAK,EAAE,QAvNoC;EAwN3CC,MAAM,EAAE,QAxNmC;EAyN3CC,KAAK,EAAE,QAzNoC;EA0N3ChpB,IAAI,EAAE,QA1NqC;EA2N3CipB,KAAK,EAAE,QA3NoC;EA4N3CC,GAAG,EAAE,QA5NsC;EA6N3CC,GAAG,EAAE,QA7NsC;EA8N3CC,EAAE,EAAE,QA9NuC;EA+N3CC,GAAG,EAAE,QA/NsC;EAgO3CC,GAAG,EAAE,QAhOsC;EAiO3CC,GAAG,EAAE,QAjOsC;EAkO3CC,MAAM,EAAE,QAlOmC;EAmO3CC,GAAG,EAAE,QAnOsC;EAoO3CC,IAAI,EAAE,QApOqC;EAqO3CC,KAAK,EAAE,QArOoC;EAsO3CC,EAAE,EAAE,QAtOuC;EAuO3CC,KAAK,EAAE,QAvOoC;EAwO3CC,EAAE,EAAE,QAxOuC;EAyO3CC,EAAE,EAAE,QAzOuC;EA0O3CC,GAAG,EAAE,QA1OsC;EA2O3CC,GAAG,EAAE,QA3OsC;EA4O3CC,IAAI,EAAE,QA5OqC;EA6O3CC,IAAI,EAAE,QA7OqC;EA8O3CC,IAAI,EAAE,QA9OqC;EA+O3CC,KAAK,EAAE,QA/OoC;EAgP3CC,MAAM,EAAE,QAhPmC;EAiP3CC,IAAI,EAAE,QAjPqC;EAkP3CC,IAAI,EAAE,QAlPqC;EAmP3CC,KAAK,EAAE,QAnPoC;EAoP3CC,KAAK,EAAE,QApPoC;EAqP3CC,MAAM,EAAE,QArPmC;EAsP3CC,MAAM,EAAE,QAtPmC;EAuP3CC,IAAI,EAAE,QAvPqC;EAwP3CC,IAAI,EAAE,QAxPqC;EAyP3CC,GAAG,EAAE,QAzPsC;EA0P3CC,MAAM,EAAE,QA1PmC;EA2P3CC,KAAK,EAAE,QA3PoC;EA4P3CC,MAAM,EAAE,QA5PmC;EA6P3CC,KAAK,EAAE;CA7PT;;ACWA,MAAMC,UAAU,GAAG,eAAnB;AACA,MAAMC,cAAc,GAAG,OAAvB;AAIAzS,OAAE,CAACC,MAAH,GAAY,IAAIxU,UAAJ,CAAe,MAAf,EAAuB,KAAvB,CAAZ;AACAuU,OAAE,CAAC0S,MAAH,GAAY,IAAIjnB,UAAJ,CAAe,OAAf,EAAwB,KAAxB,CAAZ;AACAuU,OAAE,CAAC2S,MAAH,GAAY,IAAIlnB,UAAJ,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC,CAAZ;AAEA1B,KAAE,CAAC6oB,OAAH,GAAa,IAAIh2B,SAAJ,CAAc,SAAd,CAAb;AACAmN,KAAE,CAAC8oB,OAAH,GAAa,IAAIj2B,SAAJ,CAAc,SAAd,EAAyB;EAAEN,UAAU,EAAE;CAAvC,CAAb;AACAyN,KAAE,CAAC4M,WAAH,GAAiB,IAAI/Z,SAAJ,CAAc,aAAd,EAA6B;EAAEL,UAAU,EAAE;CAA3C,CAAjB;AACAwN,KAAE,CAAC+oB,SAAH,GAAe,IAAIl2B,SAAJ,CAAc,WAAd,CAAf;;AAEAmN,KAAE,CAAC4M,WAAH,CAAexZ,aAAf,GAA+B,YAAW;OACnC2M,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBqW,OAAE,CAAC2S,MAA3B;OACK7oB,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBqW,OAAE,CAACC,MAA3B;OACKnW,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;CAHF;;AAMAxC,KAAE,CAAC+oB,SAAH,CAAa31B,aAAb,GAA6B,UAASwP,QAAT,EAAmB;QACxCH,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAZ;;MACKD,GAAG,KAAKwT,OAAE,CAACC,MAAX,IAAqBtT,QAAQ,KAAK5C,KAAE,CAACpJ,KAAtC,IAAgD6L,GAAG,KAAKwT,OAAE,CAAC0S,MAA/D,EAAuE;SAChE5oB,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;SACK3C,KAAL,CAAWyC,WAAX,GAAyB,KAAKG,UAAL,OAAsBsT,OAAE,CAAC2S,MAAlD;GAFF,MAGO;SACA7oB,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;;CANJ;;AAUA,SAASwmB,UAAT,CAAoBC,MAApB,EAAoD;SAC3CA,MAAM,GACTA,MAAM,CAACztB,IAAP,KAAgB,oBAAhB,IACEytB,MAAM,CAACztB,IAAP,KAAgB,oBAFT,GAGT,KAHJ;;;AAQF,SAAS0tB,mBAAT,CACED,MADF,EAEU;MACJA,MAAM,CAACztB,IAAP,KAAgB,eAApB,EAAqC;WAC5BytB,MAAM,CAACz1B,IAAd;;;MAGEy1B,MAAM,CAACztB,IAAP,KAAgB,mBAApB,EAAyC;WAChCytB,MAAM,CAACE,SAAP,CAAiB31B,IAAjB,GAAwB,GAAxB,GAA8By1B,MAAM,CAACz1B,IAAP,CAAYA,IAAjD;;;MAGEy1B,MAAM,CAACztB,IAAP,KAAgB,qBAApB,EAA2C;WAEvC0tB,mBAAmB,CAACD,MAAM,CAACA,MAAR,CAAnB,GACA,GADA,GAEAC,mBAAmB,CAACD,MAAM,CAACpa,QAAR,CAHrB;;;QAQI,IAAI/H,KAAJ,CAAU,+BAA+BmiB,MAAM,CAACztB,IAAhD,CAAN;;;AAGF,WAAgBG,UAAD,IACb,cAAcA,UAAd,CAAyB;EAGvBytB,YAAY,GAAS;QACf3mB,GAAG,GAAG,EAAV;QACI4mB,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAA5B;;aACS;UACH,KAAK7E,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;aAC5BC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,2BAA7B;;;YAGI4sB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;;cAEQ0kB,EAAR;;;cAGQ,KAAKvpB,KAAL,CAAW6E,GAAX,KAAmB,KAAK7E,KAAL,CAAWrD,KAAlC,EAAyC;gBACnC4sB,EAAE,OAAF,IAA6B,KAAKvpB,KAAL,CAAWyC,WAA5C,EAAyD;gBACrD,KAAKzC,KAAL,CAAW6E,GAAb;qBACO,KAAK4B,WAAL,CAAiBxG,KAAE,CAAC4M,WAApB,CAAP;;;mBAEK,MAAMsG,gBAAN,CAAuBoW,EAAvB,CAAP;;;UAEF7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;iBACO,KAAK4B,WAAL,CAAiBxG,KAAE,CAAC8oB,OAApB,EAA6BrmB,GAA7B,CAAP;;;UAGAA,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;UACAnC,GAAG,IAAI,KAAK8mB,aAAL,EAAP;UACAF,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;;;;cAIItD,SAAS,CAACgoB,EAAD,CAAb,EAAmB;YACjB7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;YACAnC,GAAG,IAAI,KAAK+mB,cAAL,CAAoB,IAApB,CAAP;YACAH,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;WAHF,MAIO;cACH,KAAK7E,KAAL,CAAW6E,GAAb;;;;;;;EAMV4kB,cAAc,CAACC,aAAD,EAAiC;UACvCH,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;QACInC,GAAJ;MACE,KAAK1C,KAAL,CAAW6E,GAAb;;QAEE0kB,EAAE,OAAF,IACA,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,QAFF,EAGE;QACE,KAAK7E,KAAL,CAAW6E,GAAb;MACAnC,GAAG,GAAGgnB,aAAa,GAAG,IAAH,GAAU,MAA7B;KALF,MAMO;MACLhnB,GAAG,GAAGnE,MAAM,CAACyG,YAAP,CAAoBukB,EAApB,CAAN;;;MAEA,KAAKvpB,KAAL,CAAW2pB,OAAb;SACK3pB,KAAL,CAAW4pB,SAAX,GAAuB,KAAK5pB,KAAL,CAAW6E,GAAlC;WAEOnC,GAAP;;;EAGFmnB,aAAa,CAACC,KAAD,EAAsB;QAC7BpnB,GAAG,GAAG,EAAV;QACI4mB,UAAU,GAAG,EAAE,KAAKtpB,KAAL,CAAW6E,GAA9B;;aACS;UACH,KAAK7E,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;aAC5BC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,8BAA7B;;;YAGI4sB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;UACI0kB,EAAE,KAAKO,KAAX,EAAkB;;UACdP,EAAE,OAAN,EAAgC;QAC9B7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;QACAnC,GAAG,IAAI,KAAK8mB,aAAL,EAAP;QACAF,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OAHF,MAIO,IAAItD,SAAS,CAACgoB,EAAD,CAAb,EAAmB;QACxB7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;QACAnC,GAAG,IAAI,KAAK+mB,cAAL,CAAoB,KAApB,CAAP;QACAH,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OAHK,MAIA;UACH,KAAK7E,KAAL,CAAW6E,GAAb;;;;IAGJnC,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAX,EAA7B,CAAP;WACO,KAAK4B,WAAL,CAAiBxG,KAAE,CAAC/L,MAApB,EAA4BwO,GAA5B,CAAP;;;EAGF8mB,aAAa,GAAW;QAClBO,GAAG,GAAG,EAAV;QACIC,KAAK,GAAG,CAAZ;QACIC,MAAJ;QACIV,EAAE,GAAG,KAAKlmB,KAAL,CAAW,KAAKrD,KAAL,CAAW6E,GAAtB,CAAT;UAEM3E,QAAQ,GAAG,EAAE,KAAKF,KAAL,CAAW6E,GAA9B;;WACO,KAAK7E,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAAtB,IAAgCusB,KAAK,KAAK,EAAjD,EAAqD;MACnDT,EAAE,GAAG,KAAKlmB,KAAL,CAAW,KAAKrD,KAAL,CAAW6E,GAAX,EAAX,CAAL;;UACI0kB,EAAE,KAAK,GAAX,EAAgB;YACVQ,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;cACdA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;YAClBA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;gBACIxB,UAAU,CAACtlB,IAAX,CAAgB2mB,GAAhB,CAAJ,EAA0B;cACxBE,MAAM,GAAG1rB,MAAM,CAAC4rB,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;;WAHJ,MAKO;YACLA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;gBACIvB,cAAc,CAACvlB,IAAf,CAAoB2mB,GAApB,CAAJ,EAA8B;cAC5BE,MAAM,GAAG1rB,MAAM,CAAC4rB,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;;;SATN,MAYO;UACLE,MAAM,GAAGI,QAAa,CAACN,GAAD,CAAtB;;;;;;MAIJA,GAAG,IAAIR,EAAP;;;QAEE,CAACU,MAAL,EAAa;WACNjqB,KAAL,CAAW6E,GAAX,GAAiB3E,QAAjB;aACO,GAAP;;;WAEK+pB,MAAP;;;EAUFK,WAAW,GAAS;QACdf,EAAJ;UACM5sB,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;;OACG;MACD0kB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,EAAE,KAAKpT,KAAL,CAAW6E,GAAnC,CAAL;KADF,QAESO,gBAAgB,CAACmkB,EAAD,CAAhB,IAAwBA,EAAE,OAFnC;;WAGO,KAAK9iB,WAAL,CACLxG,KAAE,CAAC6oB,OADE,EAEL,KAAKzlB,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKqD,KAAL,CAAW6E,GAAnC,CAFK,CAAP;;;EAQF0lB,kBAAkB,GAAoB;UAC9B/uB,IAAI,GAAG,KAAKkF,SAAL,EAAb;;QACI,KAAKuH,KAAL,CAAWhI,KAAE,CAAC6oB,OAAd,CAAJ,EAA4B;MAC1BttB,IAAI,CAAC/H,IAAL,GAAY,KAAKuM,KAAL,CAAW5D,KAAvB;KADF,MAEO,IAAI,KAAK4D,KAAL,CAAWvE,IAAX,CAAgBvI,OAApB,EAA6B;MAClCsI,IAAI,CAAC/H,IAAL,GAAY,KAAKuM,KAAL,CAAWvE,IAAX,CAAgBvI,OAA5B;KADK,MAEA;WACAqW,UAAL;;;SAEGpE,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAKFgvB,sBAAsB,GAAwB;UACtCtqB,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACM1M,IAAI,GAAG,KAAK82B,kBAAL,EAAb;QACI,CAAC,KAAK1iB,GAAL,CAAS5H,KAAE,CAACnL,KAAZ,CAAL,EAAyB,OAAOrB,IAAP;UAEnB+H,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;IACA3E,IAAI,CAAC4tB,SAAL,GAAiB31B,IAAjB;IACA+H,IAAI,CAAC/H,IAAL,GAAY,KAAK82B,kBAAL,EAAZ;WACO,KAAK5pB,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAMFivB,mBAAmB,GAAgD;UAC3DvqB,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;QACI3E,IAAI,GAAG,KAAKgvB,sBAAL,EAAX;;WACO,KAAK3iB,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAP,EAAyB;YACjB01B,OAAO,GAAG,KAAKhuB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAhB;MACAuqB,OAAO,CAACxB,MAAR,GAAiB1tB,IAAjB;MACAkvB,OAAO,CAAC5b,QAAR,GAAmB,KAAKyb,kBAAL,EAAnB;MACA/uB,IAAI,GAAG,KAAKmF,UAAL,CAAgB+pB,OAAhB,EAAyB,qBAAzB,CAAP;;;WAEKlvB,IAAP;;;EAKFmvB,sBAAsB,GAAiB;QACjCnvB,IAAJ;;YACQ,KAAKwE,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAAC3L,MAAR;QACEkH,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKyE,IAAL;QACA3J,IAAI,GAAG,KAAKovB,2BAAL,CAAiCpvB,IAAjC,CAAP;;YACIA,IAAI,CAACqB,UAAL,CAAgBpB,IAAhB,KAAyB,oBAA7B,EAAmD;gBAC3C,KAAKiC,KAAL,CACJlC,IAAI,CAACmB,KADD,EAEJ,6DAFI,CAAN;SADF,MAKO;iBACEnB,IAAP;;;WAGCyE,KAAE,CAAC4M,WAAR;WACK5M,KAAE,CAAC/L,MAAR;eACS,KAAK4L,aAAL,EAAP;;;cAGM,KAAKpC,KAAL,CACJ,KAAKsC,KAAL,CAAWrD,KADP,EAEJ,+DAFI,CAAN;;;;EAWNkuB,uBAAuB,GAAyB;UACxCrvB,IAAI,GAAG,KAAKkB,WAAL,CACX,KAAKsD,KAAL,CAAWsD,UADA,EAEX,KAAKtD,KAAL,CAAW8qB,aAFA,CAAb;WAIO,KAAK9tB,YAAL,CACLxB,IADK,EAEL,oBAFK,EAGL,KAAKwE,KAAL,CAAWrD,KAHN,EAIL,KAAKqD,KAAL,CAAWG,QAJN,CAAP;;;EAUF4qB,mBAAmB,CAACvvB,IAAD,EAA2C;SACvD2J,IAAL;IACA3J,IAAI,CAACqB,UAAL,GAAkB,KAAKiL,eAAL,EAAlB;SACKV,MAAL,CAAYnH,KAAE,CAACzL,MAAf;WAEO,KAAKmM,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAKFovB,2BAA2B,CACzBpvB,IADyB,EAEC;QACtB,KAAKyM,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAJ,EAA2B;MACzBgH,IAAI,CAACqB,UAAL,GAAkB,KAAKguB,uBAAL,EAAlB;KADF,MAEO;MACLrvB,IAAI,CAACqB,UAAL,GAAkB,KAAKiL,eAAL,EAAlB;;;SAEGV,MAAL,CAAYnH,KAAE,CAACzL,MAAf;WACO,KAAKmM,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAKFwvB,iBAAiB,GAAmB;UAC5BxvB,IAAI,GAAG,KAAKkF,SAAL,EAAb;;QACI,KAAKmH,GAAL,CAAS5H,KAAE,CAAC3L,MAAZ,CAAJ,EAAyB;WAClB8S,MAAL,CAAYnH,KAAE,CAAC5K,QAAf;MACAmG,IAAI,CAACoT,QAAL,GAAgB,KAAK8C,gBAAL,EAAhB;WACKtK,MAAL,CAAYnH,KAAE,CAACzL,MAAf;aACO,KAAKmM,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;;IAEFA,IAAI,CAACyvB,MAAL,GAAc,KAAKpjB,GAAL,CAAS5H,KAAE,CAACzK,EAAZ,CAAd;IACAgG,IAAI,CAAC/H,IAAL,GAAY,KAAK+2B,sBAAL,EAAZ;IACAhvB,IAAI,CAACY,KAAL,GAAa,KAAKyL,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,IAAkB,KAAKg1B,sBAAL,EAAlB,GAAkD,IAA/D;WACO,KAAKhqB,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAKF0vB,wBAAwB,CACtBhrB,QADsB,EAEtBC,QAFsB,EAGD;UACf3E,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;;QACI,KAAK8H,KAAL,CAAWhI,KAAE,CAAC+oB,SAAd,CAAJ,EAA8B;WACvB5hB,MAAL,CAAYnH,KAAE,CAAC+oB,SAAf;aACO,KAAKroB,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;;IAEFA,IAAI,CAAC/H,IAAL,GAAY,KAAKg3B,mBAAL,EAAZ;WACO,KAAKU,+BAAL,CAAqC3vB,IAArC,CAAP;;;EAGF2vB,+BAA+B,CAC7B3vB,IAD6B,EAER;UACf4vB,UAA4B,GAAG,EAArC;;WACO,CAAC,KAAKnjB,KAAL,CAAWhI,KAAE,CAACpJ,KAAd,CAAD,IAAyB,CAAC,KAAKoR,KAAL,CAAWhI,KAAE,CAAC+oB,SAAd,CAAjC,EAA2D;MACzDoC,UAAU,CAACvrB,IAAX,CAAgB,KAAKmrB,iBAAL,EAAhB;;;IAEFxvB,IAAI,CAAC4vB,UAAL,GAAkBA,UAAlB;IACA5vB,IAAI,CAAC6vB,WAAL,GAAmB,KAAKxjB,GAAL,CAAS5H,KAAE,CAACpJ,KAAZ,CAAnB;SACKuQ,MAAL,CAAYnH,KAAE,CAAC+oB,SAAf;WACO,KAAKroB,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAKF8vB,wBAAwB,CACtBprB,QADsB,EAEtBC,QAFsB,EAGD;UACf3E,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;;QACI,KAAK8H,KAAL,CAAWhI,KAAE,CAAC+oB,SAAd,CAAJ,EAA8B;WACvB5hB,MAAL,CAAYnH,KAAE,CAAC+oB,SAAf;aACO,KAAKroB,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;;IAEFA,IAAI,CAAC/H,IAAL,GAAY,KAAKg3B,mBAAL,EAAZ;SACKrjB,MAAL,CAAYnH,KAAE,CAAC+oB,SAAf;WACO,KAAKroB,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAMF+vB,iBAAiB,CAACrrB,QAAD,EAAmBC,QAAnB,EAAqD;UAC9D3E,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;UACMqrB,QAAQ,GAAG,EAAjB;UACMC,cAAc,GAAG,KAAKP,wBAAL,CAA8BhrB,QAA9B,EAAwCC,QAAxC,CAAvB;QACIurB,cAAc,GAAG,IAArB;;QAEI,CAACD,cAAc,CAACJ,WAApB,EAAiC;MAC/BM,QAAQ,EAAE,SAAS;gBACT,KAAK3rB,KAAL,CAAWvE,IAAnB;eACOwE,KAAE,CAAC4M,WAAR;YACE3M,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAAtB;YACAwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAAtB;iBACKgF,IAAL;;gBACI,KAAK0C,GAAL,CAAS5H,KAAE,CAACpJ,KAAZ,CAAJ,EAAwB;cACtB60B,cAAc,GAAG,KAAKJ,wBAAL,CACfprB,QADe,EAEfC,QAFe,CAAjB;oBAIMwrB,QAAN;;;YAEFH,QAAQ,CAAC3rB,IAAT,CAAc,KAAK0rB,iBAAL,CAAuBrrB,QAAvB,EAAiCC,QAAjC,CAAd;;;eAGGF,KAAE,CAAC8oB,OAAR;YACEyC,QAAQ,CAAC3rB,IAAT,CAAc,KAAKC,aAAL,EAAd;;;eAGGG,KAAE,CAAC3L,MAAR;;oBACQkH,IAAI,GAAG,KAAKkF,SAAL,EAAb;mBACKyE,IAAL;;kBACI,KAAK8C,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;gBAC3Bm2B,QAAQ,CAAC3rB,IAAT,CAAc,KAAKkrB,mBAAL,CAAyBvvB,IAAzB,CAAd;eADF,MAEO;gBACLgwB,QAAQ,CAAC3rB,IAAT,CAAc,KAAK+qB,2BAAL,CAAiCpvB,IAAjC,CAAd;;;;;;;kBAOI,KAAK+N,UAAL,EAAN;;;;UAIF0f,UAAU,CAACwC,cAAD,CAAV,IAA8B,CAACxC,UAAU,CAACyC,cAAD,CAA7C,EAA+D;aACxDhuB,KAAL,CAEEguB,cAAc,CAAC/uB,KAFjB,EAGE,+CAHF;OADF,MAMO,IAAI,CAACssB,UAAU,CAACwC,cAAD,CAAX,IAA+BxC,UAAU,CAACyC,cAAD,CAA7C,EAA+D;aAC/DhuB,KAAL,CAEEguB,cAAc,CAAC/uB,KAFjB,EAGE,iDACEwsB,mBAAmB,CAACsC,cAAc,CAACh4B,IAAhB,CADrB,GAEE,GALJ;OADK,MAQA,IAAI,CAACw1B,UAAU,CAACwC,cAAD,CAAX,IAA+B,CAACxC,UAAU,CAACyC,cAAD,CAA9C,EAAgE;YAGnEvC,mBAAmB,CAACuC,cAAc,CAACj4B,IAAhB,CAAnB,KACA01B,mBAAmB,CAACsC,cAAc,CAACh4B,IAAhB,CAHrB,EAIE;eACKiK,KAAL,CAEEguB,cAAc,CAAC/uB,KAFjB,EAGE,iDACEwsB,mBAAmB,CAACsC,cAAc,CAACh4B,IAAhB,CADrB,GAEE,GALJ;;;;;QAWFw1B,UAAU,CAACwC,cAAD,CAAd,EAAgC;MAC9BjwB,IAAI,CAACowB,eAAL,GAAuBH,cAAvB;MACAjwB,IAAI,CAACqwB,eAAL,GAAuBH,cAAvB;KAFF,MAGO;MACLlwB,IAAI,CAACiwB,cAAL,GAAsBA,cAAtB;MACAjwB,IAAI,CAACkwB,cAAL,GAAsBA,cAAtB;;;IAEFlwB,IAAI,CAACgwB,QAAL,GAAgBA,QAAhB;;QACI,KAAKvjB,KAAL,CAAWhI,KAAE,CAACzJ,UAAd,KAA6B,KAAKwJ,KAAL,CAAW5D,KAAX,KAAqB,GAAtD,EAA2D;WACpDsB,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,gEACE,uCAHJ;;;WAOKssB,UAAU,CAACwC,cAAD,CAAV,GACH,KAAK9qB,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CADG,GAEH,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,YAAtB,CAFJ;;;EAOFswB,eAAe,GAAiB;UACxB5rB,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;SACKgF,IAAL;WACO,KAAKomB,iBAAL,CAAuBrrB,QAAvB,EAAiCC,QAAjC,CAAP;;;EAOFL,aAAa,CAACisB,sBAAD,EAA6C;QACpD,KAAK9jB,KAAL,CAAWhI,KAAE,CAAC8oB,OAAd,CAAJ,EAA4B;aACnB,KAAK1sB,YAAL,CAAkB,KAAK2D,KAAL,CAAW5D,KAA7B,EAAoC,SAApC,CAAP;KADF,MAEO,IAAI,KAAK6L,KAAL,CAAWhI,KAAE,CAAC4M,WAAd,CAAJ,EAAgC;aAC9B,KAAKif,eAAL,EAAP;KADK,MAEA,IACL,KAAKrjB,YAAL,CAAkB,GAAlB,KACA,KAAKpF,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,QAFK,EAGL;WAGK4B,WAAL,CAAiBxG,KAAE,CAAC4M,WAApB;aACO,KAAKif,eAAL,EAAP;KAPK,MAQA;aACE,MAAMhsB,aAAN,CAAoBisB,sBAApB,CAAP;;;;EAIJ5Y,gBAAgB,CAAC3R,IAAD,EAAqB;QAC/B,KAAKxB,KAAL,CAAWgsB,cAAf,EAA+B,OAAO,MAAM7Y,gBAAN,CAAuB3R,IAAvB,CAAP;UAEzBgB,OAAO,GAAG,KAAKI,UAAL,EAAhB;;QAEIJ,OAAO,KAAK0T,OAAE,CAAC2S,MAAnB,EAA2B;aAClB,KAAKQ,YAAL,EAAP;;;QAGE7mB,OAAO,KAAK0T,OAAE,CAACC,MAAf,IAAyB3T,OAAO,KAAK0T,OAAE,CAAC0S,MAA5C,EAAoD;UAC9C7jB,iBAAiB,CAACvD,IAAD,CAArB,EAA6B;eACpB,KAAK8oB,WAAL,EAAP;;;UAGE9oB,IAAI,OAAR,EAAoC;UAChC,KAAKxB,KAAL,CAAW6E,GAAb;eACO,KAAK4B,WAAL,CAAiBxG,KAAE,CAAC+oB,SAApB,CAAP;;;UAIA,CAACxnB,IAAI,OAAJ,IAAoCA,IAAI,OAAzC,KACAgB,OAAO,KAAK0T,OAAE,CAACC,MAFjB,EAGE;eACO,KAAK0T,aAAL,CAAmBroB,IAAnB,CAAP;;;;QAKFA,IAAI,OAAJ,IACA,KAAKxB,KAAL,CAAWyC,WADX,IAEA,KAAKY,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAHF,EAIE;QACE,KAAK7E,KAAL,CAAW6E,GAAb;aACO,KAAK4B,WAAL,CAAiBxG,KAAE,CAAC4M,WAApB,CAAP;;;WAGK,MAAMsG,gBAAN,CAAuB3R,IAAvB,CAAP;;;EAGFnO,aAAa,CAACwP,QAAD,EAA4B;QACnC,KAAKoF,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;YACnBsO,UAAU,GAAG,KAAKA,UAAL,EAAnB;;UACIA,UAAU,KAAKsT,OAAE,CAACC,MAAtB,EAA8B;aACvBnW,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBqW,OAAE,CAAClU,eAA3B;OADF,MAEO,IAAIY,UAAU,KAAKsT,OAAE,CAAC2S,MAAtB,EAA8B;aAC9B7oB,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBqW,OAAE,CAACjU,aAA3B;OADK,MAEA;cACC5O,aAAN,CAAoBwP,QAApB;;;WAEG7C,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;KATF,MAUO,IAAI,KAAKwF,KAAL,CAAWhI,KAAE,CAACpJ,KAAd,KAAwBgM,QAAQ,KAAK5C,KAAE,CAAC4M,WAA5C,EAAyD;WACzD7M,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnB,IAA6B,CAA7B;WACKuC,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBqW,OAAE,CAAC0S,MAA3B;WACK5oB,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;KAHK,MAIA;aACE,MAAMpP,aAAN,CAAoBwP,QAApB,CAAP;;;;CA1fR;;ACrDO,MAAMopB,KAAN,CAAY;EASjBl5B,WAAW,CAACgJ,KAAD,EAAoB;SAN/BmwB,GAM+B,GANf,EAMe;SAJ/BC,OAI+B,GAJX,EAIW;SAF/BC,SAE+B,GAFT,EAES;SACxBrwB,KAAL,GAAaA,KAAb;;;;AAQJ,AAAe,MAAMswB,YAAN,CAA0C;EAMvDt5B,WAAW,CAAC2K,KAAD,EAAuBsG,QAAvB,EAA0C;SALrDsoB,UAKqD,GALzB,EAKyB;SAFrDC,gBAEqD,GAFb,IAAIh5B,GAAJ,EAEa;SAC9CmK,KAAL,GAAaA,KAAb;SACKsG,QAAL,GAAgBA,QAAhB;;;MAGEwoB,UAAJ,GAAiB;WACR,CAAC,KAAKC,eAAL,GAAuB1wB,KAAvB,GAA+B3C,cAAhC,IAAkD,CAAzD;;;MAEE4J,WAAJ,GAAkB;WACT,CAAC,KAAKypB,eAAL,GAAuB1wB,KAAvB,GAA+BzC,eAAhC,IAAmD,CAA1D;;;MAEEozB,OAAJ,GAAc;WACL,CAAC,KAAKD,eAAL,GAAuB1wB,KAAvB,GAA+B1C,WAAhC,IAA+C,CAAtD;;;MAEEszB,UAAJ,GAAiB;WACR,CAAC,KAAKC,gBAAL,GAAwB7wB,KAAxB,GAAgCtC,WAAjC,IAAgD,CAAvD;;;MAEE8G,gBAAJ,GAAuB;WACd,CAAC,KAAKqsB,gBAAL,GAAwB7wB,KAAxB,GAAgCrC,kBAAjC,IAAuD,CAA9D;;;MAEEmzB,kBAAJ,GAAyB;WAChB,CAAC,KAAKD,gBAAL,GAAwB7wB,KAAxB,GAAgC3C,cAAjC,IAAmD,CAA1D;;;MAEE0zB,mBAAJ,GAA0B;WACjB,KAAKC,0BAAL,CAAgC,KAAKC,YAAL,EAAhC,CAAP;;;EAGFC,WAAW,CAAClxB,KAAD,EAA2B;WAC7B,IAAIkwB,KAAJ,CAAUlwB,KAAV,CAAP;;;EAKFiO,KAAK,CAACjO,KAAD,EAAoB;SAClBuwB,UAAL,CAAgBzsB,IAAhB,CAAqB,KAAKotB,WAAL,CAAiBlxB,KAAjB,CAArB;;;EAGFoO,IAAI,GAAG;SACAmiB,UAAL,CAAgB3pB,GAAhB;;;EAMFoqB,0BAA0B,CAAChqB,KAAD,EAAyB;WAC1C,CAAC,EACNA,KAAK,CAAChH,KAAN,GAAc3C,cAAd,IACC,CAAC,KAAK4K,QAAN,IAAkBjB,KAAK,CAAChH,KAAN,GAAc5C,aAF3B,CAAR;;;EAMF8S,WAAW,CAACxY,IAAD,EAAeoK,WAAf,EAA0CgH,GAA1C,EAAuD;QAC5D9B,KAAK,GAAG,KAAKiqB,YAAL,EAAZ;;QACInvB,WAAW,GAAG1D,kBAAd,IAAoC0D,WAAW,GAAGzD,mBAAtD,EAA2E;WACpE8yB,yBAAL,CAA+BnqB,KAA/B,EAAsCtP,IAAtC,EAA4CoK,WAA5C,EAAyDgH,GAAzD;;UAEIhH,WAAW,GAAGzD,mBAAlB,EAAuC;QACrC2I,KAAK,CAACqpB,SAAN,CAAgBvsB,IAAhB,CAAqBpM,IAArB;OADF,MAEO;QACLsP,KAAK,CAACopB,OAAN,CAActsB,IAAd,CAAmBpM,IAAnB;;;UAGEoK,WAAW,GAAG1D,kBAAlB,EAAsC;aAC/BgzB,kBAAL,CAAwBpqB,KAAxB,EAA+BtP,IAA/B;;KAVJ,MAYO,IAAIoK,WAAW,GAAG3D,cAAlB,EAAkC;WAClC,IAAI4K,CAAC,GAAG,KAAKwnB,UAAL,CAAgB7uB,MAAhB,GAAyB,CAAtC,EAAyCqH,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;QACpD/B,KAAK,GAAG,KAAKupB,UAAL,CAAgBxnB,CAAhB,CAAR;aACKooB,yBAAL,CAA+BnqB,KAA/B,EAAsCtP,IAAtC,EAA4CoK,WAA5C,EAAyDgH,GAAzD;QACA9B,KAAK,CAACmpB,GAAN,CAAUrsB,IAAV,CAAepM,IAAf;aACK05B,kBAAL,CAAwBpqB,KAAxB,EAA+BtP,IAA/B;YAEIsP,KAAK,CAAChH,KAAN,GAAcnC,SAAlB,EAA6B;;;;QAG7B,KAAKoK,QAAL,IAAiBjB,KAAK,CAAChH,KAAN,GAAc5C,aAAnC,EAAkD;WAC3CozB,gBAAL,CAAsBa,MAAtB,CAA6B35B,IAA7B;;;;EAIJ05B,kBAAkB,CAACpqB,KAAD,EAAgBtP,IAAhB,EAA8B;QAC1C,KAAKuQ,QAAL,IAAiBjB,KAAK,CAAChH,KAAN,GAAc5C,aAAnC,EAAkD;WAC3CozB,gBAAL,CAAsBa,MAAtB,CAA6B35B,IAA7B;;;;EAIJy5B,yBAAyB,CACvBnqB,KADuB,EAEvBtP,IAFuB,EAGvBoK,WAHuB,EAIvBgH,GAJuB,EAKvB;QACI,KAAKwoB,mBAAL,CAAyBtqB,KAAzB,EAAgCtP,IAAhC,EAAsCoK,WAAtC,CAAJ,EAAwD;WACjDH,KAAL,CAAWmH,GAAX,EAAiB,eAAcpR,IAAK,6BAApC;;;;EAIJ45B,mBAAmB,CACjBtqB,KADiB,EAEjBtP,IAFiB,EAGjBoK,WAHiB,EAIR;QACL,EAAEA,WAAW,GAAG7D,eAAhB,CAAJ,EAAsC,OAAO,KAAP;;QAElC6D,WAAW,GAAG1D,kBAAlB,EAAsC;aAElC4I,KAAK,CAACopB,OAAN,CAAcpgB,OAAd,CAAsBtY,IAAtB,IAA8B,CAAC,CAA/B,IACAsP,KAAK,CAACqpB,SAAN,CAAgBrgB,OAAhB,CAAwBtY,IAAxB,IAAgC,CAAC,CADjC,IAEAsP,KAAK,CAACmpB,GAAN,CAAUngB,OAAV,CAAkBtY,IAAlB,IAA0B,CAAC,CAH7B;;;QAOEoK,WAAW,GAAGzD,mBAAlB,EAAuC;aAEnC2I,KAAK,CAACopB,OAAN,CAAcpgB,OAAd,CAAsBtY,IAAtB,IAA8B,CAAC,CAA/B,IACC,CAAC,KAAKs5B,0BAAL,CAAgChqB,KAAhC,CAAD,IACCA,KAAK,CAACmpB,GAAN,CAAUngB,OAAV,CAAkBtY,IAAlB,IAA0B,CAAC,CAH/B;;;WAQCsP,KAAK,CAACopB,OAAN,CAAcpgB,OAAd,CAAsBtY,IAAtB,IAA8B,CAAC,CAA/B,IACC,EAAEsP,KAAK,CAAChH,KAAN,GAAcvC,kBAAd,IAAoCuJ,KAAK,CAACopB,OAAN,CAAc,CAAd,MAAqB14B,IAA3D,CADF,IAEC,CAAC,KAAKs5B,0BAAL,CAAgChqB,KAAhC,CAAD,IACCA,KAAK,CAACqpB,SAAN,CAAgBrgB,OAAhB,CAAwBtY,IAAxB,IAAgC,CAAC,CAJrC;;;EAQF65B,gBAAgB,CAACjlB,EAAD,EAAmB;QAE/B,KAAKikB,UAAL,CAAgB,CAAhB,EAAmBH,OAAnB,CAA2BpgB,OAA3B,CAAmC1D,EAAE,CAAC5U,IAAtC,MAAgD,CAAC,CAAjD,IACA,KAAK64B,UAAL,CAAgB,CAAhB,EAAmBJ,GAAnB,CAAuBngB,OAAvB,CAA+B1D,EAAE,CAAC5U,IAAlC,MAA4C,CAAC,CAD7C,IAKA,KAAK64B,UAAL,CAAgB,CAAhB,EAAmBF,SAAnB,CAA6BrgB,OAA7B,CAAqC1D,EAAE,CAAC5U,IAAxC,MAAkD,CAAC,CANrD,EAOE;WACK84B,gBAAL,CAAsB34B,GAAtB,CAA0ByU,EAAE,CAAC5U,IAA7B,EAAmC4U,EAAE,CAAC1L,KAAtC;;;;EAIJqwB,YAAY,GAAW;WACd,KAAKV,UAAL,CAAgB,KAAKA,UAAL,CAAgB7uB,MAAhB,GAAyB,CAAzC,CAAP;;;EAIFgvB,eAAe,GAAW;SACnB,IAAI3nB,CAAC,GAAG,KAAKwnB,UAAL,CAAgB7uB,MAAhB,GAAyB,CAAtC,GAA2CqH,CAAC,EAA5C,EAAgD;YACxC/B,KAAK,GAAG,KAAKupB,UAAL,CAAgBxnB,CAAhB,CAAd;;UACI/B,KAAK,CAAChH,KAAN,GAAcnC,SAAlB,EAA6B;eACpBmJ,KAAP;;;;;EAON6pB,gBAAgB,GAAW;SACpB,IAAI9nB,CAAC,GAAG,KAAKwnB,UAAL,CAAgB7uB,MAAhB,GAAyB,CAAtC,GAA2CqH,CAAC,EAA5C,EAAgD;YACxC/B,KAAK,GAAG,KAAKupB,UAAL,CAAgBxnB,CAAhB,CAAd;;UAEE,CAAC/B,KAAK,CAAChH,KAAN,GAAcnC,SAAd,IAA2BmJ,KAAK,CAAChH,KAAN,GAAcpC,WAA1C,KACA,EAAEoJ,KAAK,CAAChH,KAAN,GAAcxC,WAAhB,CAFF,EAGE;eACOwJ,KAAP;;;;;;;ACnMR,MAAMwqB,eAAN,SAA8BtB,KAA9B,CAAoC;;;SAClCn4B,KADkC,GAChB,EADgB;SAIlC05B,KAJkC,GAIhB,EAJgB;SAOlCC,UAPkC,GAOX,EAPW;SAUlCC,OAVkC,GAUd,EAVc;SAgBlCC,kBAhBkC,GAgBH,EAhBG;;;;;AAsBpC,AAAe,MAAMC,sBAAN,SAAqCvB,YAArC,CAAmE;EAChFY,WAAW,CAAClxB,KAAD,EAAqC;WACvC,IAAIwxB,eAAJ,CAAoBxxB,KAApB,CAAP;;;EAGFkQ,WAAW,CAACxY,IAAD,EAAeoK,WAAf,EAA0CgH,GAA1C,EAAuD;UAC1D9B,KAAK,GAAG,KAAKiqB,YAAL,EAAd;;QACInvB,WAAW,GAAGnD,yBAAlB,EAA6C;WACtCyyB,kBAAL,CAAwBpqB,KAAxB,EAA+BtP,IAA/B;MACAsP,KAAK,CAAC4qB,kBAAN,CAAyB9tB,IAAzB,CAA8BpM,IAA9B;;;;UAIIwY,WAAN,CAAkB,GAAG4G,SAArB;;QAEIhV,WAAW,GAAG5D,cAAlB,EAAkC;UAC5B,EAAE4D,WAAW,GAAG7D,eAAhB,CAAJ,EAAsC;aAE/BkzB,yBAAL,CAA+BnqB,KAA/B,EAAsCtP,IAAtC,EAA4CoK,WAA5C,EAAyDgH,GAAzD;aACKsoB,kBAAL,CAAwBpqB,KAAxB,EAA+BtP,IAA/B;;;MAEFsP,KAAK,CAACjP,KAAN,CAAY+L,IAAZ,CAAiBpM,IAAjB;;;QAEEoK,WAAW,GAAGrD,kBAAlB,EAAsCuI,KAAK,CAACyqB,KAAN,CAAY3tB,IAAZ,CAAiBpM,IAAjB;QAClCoK,WAAW,GAAGpD,wBAAlB,EAA4CsI,KAAK,CAAC0qB,UAAN,CAAiB5tB,IAAjB,CAAsBpM,IAAtB;QACxCoK,WAAW,GAAGtD,gBAAlB,EAAoCwI,KAAK,CAAC2qB,OAAN,CAAc7tB,IAAd,CAAmBpM,IAAnB;;;EAGtC45B,mBAAmB,CACjBtqB,KADiB,EAEjBtP,IAFiB,EAGjBoK,WAHiB,EAIR;QACLkF,KAAK,CAACyqB,KAAN,CAAYzhB,OAAZ,CAAoBtY,IAApB,IAA4B,CAAC,CAAjC,EAAoC;UAC9BoK,WAAW,GAAGrD,kBAAlB,EAAsC;cAG9BqzB,OAAO,GAAG,CAAC,EAAEhwB,WAAW,GAAGpD,wBAAhB,CAAjB;cACMqzB,QAAQ,GAAG/qB,KAAK,CAAC0qB,UAAN,CAAiB1hB,OAAjB,CAAyBtY,IAAzB,IAAiC,CAAC,CAAnD;eACOo6B,OAAO,KAAKC,QAAnB;;;aAEK,IAAP;;;QAEEjwB,WAAW,GAAGtD,gBAAd,IAAkCwI,KAAK,CAAC2qB,OAAN,CAAc3hB,OAAd,CAAsBtY,IAAtB,IAA8B,CAAC,CAArE,EAAwE;UAClEsP,KAAK,CAACopB,OAAN,CAAcpgB,OAAd,CAAsBtY,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;eAE7B,CAAC,EAAEoK,WAAW,GAAG7D,eAAhB,CAAR;OAFF,MAGO;eAEE,KAAP;;;;QAGA6D,WAAW,GAAG5D,cAAd,IAAgC8I,KAAK,CAACjP,KAAN,CAAYiY,OAAZ,CAAoBtY,IAApB,IAA4B,CAAC,CAAjE,EAAoE;aAC3D,IAAP;;;WAGK,MAAM45B,mBAAN,CAA0B,GAAGxa,SAA7B,CAAP;;;EAGFya,gBAAgB,CAACjlB,EAAD,EAAmB;QAE/B,KAAKikB,UAAL,CAAgB,CAAhB,EAAmBx4B,KAAnB,CAAyBiY,OAAzB,CAAiC1D,EAAE,CAAC5U,IAApC,MAA8C,CAAC,CAA/C,IACA,KAAK64B,UAAL,CAAgB,CAAhB,EAAmBqB,kBAAnB,CAAsC5hB,OAAtC,CAA8C1D,EAAE,CAAC5U,IAAjD,MAA2D,CAAC,CAF9D,EAGE;YACM65B,gBAAN,CAAuBjlB,EAAvB;;;;;;ACxEN,SAAS0lB,OAAT,CAAoBC,CAApB,EAA8B;MACxBA,CAAC,IAAI,IAAT,EAAe;UAEP,IAAIjnB,KAAJ,CAAW,cAAainB,CAAE,SAA1B,CAAN;;;SAEKA,CAAP;;;AAGF,SAASC,MAAT,CAAgBD,CAAhB,EAAkC;MAC5B,CAACA,CAAL,EAAQ;UACA,IAAIjnB,KAAJ,CAAU,aAAV,CAAN;;;;AAYJ,SAASmnB,mBAAT,CACE9xB,KADF,EAE0C;UAChCA,KAAR;SACO,KAAL;aACS,cAAP;;SACG,SAAL;aACS,kBAAP;;SACG,QAAL;aACS,iBAAP;;SACG,OAAL;aACS,gBAAP;;SACG,QAAL;aACS,iBAAP;;SACG,QAAL;aACS,iBAAP;;SACG,QAAL;aACS,iBAAP;;SACG,QAAL;aACS,iBAAP;;SACG,WAAL;aACS,oBAAP;;SACG,SAAL;aACS,kBAAP;;;aAEOkK,SAAP;;;;AAIN,kBAAgB1K,UAAD,IACb,cAAcA,UAAd,CAAyB;EACvBuyB,eAAe,GAAkC;WACxCP,sBAAP;;;EAGFQ,cAAc,GAAY;WAGjB,KAAKnmB,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAP;;;EAGF46B,4BAA4B,GAAG;SAKxBlpB,IAAL;WAEE,CAAC,KAAKmpB,qBAAL,EAAD,IACA,CAAC,KAAKrmB,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CADD,IAEA,CAAC,KAAKuT,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAFD,IAGA,CAAC,KAAKsT,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAHD,IAIA,CAAC,KAAKmT,KAAL,CAAWhI,KAAE,CAACtK,EAAd,CAJD,IAKA,CAAC,KAAKsS,KAAL,CAAWhI,KAAE,CAAChL,QAAd,CALD,IAMA,CAAC,KAAKgT,KAAL,CAAWhI,KAAE,CAACnK,IAAd,CAPH;;;EAYFy4B,eAAe,CAAgBC,gBAAhB,EAA2C;QACpD,CAAC,KAAKvmB,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAL,EAA0B;aACjB6S,SAAP;;;UAGImoB,QAAQ,GAAG,KAAKzuB,KAAL,CAAW5D,KAA5B;;QAEEoyB,gBAAgB,CAACziB,OAAjB,CAAyB0iB,QAAzB,MAAuC,CAAC,CAAxC,IACA,KAAKC,UAAL,CAAgB,KAAKL,4BAAL,CAAkCM,IAAlC,CAAuC,IAAvC,CAAhB,CAFF,EAGE;aACOF,QAAP;;;WAEKnoB,SAAP;;;EAGFsoB,kBAAkB,CAAClzB,IAAD,EAAgC;YACxCA,IAAR;WACO,aAAL;WACK,aAAL;eACS,KAAKuM,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAP;;WACG,uBAAL;eACS,KAAKyT,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAP;;WACG,mBAAL;eACS,KAAK2T,KAAL,CAAWhI,KAAE,CAAC5L,QAAd,CAAP;;WACG,2BAAL;eACS,KAAKoU,YAAL,CAAkB,GAAlB,CAAP;;;UAGE,IAAI1B,KAAJ,CAAU,aAAV,CAAN;;;EAGF8nB,WAAW,CAAYnzB,IAAZ,EAAkCozB,YAAlC,EAA8D;UACjE5c,MAAW,GAAG,EAApB;;WACO,CAAC,KAAK0c,kBAAL,CAAwBlzB,IAAxB,CAAR,EAAuC;MAErCwW,MAAM,CAACrS,IAAP,CAAYivB,YAAY,EAAxB;;;WAEK5c,MAAP;;;EAGF6c,oBAAoB,CAClBrzB,IADkB,EAElBozB,YAFkB,EAGb;WACEf,OAAO,CACZ,KAAKiB,0BAAL,CACEtzB,IADF,EAEEozB,YAFF,EAGsB,IAHtB,CADY,CAAd;;;EAaFE,0BAA0B,CACxBtzB,IADwB,EAExBozB,YAFwB,EAGxBG,aAHwB,EAIhB;UACF/c,MAAM,GAAG,EAAf;;WAEO,IAAP,EAAa;UACP,KAAK0c,kBAAL,CAAwBlzB,IAAxB,CAAJ,EAAmC;;;;YAI7BwzB,OAAO,GAAGJ,YAAY,EAA5B;;UACII,OAAO,IAAI,IAAf,EAAqB;eACZ5oB,SAAP;;;MAEF4L,MAAM,CAACrS,IAAP,CAAYqvB,OAAZ;;UAEI,KAAKrnB,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAJ,EAAwB;;;;UAIpB,KAAKg6B,kBAAL,CAAwBlzB,IAAxB,CAAJ,EAAmC;;;;UAI/BuzB,aAAJ,EAAmB;aAEZ7nB,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;aAEK0R,SAAP;;;WAGK4L,MAAP;;;EAGFid,oBAAoB,CAClBzzB,IADkB,EAElBozB,YAFkB,EAGlBM,OAHkB,EAIlBC,cAJkB,EAKb;QACD,CAACA,cAAL,EAAqB;UACfD,OAAJ,EAAa;aACNhoB,MAAL,CAAYnH,KAAE,CAAC7L,QAAf;OADF,MAEO;aACA4Y,gBAAL,CAAsB,GAAtB;;;;UAIEkF,MAAM,GAAG,KAAK6c,oBAAL,CAA0BrzB,IAA1B,EAAgCozB,YAAhC,CAAf;;QAEIM,OAAJ,EAAa;WACNhoB,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;KADF,MAEO;WACA2Y,gBAAL,CAAsB,GAAtB;;;WAGKkF,MAAP;;;EAGFod,iBAAiB,GAAmB;UAC5B9zB,IAAoB,GAAG,KAAKkF,SAAL,EAA7B;SACK0G,MAAL,CAAYnH,KAAE,CAACxH,OAAf;SACK2O,MAAL,CAAYnH,KAAE,CAACvL,MAAf;;QACI,CAAC,KAAKuT,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAL,EAA4B;YACpB,KAAKqV,UAAL,CACJ,IADI,EAEJ,oDAFI,CAAN;;;IAOF/N,IAAI,CAACoT,QAAL,GAAgB,KAAK9O,aAAL,EAAhB;SACKsH,MAAL,CAAYnH,KAAE,CAACtL,MAAf;;QAEI,KAAKkT,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAJ,EAAsB;MACpBwG,IAAI,CAAC+zB,SAAL,GAAiB,KAAKC,iBAAL,CAAgD,IAAhD,CAAjB;;;QAEE,KAAK/mB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK6vB,oBAAL,EAAtB;;;WAEK,KAAK9uB,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGFg0B,iBAAiB,CAACE,kBAAD,EAA8C;QACzDzF,MAAsB,GAAG,KAAK3hB,eAAL,EAA7B;;WACO,KAAKT,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAP,EAAyB;YACjBwG,IAAuB,GAAG,KAAKm0B,eAAL,CAAqB1F,MAArB,CAAhC;MACAzuB,IAAI,CAAC+Y,IAAL,GAAY0V,MAAZ;MACAzuB,IAAI,CAAC0Q,KAAL,GAAa,KAAK5D,eAAL,CAAqBonB,kBAArB,CAAb;MACAzF,MAAM,GAAG,KAAKtpB,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAT;;;WAEKyuB,MAAP;;;EAGF2F,oBAAoB,GAAsB;UAClCp0B,IAAuB,GAAG,KAAKkF,SAAL,EAAhC;IACAlF,IAAI,CAACq0B,QAAL,GAAgB,KAAKL,iBAAL,CAAgD,KAAhD,CAAhB;;QACI,CAAC,KAAKlB,qBAAL,EAAD,IAAiC,KAAK7lB,YAAL,CAAkB,GAAlB,CAArC,EAA6D;MAC3DjN,IAAI,CAACoE,cAAL,GAAsB,KAAK6vB,oBAAL,EAAtB;;;WAEK,KAAK9uB,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFs0B,wBAAwB,CAACC,GAAD,EAAuC;SACxD5qB,IAAL;UACM3J,IAAuB,GAAG,KAAKm0B,eAAL,CAAqBI,GAArB,CAAhC;IACAv0B,IAAI,CAACw0B,aAAL,GAAqBD,GAArB;IACAv0B,IAAI,CAACuN,cAAL,GAAsB,KAAKknB,qBAAL,CAA0C,KAA1C,CAAtB;WACO,KAAKtvB,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGF00B,mBAAmB,GAAiB;UAC5B10B,IAAkB,GAAG,KAAKkF,SAAL,EAA3B;SACKyE,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,YAAtB,CAAP;;;EAGF20B,gBAAgB,GAAkB;UAC1B30B,IAAmB,GAAG,KAAKkF,SAAL,EAA5B;SACK0G,MAAL,CAAYnH,KAAE,CAAClH,OAAf;;QACI,KAAKkP,KAAL,CAAWhI,KAAE,CAACxH,OAAd,CAAJ,EAA4B;MAC1B+C,IAAI,CAAC40B,QAAL,GAAgB,KAAKd,iBAAL,EAAhB;KADF,MAEO;MACL9zB,IAAI,CAAC40B,QAAL,GAAgB,KAAKZ,iBAAL,CAAgD,IAAhD,CAAhB;;;WAEK,KAAK7uB,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;;EAGF60B,oBAAoB,GAAsB;UAClC70B,IAAuB,GAAG,KAAKkF,SAAL,EAAhC;IACAlF,IAAI,CAAC/H,IAAL,GAAY,KAAK68B,mBAAL,CAAyB90B,IAAI,CAACmB,KAA9B,CAAZ;IACAnB,IAAI,CAAC+0B,UAAL,GAAkB,KAAKC,kBAAL,CAAwBvwB,KAAE,CAAC1H,QAA3B,CAAlB;IACAiD,IAAI,CAAC8O,OAAL,GAAe,KAAKkmB,kBAAL,CAAwBvwB,KAAE,CAACtK,EAA3B,CAAf;WACO,KAAKgL,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFi1B,wBAAwB,GAAkC;QACpD,KAAKhoB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;aACnB,KAAKioB,qBAAL,EAAP;;;;EAIJA,qBAAqB,GAAG;UAChBl1B,IAAkC,GAAG,KAAKkF,SAAL,EAA3C;;QAEI,KAAK+H,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWhI,KAAE,CAAC4M,WAAd,CAA9B,EAA0D;WACnD1H,IAAL;KADF,MAEO;WACAoE,UAAL;;;IAGF/N,IAAI,CAACgC,MAAL,GAAc,KAAK2xB,oBAAL,CACZ,2BADY,EAEZ,KAAKkB,oBAAL,CAA0B1B,IAA1B,CAA+B,IAA/B,CAFY,EAGE,KAHF,EAIS,IAJT,CAAd;WAMO,KAAKhuB,UAAL,CAAgBnF,IAAhB,EAAsB,4BAAtB,CAAP;;;EAGFm1B,6BAA6B,GAAuB;QAC9C,KAAKjjB,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACjI,MAAjC,EAAyC;WAClCmN,IAAL;aACO,KAAKyqB,oBAAL,EAAP;;;WAEK,IAAP;;;EAKFgB,eAAe,CACbC,WADa,EAEbC,SAFa,EAGP;UAEAC,mBAAmB,GAAGF,WAAW,KAAK5wB,KAAE,CAAC9K,KAA/C;IACA27B,SAAS,CAAClxB,cAAV,GAA2B,KAAK6wB,wBAAL,EAA3B;SACKrpB,MAAL,CAAYnH,KAAE,CAACvL,MAAf;IACAo8B,SAAS,CAACE,UAAV,GAAuB,KAAKC,8BAAL,EAAvB;;QACIF,mBAAJ,EAAyB;MACvBD,SAAS,CAAC/nB,cAAV,GAA2B,KAAKmoB,oCAAL,CACzBL,WADyB,CAA3B;KADF,MAIO,IAAI,KAAK5oB,KAAL,CAAW4oB,WAAX,CAAJ,EAA6B;MAClCC,SAAS,CAAC/nB,cAAV,GAA2B,KAAKmoB,oCAAL,CACzBL,WADyB,CAA3B;;;;EAMJI,8BAA8B,GAE5B;WACO,KAAKE,gBAAL,CAAsBlxB,KAAE,CAACtL,MAAzB,EAAiCyK,GAAjC,CAAqCtD,OAAO,IAAI;UAEnDA,OAAO,CAACL,IAAR,KAAiB,YAAjB,IACAK,OAAO,CAACL,IAAR,KAAiB,aADjB,IAEAK,OAAO,CAACL,IAAR,KAAiB,eAFjB,IAGAK,OAAO,CAACL,IAAR,KAAiB,cAJnB,EAKE;cACM,KAAK8N,UAAL,CACJzN,OAAO,CAACa,KADJ,EAEH,yFACCb,OAAO,CAACL,IACT,EAJG,CAAN;;;aAOKK,OAAP;KAdK,CAAP;;;EAkBFs1B,0BAA0B,GAAS;QAC7B,CAAC,KAAKvpB,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAL,EAAyB;WAClBqU,SAAL;;;;EAIJooB,sBAAsB,CACpB31B,IADoB,EAEpBF,IAFoB,EAG8C;SAC7Do1B,eAAL,CAAqB3wB,KAAE,CAACnL,KAAxB,EAA+B0G,IAA/B;SACK41B,0BAAL;WACO,KAAKzwB,UAAL,CAAgBnF,IAAhB,EAAsBE,IAAtB,CAAP;;;EAGF41B,+BAA+B,GAAG;SAC3BnsB,IAAL;WACO,KAAK0C,GAAL,CAAS5H,KAAE,CAACxM,IAAZ,KAAqB,KAAKwU,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAA5B;;;EAGFy8B,wBAAwB,CAAC/1B,IAAD,EAAgD;QAEpE,EACE,KAAKyM,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,KACA,KAAKo9B,WAAL,CAAiB,KAAKF,+BAAL,CAAqC3C,IAArC,CAA0C,IAA1C,CAAjB,CAFF,CADF,EAKE;aACOroB,SAAP;;;SAGGc,MAAL,CAAYnH,KAAE,CAAC7L,QAAf;UACMiU,EAAE,GAAG,KAAKC,eAAL,EAAX;IACAD,EAAE,CAACU,cAAH,GAAoB,KAAKknB,qBAAL,EAApB;SACKjnB,gBAAL,CAAsBX,EAAtB;SAEKjB,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;IACAmH,IAAI,CAACw1B,UAAL,GAAkB,CAAC3oB,EAAD,CAAlB;UAEM5M,IAAI,GAAG,KAAKg2B,wBAAL,EAAb;QACIh2B,IAAJ,EAAUD,IAAI,CAACuN,cAAL,GAAsBtN,IAAtB;SACL21B,0BAAL;WACO,KAAKzwB,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;EAGFk2B,gCAAgC,CAC9Bl2B,IAD8B,EAE9Bm2B,QAF8B,EAGe;QACzC,KAAK9pB,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2BuG,IAAI,CAACoS,QAAL,GAAgB,IAAhB;UACrBgkB,OAAY,GAAGp2B,IAArB;;QAEI,CAACm2B,QAAD,KAAc,KAAK1pB,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,KAAK+T,YAAL,CAAkB,GAAlB,CAAvC,CAAJ,EAAoE;YAC5D9M,MAA2B,GAAGi2B,OAApC;WACKhB,eAAL,CAAqB3wB,KAAE,CAACnL,KAAxB,EAA+B6G,MAA/B;WACKy1B,0BAAL;aACO,KAAKzwB,UAAL,CAAgBhF,MAAhB,EAAwB,mBAAxB,CAAP;KAJF,MAKO;YACCmT,QAA+B,GAAG8iB,OAAxC;UACID,QAAJ,EAAc7iB,QAAQ,CAAC6iB,QAAT,GAAoB,IAApB;YACRl2B,IAAI,GAAG,KAAKg2B,wBAAL,EAAb;UACIh2B,IAAJ,EAAUqT,QAAQ,CAAC/F,cAAT,GAA0BtN,IAA1B;WACL21B,0BAAL;aACO,KAAKzwB,UAAL,CAAgBmO,QAAhB,EAA0B,qBAA1B,CAAP;;;;EAIJ+iB,iBAAiB,GAAoB;UAC7Br2B,IAAS,GAAG,KAAKkF,SAAL,EAAlB;;QAEI,KAAKuH,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,KAAK+T,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;aAC5C,KAAK4oB,sBAAL,CAA4B,4BAA5B,EAA0D71B,IAA1D,CAAP;;;QAGE,KAAKyM,KAAL,CAAWhI,KAAE,CAAC9H,IAAd,CAAJ,EAAyB;YACjBkQ,EAAgB,GAAG,KAAK3H,SAAL,EAAzB;WACKyE,IAAL;;UACI,KAAK8C,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,KAAK+T,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;eAC5C,KAAK4oB,sBAAL,CACL,iCADK,EAEL71B,IAFK,CAAP;OADF,MAKO;QACLA,IAAI,CAAC8C,GAAL,GAAW,KAAKmR,gBAAL,CAAsBpH,EAAtB,EAA0B,KAA1B,CAAX;eACO,KAAKqpB,gCAAL,CAAsCl2B,IAAtC,EAA4C,KAA5C,CAAP;;;;UAIEm2B,QAAQ,GAAG,CAAC,CAAC,KAAKpD,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAnB;UAEMuD,GAAG,GAAG,KAAKP,wBAAL,CAA8B/1B,IAA9B,CAAZ;;QACIs2B,GAAJ,EAAS;UACHH,QAAJ,EAAcn2B,IAAI,CAACm2B,QAAL,GAAgB,IAAhB;aACPG,GAAP;;;SAGG3d,iBAAL,CAAuB3Y,IAAvB;WACO,KAAKk2B,gCAAL,CAAsCl2B,IAAtC,EAA4Cm2B,QAA5C,CAAP;;;EAGFI,kBAAkB,GAAoB;UAC9Bv2B,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;IACAlF,IAAI,CAACw2B,OAAL,GAAe,KAAKC,wBAAL,EAAf;WACO,KAAKtxB,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFy2B,wBAAwB,GAAoC;SACrD7qB,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;UACM09B,OAAO,GAAG,KAAKnD,WAAL,CACd,aADc,EAEd,KAAKgD,iBAAL,CAAuBlD,IAAvB,CAA4B,IAA5B,CAFc,CAAhB;SAIKvnB,MAAL,CAAYnH,KAAE,CAACzL,MAAf;WACOw9B,OAAP;;;EAGFE,qBAAqB,GAAY;SAC1B/sB,IAAL;;QACI,KAAK0C,GAAL,CAAS5H,KAAE,CAACvJ,OAAZ,CAAJ,EAA0B;aACjB,KAAKgT,YAAL,CAAkB,UAAlB,CAAP;;;QAEE,KAAKA,YAAL,CAAkB,UAAlB,CAAJ,EAAmC;WAC5BvE,IAAL;;;QAEE,CAAC,KAAK8C,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CAAL,EAA8B;aACrB,KAAP;;;SAEG+Q,IAAL;;QACI,CAAC,KAAKipB,cAAL,EAAL,EAA4B;aACnB,KAAP;;;SAEGjpB,IAAL;WACO,KAAK8C,KAAL,CAAWhI,KAAE,CAACpH,GAAd,CAAP;;;EAGFs5B,0BAA0B,GAAsB;UACxC32B,IAAuB,GAAG,KAAKkF,SAAL,EAAhC;IACAlF,IAAI,CAAC/H,IAAL,GAAY,KAAK68B,mBAAL,CAAyB90B,IAAI,CAACmB,KAA9B,CAAZ;IACAnB,IAAI,CAAC+0B,UAAL,GAAkB,KAAK6B,qBAAL,CAA2BnyB,KAAE,CAACpH,GAA9B,CAAlB;WACO,KAAK8H,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGF62B,iBAAiB,GAAmB;UAC5B72B,IAAoB,GAAG,KAAKkF,SAAL,EAA7B;SAEK0G,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;;QAEI,KAAK2T,KAAL,CAAWhI,KAAE,CAACvJ,OAAd,CAAJ,EAA4B;MAC1B8E,IAAI,CAACm2B,QAAL,GAAgB,KAAK3xB,KAAL,CAAW5D,KAA3B;WACK+I,IAAL;WACKuC,gBAAL,CAAsB,UAAtB;KAHF,MAIO,IAAI,KAAK2B,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;MACzC7N,IAAI,CAACm2B,QAAL,GAAgB,IAAhB;;;SAGGvqB,MAAL,CAAYnH,KAAE,CAAC7L,QAAf;IACAoH,IAAI,CAACuR,aAAL,GAAqB,KAAKolB,0BAAL,EAArB;SACK/qB,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;;QAEI,KAAK4T,KAAL,CAAWhI,KAAE,CAACvJ,OAAd,CAAJ,EAA4B;MAC1B8E,IAAI,CAACoS,QAAL,GAAgB,KAAK5N,KAAL,CAAW5D,KAA3B;WACK+I,IAAL;WACKiC,MAAL,CAAYnH,KAAE,CAAChL,QAAf;KAHF,MAIO,IAAI,KAAK4S,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;MAChCuG,IAAI,CAACoS,QAAL,GAAgB,IAAhB;;;IAGFpS,IAAI,CAACuN,cAAL,GAAsB,KAAKupB,cAAL,EAAtB;SACKrpB,SAAL;SACK7B,MAAL,CAAYnH,KAAE,CAACzL,MAAf;WAEO,KAAKmM,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGF+2B,gBAAgB,GAAkB;UAC1B/2B,IAAmB,GAAG,KAAKkF,SAAL,EAA5B;IACAlF,IAAI,CAACg3B,YAAL,GAAoB,KAAKrD,oBAAL,CAClB,mBADkB,EAElB,KAAKsD,uBAAL,CAA6B9D,IAA7B,CAAkC,IAAlC,CAFkB,EAGJ,IAHI,EAIG,KAJH,CAApB;QAUI+D,mBAAmB,GAAG,KAA1B;IACAl3B,IAAI,CAACg3B,YAAL,CAAkBv0B,OAAlB,CAA0B00B,WAAW,IAAI;UACnCA,WAAW,CAACl3B,IAAZ,KAAqB,gBAAzB,EAA2C;QACzCi3B,mBAAmB,GAAG,IAAtB;OADF,MAEO,IAAIA,mBAAmB,IAAIC,WAAW,CAACl3B,IAAZ,KAAqB,YAAhD,EAA8D;aAC9DiC,KAAL,CACEi1B,WAAW,CAACh2B,KADd,EAEE,uDAFF;;KAJJ;WAWO,KAAKgE,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;;EAGFi3B,uBAAuB,GAAa;QAE9B,KAAKxqB,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;YACrBu9B,QAAsB,GAAG,KAAKlyB,SAAL,EAA/B;WACKyE,IAAL;MACAytB,QAAQ,CAAC7pB,cAAT,GAA0B,KAAK8pB,WAAL,EAA1B;WACKC,mBAAL;aACO,KAAKnyB,UAAL,CAAgBiyB,QAAhB,EAA0B,YAA1B,CAAP;;;UAGIn3B,IAAI,GAAG,KAAKo3B,WAAL,EAAb;;QAEI,KAAKhrB,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;YACnB89B,gBAAkC,GAAG,KAAKpD,eAAL,CAAqBl0B,IAArB,CAA3C;MACAs3B,gBAAgB,CAAChqB,cAAjB,GAAkCtN,IAAlC;aACO,KAAKkF,UAAL,CAAgBoyB,gBAAhB,EAAkC,gBAAlC,CAAP;;;WAEKt3B,IAAP;;;EAGFu3B,wBAAwB,GAA0B;UAC1Cx3B,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACK0G,MAAL,CAAYnH,KAAE,CAACvL,MAAf;IACA8G,IAAI,CAACuN,cAAL,GAAsB,KAAK8pB,WAAL,EAAtB;SACKzrB,MAAL,CAAYnH,KAAE,CAACtL,MAAf;WACO,KAAKgM,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAGFy3B,gCAAgC,CAC9Bx3B,IAD8B,EAEC;UACzBD,IAAmC,GAAG,KAAKkF,SAAL,EAA5C;;QACIjF,IAAI,KAAK,mBAAb,EAAkC;WAC3B2L,MAAL,CAAYnH,KAAE,CAAC9H,IAAf;;;SAEGy4B,eAAL,CAAqB3wB,KAAE,CAAC9K,KAAxB,EAA+BqG,IAA/B;WACO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;;;EAGFy3B,sBAAsB,GAAoB;UAClC13B,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;;IACAlF,IAAI,CAAC23B,OAAL,GAAe,CAAC,MAAM;cACZ,KAAKnzB,KAAL,CAAWvE,IAAnB;aACOwE,KAAE,CAAClM,GAAR;aACKkM,KAAE,CAAC/L,MAAR;aACK+L,KAAE,CAACtH,KAAR;aACKsH,KAAE,CAACrH,MAAR;iBAES,KAAKkH,aAAL,EAAP;;;gBAEM,KAAKyJ,UAAL,EAAN;;KATS,GAAf;;WAYO,KAAK5I,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGF43B,0BAA0B,GAAa;UAC/B53B,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;UACM2yB,YAAY,GAAG,KAAKC,aAAL,CAAmB,KAAnB,CAArB;;QACID,YAAY,CAACE,WAAb,CAAyB91B,MAAzB,GAAkC,CAAtC,EAAyC;YACjC,KAAKC,KAAL,CACJ21B,YAAY,CAACE,WAAb,CAAyB,CAAzB,EAA4B52B,KADxB,EAEJ,qDAFI,CAAN;;;IAKFnB,IAAI,CAAC23B,OAAL,GAAeE,YAAf;WACO,KAAK1yB,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFg4B,mBAAmB,GAAa;YACtB,KAAKxzB,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAACxM,IAAR;WACKwM,KAAE,CAACjH,KAAR;WACKiH,KAAE,CAACvH,KAAR;;gBACQ+C,IAAI,GAAG,KAAKwM,KAAL,CAAWhI,KAAE,CAACjH,KAAd,IACT,eADS,GAET,KAAKiP,KAAL,CAAWhI,KAAE,CAACvH,KAAd,IACA,eADA,GAEAw1B,mBAAmB,CAAC,KAAKluB,KAAL,CAAW5D,KAAZ,CAJvB;;cAKIX,IAAI,KAAK6K,SAAT,IAAsB,KAAKoH,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACjL,GAAvD,EAA4D;kBACpDwG,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;iBACKyE,IAAL;mBACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;;;iBAEK,KAAKm0B,oBAAL,EAAP;;;WAEG3vB,KAAE,CAAC/L,MAAR;WACK+L,KAAE,CAAClM,GAAR;WACKkM,KAAE,CAACtH,KAAR;WACKsH,KAAE,CAACrH,MAAR;eACS,KAAKs6B,sBAAL,EAAP;;WACGjzB,KAAE,CAACvJ,OAAR;YACM,KAAKsJ,KAAL,CAAW5D,KAAX,KAAqB,GAAzB,EAA8B;gBACtBZ,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;;cACI,KAAKgN,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAAClM,GAAjC,EAAsC;kBAC9B,KAAKwV,UAAL,EAAN;;;UAEF/N,IAAI,CAAC23B,OAAL,GAAe,KAAKM,eAAL,EAAf;iBACO,KAAK9yB,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;;;WAGCyE,KAAE,CAAC7H,KAAR;;gBACQs7B,WAAW,GAAG,KAAKxD,mBAAL,EAApB;;cACI,KAAKxmB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAK4kB,qBAAL,EAAhC,EAA8D;mBACrD,KAAKwB,wBAAL,CAA8B4D,WAA9B,CAAP;WADF,MAEO;mBACEA,WAAP;;;;WAGCzzB,KAAE,CAAClH,OAAR;eACS,KAAKo3B,gBAAL,EAAP;;WACGlwB,KAAE,CAACxH,OAAR;eACS,KAAK62B,iBAAL,EAAP;;WACGrvB,KAAE,CAAC3L,MAAR;eACS,KAAKk9B,WAAL,CAAiB,KAAKU,qBAAL,CAA2BvD,IAA3B,CAAgC,IAAhC,CAAjB,IACH,KAAK0D,iBAAL,EADG,GAEH,KAAKN,kBAAL,EAFJ;;WAGG9xB,KAAE,CAAC7L,QAAR;eACS,KAAKm+B,gBAAL,EAAP;;WACGtyB,KAAE,CAACvL,MAAR;eACS,KAAKs+B,wBAAL,EAAP;;WACG/yB,KAAE,CAAC3K,SAAR;eACS,KAAK89B,0BAAL,EAAP;;;UAGE,KAAK7pB,UAAL,EAAN;;;EAGFoqB,wBAAwB,GAAa;QAC/Bl4B,IAAI,GAAG,KAAK+3B,mBAAL,EAAX;;WACO,CAAC,KAAKlF,qBAAL,EAAD,IAAiC,KAAKzmB,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAxC,EAA+D;UACzD,KAAK6T,KAAL,CAAWhI,KAAE,CAAC5L,QAAd,CAAJ,EAA6B;cACrBmH,IAAmB,GAAG,KAAKm0B,eAAL,CAAqBl0B,IAArB,CAA5B;QACAD,IAAI,CAACoU,WAAL,GAAmBnU,IAAnB;aACK2L,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;QACAoH,IAAI,GAAG,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;OAJF,MAKO;cACCA,IAA2B,GAAG,KAAKm0B,eAAL,CAAqBl0B,IAArB,CAApC;QACAD,IAAI,CAACo4B,UAAL,GAAkBn4B,IAAlB;QACAD,IAAI,CAACq4B,SAAL,GAAiB,KAAKhB,WAAL,EAAjB;aACKzrB,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;QACAoH,IAAI,GAAG,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;;WAGGC,IAAP;;;EAGFq4B,mBAAmB,CACjBC,QADiB,EAEC;UACZv4B,IAAsB,GAAG,KAAKkF,SAAL,EAA/B;SACKgH,gBAAL,CAAsBqsB,QAAtB;IACAv4B,IAAI,CAACu4B,QAAL,GAAgBA,QAAhB;IACAv4B,IAAI,CAACuN,cAAL,GAAsB,KAAKirB,2BAAL,EAAtB;;QAEID,QAAQ,KAAK,UAAjB,EAA6B;WACtBE,gCAAL,CAAsCz4B,IAAtC;;;WAGK,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFy4B,gCAAgC,CAACz4B,IAAD,EAAe;YACrCA,IAAI,CAACuN,cAAL,CAAoBtN,IAA5B;WACO,aAAL;WACK,aAAL;;;;aAGOiC,KAAL,CACElC,IAAI,CAACmB,KADP,EAEE,8EAFF;;;;EAONu3B,gBAAgB,GAAkB;UAC1B14B,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKgH,gBAAL,CAAsB,OAAtB;UACMqF,aAAa,GAAG,KAAKrM,SAAL,EAAtB;IACAqM,aAAa,CAACtZ,IAAd,GAAqB,KAAK68B,mBAAL,CAAyBvjB,aAAa,CAACpQ,KAAvC,CAArB;IACAnB,IAAI,CAACuR,aAAL,GAAqB,KAAKpM,UAAL,CAAgBoM,aAAhB,EAA+B,iBAA/B,CAArB;WACO,KAAKpM,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;;EAGFw4B,2BAA2B,GAAa;UAChCD,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgCI,IAAhC,CAAqCC,EAAE,IACtD,KAAK1qB,YAAL,CAAkB0qB,EAAlB,CADe,CAAjB;WAGOL,QAAQ,GACX,KAAKD,mBAAL,CAAyBC,QAAzB,CADW,GAEX,KAAKrqB,YAAL,CAAkB,OAAlB,IACA,KAAKwqB,gBAAL,EADA,GAEA,KAAKP,wBAAL,EAJJ;;;EAOFU,8BAA8B,CAC5B34B,IAD4B,EAE5B44B,oBAF4B,EAG5BP,QAH4B,EAIlB;SACLlsB,GAAL,CAASksB,QAAT;QACIt4B,IAAI,GAAG64B,oBAAoB,EAA/B;;QACI,KAAKrsB,KAAL,CAAW8rB,QAAX,CAAJ,EAA0B;YAClBjgC,KAAK,GAAG,CAAC2H,IAAD,CAAd;;aACO,KAAKoM,GAAL,CAASksB,QAAT,CAAP,EAA2B;QACzBjgC,KAAK,CAAC+L,IAAN,CAAWy0B,oBAAoB,EAA/B;;;YAEI94B,IAA0C,GAAG,KAAKm0B,eAAL,CACjDl0B,IADiD,CAAnD;MAGAD,IAAI,CAAC1H,KAAL,GAAaA,KAAb;MACA2H,IAAI,GAAG,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsBE,IAAtB,CAAP;;;WAEKD,IAAP;;;EAGF84B,+BAA+B,GAAa;WACnC,KAAKF,8BAAL,CACL,oBADK,EAEL,KAAKL,2BAAL,CAAiCrF,IAAjC,CAAsC,IAAtC,CAFK,EAGL1uB,KAAE,CAAC3J,UAHE,CAAP;;;EAOFk+B,wBAAwB,GAAG;WAClB,KAAKH,8BAAL,CACL,aADK,EAEL,KAAKE,+BAAL,CAAqC5F,IAArC,CAA0C,IAA1C,CAFK,EAGL1uB,KAAE,CAAC7J,SAHE,CAAP;;;EAOFq+B,uBAAuB,GAAG;QACpB,KAAKhsB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;aACnB,IAAP;;;WAGA,KAAKR,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KACA,KAAK88B,WAAL,CAAiB,KAAKkD,oCAAL,CAA0C/F,IAA1C,CAA+C,IAA/C,CAAjB,CAFF;;;EAMFgG,oBAAoB,GAAY;QAC1B,KAAK1sB,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KAAuB,KAAKwU,KAAL,CAAWhI,KAAE,CAAC7H,KAAd,CAA3B,EAAiD;WAC1C+M,IAAL;aACO,IAAP;;;QAGE,KAAK8C,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;UACrBsgC,iBAAiB,GAAG,CAAxB;WACKzvB,IAAL;;aAEOyvB,iBAAiB,GAAG,CAA3B,EAA8B;YACxB,KAAK3sB,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;YACvBsgC,iBAAF;SADF,MAEO,IAAI,KAAK3sB,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAJ,EAA2B;YAC9BogC,iBAAF;;;aAEGzvB,IAAL;;;aAEK,IAAP;;;QAGE,KAAK8C,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CAAJ,EAA6B;UACvBwgC,iBAAiB,GAAG,CAAxB;WACKzvB,IAAL;;aAEOyvB,iBAAiB,GAAG,CAA3B,EAA8B;YACxB,KAAK3sB,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CAAJ,EAA6B;YACzBwgC,iBAAF;SADF,MAEO,IAAI,KAAK3sB,KAAL,CAAWhI,KAAE,CAAC5L,QAAd,CAAJ,EAA6B;YAChCugC,iBAAF;;;aAEGzvB,IAAL;;;aAEK,IAAP;;;WAGK,KAAP;;;EAGFuvB,oCAAoC,GAAY;SACzCvvB,IAAL;;QACI,KAAK8C,KAAL,CAAWhI,KAAE,CAACtL,MAAd,KAAyB,KAAKsT,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAA7B,EAAsD;aAG7C,IAAP;;;QAEE,KAAKs/B,oBAAL,EAAJ,EAAiC;UAE7B,KAAK1sB,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KACA,KAAKmT,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CADA,IAEA,KAAKqT,KAAL,CAAWhI,KAAE,CAAChL,QAAd,CAFA,IAGA,KAAKgT,KAAL,CAAWhI,KAAE,CAACtK,EAAd,CAJF,EAKE;eAKO,IAAP;;;UAEE,KAAKsS,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAJ,EAA2B;aACpBwQ,IAAL;;YACI,KAAK8C,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,CAAJ,EAA0B;iBAEjB,IAAP;;;;;WAIC,KAAP;;;EAGF+7B,oCAAoC,CAClCL,WADkC,EAEd;WACb,KAAKgE,QAAL,CAAc,MAAM;YACnBC,CAAqB,GAAG,KAAKp0B,SAAL,EAA9B;WACK0G,MAAL,CAAYypB,WAAZ;YAEMkE,qBAAqB,GACzB,KAAK3G,cAAL,MACA,KAAKM,UAAL,CAAgB,KAAKsG,0BAAL,CAAgCrG,IAAhC,CAAqC,IAArC,CAAhB,CAFF;;UAII,CAACoG,qBAAL,EAA4B;eACnB,KAAK9E,qBAAL,CAA0C,KAA1C,EAAiD6E,CAAjD,CAAP;;;YAGIr5B,IAAI,GAAG,KAAKw0B,qBAAL,CAA0C,KAA1C,CAAb;YAEMz0B,IAAuB,GAAG,KAAKm0B,eAAL,CAC9BoF,qBAD8B,CAAhC;MAGAv5B,IAAI,CAACw0B,aAAL,GAAqB+E,qBAArB;MACAv5B,IAAI,CAACuN,cAAL,GAAsBtN,IAAtB;MACAq5B,CAAC,CAAC/rB,cAAF,GAAmB,KAAKpI,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAnB;aACO,KAAKmF,UAAL,CAAgBm0B,CAAhB,EAAmB,kBAAnB,CAAP;KApBK,CAAP;;;EAwBFG,uCAAuC,GAAwB;WACtD,KAAKhtB,KAAL,CAAWhI,KAAE,CAACnL,KAAd,IACH,KAAKo8B,oCAAL,CAA0CjxB,KAAE,CAACnL,KAA7C,CADG,GAEHwR,SAFJ;;;EAKFmrB,wBAAwB,GAAwB;WACvC,KAAKxpB,KAAL,CAAWhI,KAAE,CAACnL,KAAd,IAAuB,KAAKm7B,qBAAL,EAAvB,GAAsD3pB,SAA7D;;;EAGFgsB,cAAc,GAAc;WACnB,KAAK9B,kBAAL,CAAwBvwB,KAAE,CAACnL,KAA3B,CAAP;;;EAGFkgC,0BAA0B,GAAkB;UACpC3sB,EAAE,GAAG,KAAKC,eAAL,EAAX;;QACI,KAAKoB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAK4kB,qBAAL,EAAhC,EAA8D;WACvDnpB,IAAL;aACOkD,EAAP;;;;EAIJ4nB,qBAAqB,CACnBiF,QAAQ,GAAG,IADQ,EAEnBJ,CAAqB,GAAG,KAAKp0B,SAAL,EAFL,EAGC;SACfm0B,QAAL,CAAc,MAAM;UACdK,QAAJ,EAAc,KAAK9tB,MAAL,CAAYnH,KAAE,CAACnL,KAAf;MACdggC,CAAC,CAAC/rB,cAAF,GAAmB,KAAK8pB,WAAL,EAAnB;KAFF;WAIO,KAAKlyB,UAAL,CAAgBm0B,CAAhB,EAAmB,kBAAnB,CAAP;;;EAIFjC,WAAW,GAAa;IAEtB5E,MAAM,CAAC,KAAKjuB,KAAL,CAAWmH,MAAZ,CAAN;UACM1L,IAAI,GAAG,KAAK05B,yBAAL,EAAb;;QACI,KAAK7G,qBAAL,MAAgC,CAAC,KAAKzmB,GAAL,CAAS5H,KAAE,CAAC1H,QAAZ,CAArC,EAA4D;aACnDkD,IAAP;;;UAEID,IAAyB,GAAG,KAAKm0B,eAAL,CAAqBl0B,IAArB,CAAlC;IACAD,IAAI,CAAC45B,SAAL,GAAiB35B,IAAjB;IACAD,IAAI,CAAC65B,WAAL,GAAmB,KAAKF,yBAAL,EAAnB;SACK/tB,MAAL,CAAYnH,KAAE,CAAChL,QAAf;IACAuG,IAAI,CAAC85B,QAAL,GAAgB,KAAKzC,WAAL,EAAhB;SACKzrB,MAAL,CAAYnH,KAAE,CAACnL,KAAf;IACA0G,IAAI,CAAC+5B,SAAL,GAAiB,KAAK1C,WAAL,EAAjB;WACO,KAAKlyB,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGF25B,yBAAyB,GAAa;QAChC,KAAKV,uBAAL,EAAJ,EAAoC;aAC3B,KAAKxB,gCAAL,CAAsC,gBAAtC,CAAP;;;QAEE,KAAKhrB,KAAL,CAAWhI,KAAE,CAAC9H,IAAd,CAAJ,EAAyB;aAEhB,KAAK86B,gCAAL,CAAsC,mBAAtC,CAAP;;;WAEK,KAAKuB,wBAAL,EAAP;;;EAGFgB,oBAAoB,GAAsB;UAClCh6B,IAAuB,GAAG,KAAKkF,SAAL,EAAhC;;UACM1I,MAAM,GAAG,KAAK24B,6BAAL,EAAf;;IACAn1B,IAAI,CAACuN,cAAL,GAAsB/Q,MAAM,IAAI,KAAKy9B,mBAAL,EAAhC;SACKzoB,gBAAL,CAAsB,GAAtB;IACAxR,IAAI,CAACqB,UAAL,GAAkB,KAAK42B,eAAL,EAAlB;WACO,KAAK9yB,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFk6B,qBAAqB,CACnBC,UADmB,EAE8B;UAC3CC,aAAa,GAAG,KAAK51B,KAAL,CAAWrD,KAAjC;UAEMk5B,aAAa,GAAG,KAAK9G,oBAAL,CACpB,uBADoB,EAEpB,KAAK+G,kCAAL,CAAwCnH,IAAxC,CAA6C,IAA7C,CAFoB,CAAtB;;QAKI,CAACkH,aAAa,CAACp4B,MAAnB,EAA2B;WACpBC,KAAL,CAAWk4B,aAAX,EAA2B,IAAGD,UAAW,yBAAzC;;;WAGKE,aAAP;;;EAGFC,kCAAkC,GAAoC;UAC9Dt6B,IAAqC,GAAG,KAAKkF,SAAL,EAA9C;IAGAlF,IAAI,CAACqB,UAAL,GAAkB,KAAK2yB,iBAAL,CAAgD,KAAhD,CAAlB;;QACI,KAAK/mB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;MAC1BjN,IAAI,CAACoE,cAAL,GAAsB,KAAK6vB,oBAAL,EAAtB;;;WAGK,KAAK9uB,UAAL,CAAgBnF,IAAhB,EAAsB,+BAAtB,CAAP;;;EAGFu6B,2BAA2B,CACzBv6B,IADyB,EAEC;IAC1BA,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;SACK3K,SAAL,CACEnC,IAAI,CAAC6M,EADP,EAEEtN,iBAFF,EAGEuL,SAHF,EAIE,kCAJF;IAMA9K,IAAI,CAACoE,cAAL,GAAsB,KAAK6wB,wBAAL,EAAtB;;QACI,KAAK5oB,GAAL,CAAS5H,KAAE,CAAC1H,QAAZ,CAAJ,EAA2B;MACzBiD,IAAI,CAACwP,OAAL,GAAe,KAAK0qB,qBAAL,CAA2B,SAA3B,CAAf;;;UAEI/2B,IAAuB,GAAG,KAAK+B,SAAL,EAAhC;IACA/B,IAAI,CAACA,IAAL,GAAY,KAAKk2B,QAAL,CAAc,KAAK5C,wBAAL,CAA8BtD,IAA9B,CAAmC,IAAnC,CAAd,CAAZ;IACAnzB,IAAI,CAACmD,IAAL,GAAY,KAAKgC,UAAL,CAAgBhC,IAAhB,EAAsB,iBAAtB,CAAZ;WACO,KAAKgC,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGFw6B,2BAA2B,CACzBx6B,IADyB,EAEC;IAC1BA,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;SACK3K,SAAL,CAAenC,IAAI,CAAC6M,EAApB,EAAwBrN,YAAxB,EAAsCsL,SAAtC,EAAiD,uBAAjD;IAEA9K,IAAI,CAACoE,cAAL,GAAsB,KAAK6wB,wBAAL,EAAtB;IACAj1B,IAAI,CAACuN,cAAL,GAAsB,KAAKqpB,qBAAL,CAA2BnyB,KAAE,CAACtK,EAA9B,CAAtB;SACKsT,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGFy6B,aAAa,CAAIC,EAAJ,EAAoB;UACzBC,UAAU,GAAG,KAAKn2B,KAAL,CAAWwC,OAA9B;SACKxC,KAAL,CAAWwC,OAAX,GAAqB,CAAC2zB,UAAU,CAAC,CAAD,CAAX,CAArB;;QACI;aACKD,EAAE,EAAT;KADF,SAEU;WACHl2B,KAAL,CAAWwC,OAAX,GAAqB2zB,UAArB;;;;EASJtB,QAAQ,CAAIqB,EAAJ,EAAoB;UACpBhvB,SAAS,GAAG,KAAKlH,KAAL,CAAWmH,MAA7B;SACKnH,KAAL,CAAWmH,MAAX,GAAoB,IAApB;;QACI;aACK+uB,EAAE,EAAT;KADF,SAEU;WACHl2B,KAAL,CAAWmH,MAAX,GAAoBD,SAApB;;;;EAIJspB,kBAAkB,CAAC78B,KAAD,EAAgD;WACzD,CAAC,KAAKsU,KAAL,CAAWtU,KAAX,CAAD,GAAqB2S,SAArB,GAAiC,KAAKmvB,mBAAL,EAAxC;;;EAGFrD,qBAAqB,CAACz+B,KAAD,EAA6B;WACzC,KAAKyiC,iBAAL,CAAuB,MAAM,KAAKhvB,MAAL,CAAYzT,KAAZ,CAA7B,CAAP;;;EAGF8hC,mBAAmB,GAAa;WACvB,KAAKW,iBAAL,CAAuB,MAAM,KAAKjxB,IAAL,EAA7B,CAAP;;;EAGFixB,iBAAiB,CAACF,EAAD,EAA2B;WACnC,KAAKrB,QAAL,CAAc,MAAM;MACzBqB,EAAE;aACK,KAAKrD,WAAL,EAAP;KAFK,CAAP;;;EAMFwD,iBAAiB,GAAmB;UAC5B76B,IAAoB,GAAG,KAAKkF,SAAL,EAA7B;IAEAlF,IAAI,CAAC6M,EAAL,GAAU,KAAKJ,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,IACN,KAAK4L,aAAL,EADM,GAEN,KAAKwI,eAAL,CAAmC,IAAnC,CAFJ;;QAGI,KAAKT,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,CAAJ,EAAqB;MACnB6F,IAAI,CAAC86B,WAAL,GAAmB,KAAK5kB,gBAAL,EAAnB;;;WAEK,KAAK/Q,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGF+6B,sBAAsB,CACpB/6B,IADoB,EAEpBqyB,OAFoB,EAGC;QACjBA,OAAJ,EAAaryB,IAAI,CAACqK,KAAL,GAAa,IAAb;IACbrK,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;SACK3K,SAAL,CACEnC,IAAI,CAAC6M,EADP,EAEEwlB,OAAO,GAAGxyB,kBAAH,GAAwBJ,YAFjC,EAGEqL,SAHF,EAIE,6BAJF;SAOKc,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;IACAkH,IAAI,CAACw2B,OAAL,GAAe,KAAKjD,oBAAL,CACb,aADa,EAEb,KAAKsH,iBAAL,CAAuB1H,IAAvB,CAA4B,IAA5B,CAFa,CAAf;SAIKvnB,MAAL,CAAYnH,KAAE,CAACzL,MAAf;WACO,KAAKmM,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGFg7B,kBAAkB,GAAoB;UAC9Bh7B,IAAqB,GAAG,KAAKkF,SAAL,EAA9B;SACKqC,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;SAEKkO,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;SAEKmiC,2BAAL,CACGj7B,IAAI,CAACmD,IAAL,GAAY,EADf,EAEmB2H,SAFnB,EAGiB,IAHjB,EAIYrG,KAAE,CAACzL,MAJf;SAMKuO,KAAL,CAAWoH,IAAX;WACO,KAAKxJ,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFk7B,mCAAmC,CACjCl7B,IADiC,EAEjCm7B,MAAgB,GAAG,KAFc,EAGV;IACvBn7B,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;;QAEI,CAACquB,MAAL,EAAa;WACNh5B,SAAL,CACEnC,IAAI,CAAC6M,EADP,EAEE/M,iBAFF,EAGE,IAHF,EAIE,iCAJF;;;QAQE,KAAKuM,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAJ,EAAsB;YACd4hC,KAAK,GAAG,KAAKl2B,SAAL,EAAd;WACKg2B,mCAAL,CAAyCE,KAAzC,EAAgD,IAAhD;MACAp7B,IAAI,CAACmD,IAAL,GAAYi4B,KAAZ;KAHF,MAIO;MACLp7B,IAAI,CAACmD,IAAL,GAAY,KAAK63B,kBAAL,EAAZ;;;WAEK,KAAK71B,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAGFq7B,uCAAuC,CACrCr7B,IADqC,EAEd;QACnB,KAAKkO,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;MAC/BlO,IAAI,CAACs7B,MAAL,GAAc,IAAd;MACAt7B,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;KAFF,MAGO,IAAI,KAAKL,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAJ,EAA2B;MAChCsH,IAAI,CAAC6M,EAAL,GAAU,KAAKvI,aAAL,EAAV;KADK,MAEA;WACAyJ,UAAL;;;QAGE,KAAKtB,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;MACzBkH,IAAI,CAACmD,IAAL,GAAY,KAAK63B,kBAAL,EAAZ;KADF,MAEO;WACAvtB,SAAL;;;WAGK,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAGFu7B,8BAA8B,CAC5Bv7B,IAD4B,EAE5Bw7B,QAF4B,EAGC;IAC7Bx7B,IAAI,CAACw7B,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;IACAx7B,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;SACKlB,MAAL,CAAYnH,KAAE,CAACtK,EAAf;IACA6F,IAAI,CAACy7B,eAAL,GAAuB,KAAKC,sBAAL,EAAvB;SACKjuB,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,2BAAtB,CAAP;;;EAGF27B,2BAA2B,GAAY;WAEnC,KAAKztB,YAAL,CAAkB,SAAlB,KAAgC,KAAKgE,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACvL,MAD/D;;;EAKFwiC,sBAAsB,GAAwB;WACrC,KAAKC,2BAAL,KACH,KAAKC,8BAAL,EADG,GAEH,KAAK5H,iBAAL,CAAgD,KAAhD,CAFJ;;;EAKF4H,8BAA8B,GAAgC;UACtD57B,IAAiC,GAAG,KAAKkF,SAAL,EAA1C;SACKgH,gBAAL,CAAsB,SAAtB;SACKN,MAAL,CAAYnH,KAAE,CAACvL,MAAf;;QACI,CAAC,KAAKuT,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAL,EAA4B;YACpB,KAAKqV,UAAL,EAAN;;;IAGF/N,IAAI,CAACqB,UAAL,GAAkB,KAAKiD,aAAL,EAAlB;SACKsH,MAAL,CAAYnH,KAAE,CAACtL,MAAf;WACO,KAAKgM,UAAL,CAAgBnF,IAAhB,EAAsB,2BAAtB,CAAP;;;EAKFg2B,WAAW,CAAI6F,CAAJ,EAAmB;UACtBr3B,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;UACMwmB,GAAG,GAAGD,CAAC,EAAb;SACKr3B,KAAL,GAAaA,KAAb;WACOs3B,GAAP;;;EAGFC,kBAAkB,CAAIF,CAAJ,EAAoB;UAC9Br3B,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;QACI;aACKumB,CAAC,EAAR;KADF,CAEE,OAAOn7B,CAAP,EAAU;UACNA,CAAC,YAAY8U,WAAjB,EAA8B;aACvBhR,KAAL,GAAaA,KAAb;eACOsG,SAAP;;;YAEIpK,CAAN;;;;EAIJwyB,UAAU,CAAI2I,CAAJ,EAAqB;UACvBr3B,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;UACMoB,MAAM,GAAGmlB,CAAC,EAAhB;;QACInlB,MAAM,KAAK5L,SAAX,IAAwB4L,MAAM,KAAK,KAAvC,EAA8C;aACrCA,MAAP;KADF,MAEO;WACAlS,KAAL,GAAaA,KAAb;aACOsG,SAAP;;;;EAIJkxB,iBAAiB,CAACC,IAAD,EAA4B;QACvC,KAAKC,gBAAL,EAAJ,EAA6B;;;;QAGzBC,SAAS,GAAG,KAAK33B,KAAL,CAAWvE,IAA3B;QACIC,IAAJ;;QAEI,KAAKgO,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;MAC5BiuB,SAAS,GAAG13B,KAAE,CAAClI,IAAf;MACA2D,IAAI,GAAG,KAAP;;;YAGMi8B,SAAR;WACO13B,KAAE,CAACxI,SAAR;eACS,KAAKmgC,sBAAL,CACLH,IADK,EAEO,KAFP,EAGqB,IAHrB,CAAP;;WAKGx3B,KAAE,CAAC3H,MAAR;eACS,KAAKu/B,UAAL,CACLJ,IADK,EAEa,IAFb,EAGY,KAHZ,CAAP;;WAKGx3B,KAAE,CAACjI,MAAR;YACM,KAAKiQ,KAAL,CAAWhI,KAAE,CAACjI,MAAd,KAAyB,KAAKid,qBAAL,CAA2B,MAA3B,CAA7B,EAAiE;eAE1D7N,MAAL,CAAYnH,KAAE,CAACjI,MAAf;eACK0P,gBAAL,CAAsB,MAAtB;iBACO,KAAK6uB,sBAAL,CAA4BkB,IAA5B,EAAgD,IAAhD,CAAP;;;WAGCx3B,KAAE,CAAClI,IAAR;QACE2D,IAAI,GAAGA,IAAI,IAAI,KAAKsE,KAAL,CAAW5D,KAA1B;eACO,KAAK07B,iBAAL,CAAuBL,IAAvB,EAA6B/7B,IAA7B,CAAP;;WACGuE,KAAE,CAACxM,IAAR;;gBACQ2I,KAAK,GAAG,KAAK4D,KAAL,CAAW5D,KAAzB;;cACIA,KAAK,KAAK,QAAd,EAAwB;mBACf,KAAKy6B,uCAAL,CAA6CY,IAA7C,CAAP;WADF,MAEO;mBACE,KAAKM,kBAAL,CAAwBN,IAAxB,EAA8Br7B,KAA9B,EAAgD,IAAhD,CAAP;;;;;;EAOR47B,2BAA2B,GAAmB;WACrC,KAAKD,kBAAL,CACL,KAAKr3B,SAAL,EADK,EAEL,KAAKV,KAAL,CAAW5D,KAFN,EAGM,IAHN,CAAP;;;EAOF67B,0BAA0B,CAACz8B,IAAD,EAAYoC,IAAZ,EAAgD;YAChEA,IAAI,CAACnK,IAAb;WACO,SAAL;;gBACQ+R,WAAW,GAAG,KAAKgyB,iBAAL,CAAuBh8B,IAAvB,CAApB;;cACIgK,WAAJ,EAAiB;YACfA,WAAW,CAAC2G,OAAZ,GAAsB,IAAtB;mBACO3G,WAAP;;;;;;WAIC,QAAL;YAGM,KAAKyC,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;gBACnB4jC,GAA0B,GAAG18B,IAAnC;UACA08B,GAAG,CAACpB,MAAJ,GAAa,IAAb;UACAoB,GAAG,CAAC7vB,EAAJ,GAASzK,IAAT;UACAs6B,GAAG,CAACv5B,IAAJ,GAAW,KAAK63B,kBAAL,EAAX;iBACO,KAAK71B,UAAL,CAAgBu3B,GAAhB,EAAqB,qBAArB,CAAP;;;;;;eAKK,KAAKH,kBAAL,CAAwBv8B,IAAxB,EAA8BoC,IAAI,CAACnK,IAAnC,EAAoD,KAApD,CAAP;;;;EAKNskC,kBAAkB,CAChBv8B,IADgB,EAEhBY,KAFgB,EAGhB+I,IAHgB,EAIA;YACR/I,KAAR;WACO,UAAL;YACM,KAAK+7B,6BAAL,CAAmCl4B,KAAE,CAAC3H,MAAtC,EAA8C6M,IAA9C,CAAJ,EAAyD;gBACjDizB,GAAuB,GAAG58B,IAAhC;UACA48B,GAAG,CAACC,QAAJ,GAAe,IAAf;;cACIlzB,IAAJ,EAAU;iBACHA,IAAL;;gBACI,CAAC,KAAK8C,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAAL,EAA4B;mBACrBiR,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAAC3H,MAAzB;;;;iBAGG,KAAKu/B,UAAL,CACLO,GADK,EAEa,IAFb,EAGY,KAHZ,CAAP;;;;;WAQC,MAAL;YACMjzB,IAAI,IAAI,KAAK8C,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAZ,EAAiC;cAC3B0R,IAAJ,EAAU,KAAKA,IAAL;iBACH,KAAKoxB,sBAAL,CAA4B/6B,IAA5B,EAAgD,KAAhD,CAAP;;;;;WAIC,WAAL;YACM,KAAK28B,6BAAL,CAAmCl4B,KAAE,CAACxM,IAAtC,EAA4C0R,IAA5C,CAAJ,EAAuD;cACjDA,IAAJ,EAAU,KAAKA,IAAL;iBACH,KAAK4wB,2BAAL,CAAiCv6B,IAAjC,CAAP;;;;;WAIC,QAAL;YACM2J,IAAJ,EAAU,KAAKA,IAAL;;YACN,KAAK8C,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAJ,EAA2B;iBAClB,KAAK2iC,uCAAL,CAA6Cr7B,IAA7C,CAAP;SADF,MAEO,IAAI,KAAK28B,6BAAL,CAAmCl4B,KAAE,CAACxM,IAAtC,EAA4C0R,IAA5C,CAAJ,EAAuD;iBACrD,KAAKuxB,mCAAL,CAAyCl7B,IAAzC,CAAP;;;;;WAIC,WAAL;YACM,KAAK28B,6BAAL,CAAmCl4B,KAAE,CAACxM,IAAtC,EAA4C0R,IAA5C,CAAJ,EAAuD;cACjDA,IAAJ,EAAU,KAAKA,IAAL;iBACH,KAAKuxB,mCAAL,CAAyCl7B,IAAzC,CAAP;;;;;WAIC,MAAL;YACM,KAAK28B,6BAAL,CAAmCl4B,KAAE,CAACxM,IAAtC,EAA4C0R,IAA5C,CAAJ,EAAuD;cACjDA,IAAJ,EAAU,KAAKA,IAAL;iBACH,KAAK6wB,2BAAL,CAAiCx6B,IAAjC,CAAP;;;;;;;EAMR28B,6BAA6B,CAACG,SAAD,EAAuBnzB,IAAvB,EAAsC;WAC1D,CAACA,IAAI,IAAI,KAAK8C,KAAL,CAAWqwB,SAAX,CAAT,KAAmC,CAAC,KAAKZ,gBAAL,EAA3C;;;EAGFa,mCAAmC,CACjCr4B,QADiC,EAEjCC,QAFiC,EAGL;QACxB,CAAC,KAAKsI,YAAL,CAAkB,GAAlB,CAAL,EAA6B;aACpBnC,SAAP;;;UAEIgxB,GAA+B,GAAG,KAAKC,kBAAL,CAAwB,MAAM;YAC9D/7B,IAA+B,GAAG,KAAKkB,WAAL,CACtCwD,QADsC,EAEtCC,QAFsC,CAAxC;MAIA3E,IAAI,CAACoE,cAAL,GAAsB,KAAK8wB,qBAAL,EAAtB;YAEMlb,mBAAN,CAA0Bha,IAA1B;MACAA,IAAI,CAACsN,UAAL,GAAkB,KAAKmsB,uCAAL,EAAlB;WACK7tB,MAAL,CAAYnH,KAAE,CAAC9K,KAAf;aACOqG,IAAP;KAVsC,CAAxC;;QAaI,CAAC87B,GAAL,EAAU;aACDhxB,SAAP;;;WAGK,KAAKwR,oBAAL,CACLwf,GADK,EAEwB,IAFxB,EAGO,IAHP,CAAP;;;EAOF7H,oBAAoB,GAAmC;UAC/Cj0B,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAACgC,MAAL,GAAc,KAAKq3B,QAAL,CAAc,MAE1B,KAAKoB,aAAL,CAAmB,MAAM;WAClBjpB,gBAAL,CAAsB,GAAtB;aACO,KAAK+hB,oBAAL,CACL,2BADK,EAEL,KAAK8D,WAAL,CAAiBlE,IAAjB,CAAsB,IAAtB,CAFK,CAAP;KAFF,CAFY,CAAd;SAYK3uB,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;SACKuK,gBAAL,CAAsB,GAAtB;WACO,KAAKrM,UAAL,CAAgBnF,IAAhB,EAAsB,8BAAtB,CAAP;;;EAGFg9B,oBAAoB,GAAY;QAC1B,KAAKvwB,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;cACf,KAAKuM,KAAL,CAAW5D,KAAnB;aACO,UAAL;aACK,SAAL;aACK,MAAL;aACK,WAAL;aACK,QAAL;aACK,WAAL;aACK,MAAL;iBACS,IAAP;;;;WAIC,KAAP;;;EAOFsU,wBAAwB,GAAY;QAC9B,KAAK8nB,oBAAL,EAAJ,EAAiC,OAAO,KAAP;WAC1B,MAAM9nB,wBAAN,EAAP;;;EAGF+nB,uBAAuB,CACrBhjB,cADqB,EAErBijB,UAFqB,EAGc;UAE7Bx4B,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;QAEIw4B,aAAJ;QACIhH,QAAQ,GAAG,KAAf;;QACIlc,cAAJ,EAAoB;MAClBkjB,aAAa,GAAG,KAAKC,mBAAL,EAAhB;MACAjH,QAAQ,GAAG,CAAC,CAAC,KAAKpD,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAb;;;UAGIha,IAAI,GAAG,KAAKD,iBAAL,EAAb;SACKD,4BAAL,CAAkCE,IAAlC;UACMskB,GAAG,GAAG,KAAKvkB,iBAAL,CAAuBC,IAAI,CAAC5X,KAA5B,EAAmC4X,IAAI,CAAC3X,GAAL,CAASD,KAA5C,EAAmD4X,IAAnD,CAAZ;;QACIokB,aAAa,IAAIhH,QAArB,EAA+B;YACvBmH,EAAyB,GAAG,KAAKp8B,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAlC;;UACIu4B,UAAU,CAACj7B,MAAf,EAAuB;QACrBq7B,EAAE,CAACJ,UAAH,GAAgBA,UAAhB;;;UAEEC,aAAJ,EAAmBG,EAAE,CAACH,aAAH,GAAmBA,aAAnB;UACfhH,QAAJ,EAAcmH,EAAE,CAACnH,QAAH,GAAcA,QAAd;;UACVkH,GAAG,CAACp9B,IAAJ,KAAa,YAAb,IAA6Bo9B,GAAG,CAACp9B,IAAJ,KAAa,mBAA9C,EAAmE;cAC3D,KAAKiC,KAAL,CACJo7B,EAAE,CAACn8B,KADC,EAEJ,mEAFI,CAAN;;;MAKFm8B,EAAE,CAACC,SAAH,GAAeF,GAAf;aACO,KAAKl4B,UAAL,CAAgBm4B,EAAhB,EAAoB,qBAApB,CAAP;;;QAGEJ,UAAU,CAACj7B,MAAf,EAAuB;MACrB8W,IAAI,CAACmkB,UAAL,GAAkBA,UAAlB;;;WAGKG,GAAP;;;EAGFvoB,0BAA0B,CACxB9U,IADwB,EAExBC,IAFwB,EAGxB6E,QAAkB,GAAG,KAHG,EAIlB;QACF,KAAK2H,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB0G,IAAI,CAACsN,UAAL,GAAkB,KAAKooB,oCAAL,CAA0CjxB,KAAE,CAACnL,KAA7C,CAAlB;;;UAGIkkC,YAAY,GAChBv9B,IAAI,KAAK,qBAAT,GACI,mBADJ,GAEIA,IAAI,KAAK,aAAT,GACA,iBADA,GAEA6K,SALN;;QAMI0yB,YAAY,IAAI,CAAC,KAAK/wB,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAjB,IAA0C,KAAKojC,gBAAL,EAA9C,EAAuE;WAChE/2B,UAAL,CAAgBnF,IAAhB,EAAsBw9B,YAAtB;;;;UAII1oB,0BAAN,CAAiC9U,IAAjC,EAAuCC,IAAvC,EAA6C6E,QAA7C;;;EAGF24B,wBAAwB,CAACz9B,IAAD,EAAyB;QAC3C,CAACA,IAAI,CAACmD,IAAN,IAAcnD,IAAI,CAAC6M,EAAvB,EAA2B;WACpB1K,SAAL,CAAenC,IAAI,CAAC6M,EAApB,EAAwBnN,eAAxB,EAAyC,IAAzC,EAA+C,eAA/C;KADF,MAEO;YACC+9B,wBAAN,CAA+B,GAAGpmB,SAAlC;;;;EAIJuE,cAAc,CACZN,IADY,EAEZ5W,QAFY,EAGZC,QAHY,EAIZ4W,OAJY,EAKZ/W,KALY,EAMZsX,eANY,EAOE;QACV,CAAC,KAAKgX,qBAAL,EAAD,IAAiC,KAAKrmB,KAAL,CAAWhI,KAAE,CAACnK,IAAd,CAArC,EAA0D;WACnDkK,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;WACK0C,IAAL;YAEM+zB,iBAAwC,GAAG,KAAKx8B,WAAL,CAC/CwD,QAD+C,EAE/CC,QAF+C,CAAjD;MAIA+4B,iBAAiB,CAACr8B,UAAlB,GAA+Bia,IAA/B;aACO,KAAKnW,UAAL,CAAgBu4B,iBAAhB,EAAmC,qBAAnC,CAAP;;;QAGE,KAAKzwB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;YAIpByJ,MAAM,GAAG,KAAKqlB,kBAAL,CAAwB,MAAM;YACvC,CAACxgB,OAAD,IAAY,KAAKoiB,eAAL,CAAqBriB,IAArB,CAAhB,EAA4C;gBAGpCsiB,YAAY,GAAG,KAAKb,mCAAL,CACnBr4B,QADmB,EAEnBC,QAFmB,CAArB;;cAIIi5B,YAAJ,EAAkB;mBACTA,YAAP;;;;cAIE59B,IAAsB,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAA/B;QACA3E,IAAI,CAACwb,MAAL,GAAcF,IAAd;cAEMa,aAAa,GAAG,KAAK8X,oBAAL,EAAtB;;YAEI9X,aAAJ,EAAmB;cACb,CAACZ,OAAD,IAAY,KAAKlP,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAhB,EAAqC;YAGnC8G,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CACfhX,KAAE,CAACtL,MADY,EAEK,KAFL,CAAjB;YAIA6G,IAAI,CAACoE,cAAL,GAAsB+X,aAAtB;mBACO,KAAK0hB,oBAAL,CAA0B79B,IAA1B,CAAP;WARF,MASO,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAAC3K,SAAd,CAAJ,EAA8B;mBAC5B,KAAKgkC,6BAAL,CACLp5B,QADK,EAELC,QAFK,EAGL2W,IAHK,EAIL9W,KAJK,EAKL2X,aALK,CAAP;;;;aAUCpO,UAAL;OAvCa,CAAf;UA0CI2I,MAAJ,EAAY,OAAOA,MAAP;;;WAGP,MAAMkF,cAAN,CACLN,IADK,EAEL5W,QAFK,EAGLC,QAHK,EAIL4W,OAJK,EAKL/W,KALK,EAMLsX,eANK,CAAP;;;EAUFM,iBAAiB,CAACpc,IAAD,EAA8B;QACzC,KAAKiN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;YAGpB7I,cAAc,GAAG,KAAK23B,kBAAL,CAAwB,MAAM;cAC7CgC,IAAI,GAAG,KAAK9J,oBAAL,EAAb;YACI,CAAC,KAAKxnB,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAL,EAA4B,KAAK6U,UAAL;eACrBgwB,IAAP;OAHqB,CAAvB;;UAKI35B,cAAJ,EAAoB;QAClBpE,IAAI,CAACoE,cAAL,GAAsBA,cAAtB;;;;UAIEgY,iBAAN,CAAwBpc,IAAxB;;;EAGFg+B,WAAW,CACTjlB,IADS,EAETklB,YAFS,EAGTC,YAHS,EAITC,OAJS,EAKT/oB,IALS,EAMT;QAEEmd,OAAO,CAAC9tB,KAAE,CAACpH,GAAH,CAAOzF,KAAR,CAAP,GAAwBumC,OAAxB,IACA,CAAC,KAAKrL,qBAAL,EADD,IAEA,KAAK5kB,YAAL,CAAkB,IAAlB,CAHF,EAIE;YACMlO,IAAsB,GAAG,KAAKkB,WAAL,CAC7B+8B,YAD6B,EAE7BC,YAF6B,CAA/B;MAIAl+B,IAAI,CAACqB,UAAL,GAAkB0X,IAAlB;;YACMvc,MAAM,GAAG,KAAK24B,6BAAL,EAAf;;UACI34B,MAAJ,EAAY;QACVwD,IAAI,CAACuN,cAAL,GAAsB/Q,MAAtB;OADF,MAEO;QACLwD,IAAI,CAACuN,cAAL,GAAsB,KAAK0sB,mBAAL,EAAtB;;;WAEG90B,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB;aACO,KAAKg+B,WAAL,CACLh+B,IADK,EAELi+B,YAFK,EAGLC,YAHK,EAILC,OAJK,EAKL/oB,IALK,CAAP;;;WASK,MAAM4oB,WAAN,CAAkBjlB,IAAlB,EAAwBklB,YAAxB,EAAsCC,YAAtC,EAAoDC,OAApD,EAA6D/oB,IAA7D,CAAP;;;EAGF2E,iBAAiB,CACfxR,IADe,EAEf5D,QAFe,EAGfy5B,aAHe,EAKf34B,SALe,EAMT;;EAeR44B,qBAAqB,GAAG;;EAExB3vB,WAAW,CAAC1O,IAAD,EAA4B;QACjC,KAAKyM,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KAAuB,KAAKia,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACtK,EAAxD,EAA4D;aACnD,KAAKohC,8BAAL,CAAoCv7B,IAApC,CAAP;;;WAEK,MAAM0O,WAAN,CAAkB1O,IAAlB,CAAP;;;EAGFiP,WAAW,CAACjP,IAAD,EAA4B;QACjC,KAAKyM,KAAL,CAAWhI,KAAE,CAACxH,OAAd,CAAJ,EAA4B;WAErB2O,MAAL,CAAYnH,KAAE,CAACxH,OAAf;aACO,KAAKs+B,8BAAL,CAAoCv7B,IAApC,EAAyD,IAAzD,CAAP;KAHF,MAIO,IAAI,KAAKqM,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,CAAJ,EAAqB;YAEpBC,MAA4B,GAAG4F,IAArC;MACA5F,MAAM,CAACiH,UAAP,GAAoB,KAAKiL,eAAL,EAApB;WACKmB,SAAL;aACO,KAAKtI,UAAL,CAAgB/K,MAAhB,EAAwB,oBAAxB,CAAP;KALK,MAMA,IAAI,KAAKyT,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;YAE7BiJ,IAAoC,GAAG9W,IAA7C;WAEKkM,gBAAL,CAAsB,WAAtB;MACA4K,IAAI,CAACjK,EAAL,GAAU,KAAKC,eAAL,EAAV;WACKW,SAAL;aACO,KAAKtI,UAAL,CAAgB2R,IAAhB,EAAsB,8BAAtB,CAAP;KAPK,MAQA;aACE,MAAM7H,WAAN,CAAkBjP,IAAlB,CAAP;;;;EAIJs+B,eAAe,GAAY;WAEvB,KAAKpwB,YAAL,CAAkB,UAAlB,KAAiC,KAAKgE,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAAC3H,MADhE;;;EAKFyhC,4BAA4B,GAAiC;QACvD,KAAKD,eAAL,EAAJ,EAA4B;YACpB1B,GAAG,GAAG,KAAK13B,SAAL,EAAZ;WACKyE,IAAL;WACK0yB,UAAL,CAAgBO,GAAhB,EAAqB,IAArB,EAA2B,IAA3B;MACAA,GAAG,CAACC,QAAJ,GAAe,IAAf;aACOD,GAAP;;;QAKE,KAAKp4B,KAAL,CAAW5D,KAAX,KAAqB,WAAzB,EAAsC;YAC9B8V,MAAM,GAAG,KAAK6lB,kBAAL,CACb,KAAKr3B,SAAL,EADa,EAEb,KAAKV,KAAL,CAAW5D,KAFE,EAGb,IAHa,CAAf;UAMI8V,MAAJ,EAAY,OAAOA,MAAP;;;WAGP,MAAM6nB,4BAAN,EAAP;;;EAGFC,qBAAqB,CAACx3B,OAAD,EAAmBvD,QAAnB,EAAoD;QACnE,KAAKe,KAAL,CAAWvE,IAAX,KAAoBwE,KAAE,CAACjI,MAA3B,EAAmC;YAC3BiiC,KAAK,GAAG,KAAKvsB,SAAL,EAAd;;UACIusB,KAAK,CAACx+B,IAAN,KAAewE,KAAE,CAACxM,IAAlB,IAA0BwmC,KAAK,CAAC79B,KAAN,KAAgB,MAA9C,EAAsD;cAC9CZ,IAAyB,GAAG,KAAKkF,SAAL,EAAlC;aACK0G,MAAL,CAAYnH,KAAE,CAACjI,MAAf;aACK0P,gBAAL,CAAsB,MAAtB;eACO,KAAK6uB,sBAAL,CAA4B/6B,IAA5B,EAAgD,IAAhD,CAAP;;;;WAGG,MAAMw+B,qBAAN,CAA4Bx3B,OAA5B,EAAqCvD,QAArC,CAAP;;;EAGF25B,mBAAmB,GAAqB;WAC/B,KAAKrK,eAAL,CAAqB,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAArB,CAAP;;;EAGF2L,gBAAgB,CACd16B,SADc,EAEd26B,MAFc,EAGdn6B,KAHc,EAIdo6B,sBAJc,EAKR;UACAzB,aAAa,GAAG,KAAKC,mBAAL,EAAtB;QACID,aAAJ,EAAmBwB,MAAM,CAACxB,aAAP,GAAuBA,aAAvB;UAEbuB,gBAAN,CAAuB16B,SAAvB,EAAkC26B,MAAlC,EAA0Cn6B,KAA1C,EAAiDo6B,sBAAjD;;;EAGFC,4BAA4B,CAC1B76B,SAD0B,EAE1B26B,MAF0B,EAG1Bn6B,KAH0B,EAI1BwN,QAJ0B,EAK1B4sB,sBAL0B,EAMpB;UACAE,YAA6C,GAAGH,MAAtD;UACM78B,IAAqB,GAAG68B,MAA9B;UACMI,SAA+C,GAAGJ,MAAxD;QAEI9B,QAAQ,GAAG,KAAf;QACE1G,QAAQ,GAAG,KADb;UAGMuG,GAAG,GAAG,KAAK3J,eAAL,CAAqB,CAAC,UAAD,EAAa,UAAb,CAArB,CAAZ;;YACQ2J,GAAR;WACO,UAAL;QACEvG,QAAQ,GAAG,IAAX;QACA0G,QAAQ,GAAG,CAAC,CAAC,KAAK9J,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAb;;;WAEG,UAAL;QACE8J,QAAQ,GAAG,IAAX;QACA1G,QAAQ,GAAG,CAAC,CAAC,KAAKpD,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAb;;;;QAIA8J,QAAJ,EAAciC,YAAY,CAACjC,QAAb,GAAwB,IAAxB;QACV1G,QAAJ,EAAc4I,SAAS,CAAC5I,QAAV,GAAqB,IAArB;;QAEV,CAAC0G,QAAD,IAAa,CAAC7qB,QAAd,IAA0B,CAAC8sB,YAAY,CAAC3B,aAA5C,EAA2D;YACnD7G,GAAG,GAAG,KAAKP,wBAAL,CAA8B4I,MAA9B,CAAZ;;UACIrI,GAAJ,EAAS;QACPtyB,SAAS,CAACb,IAAV,CAAekB,IAAf,CAAoBiyB,GAApB;;;;;QAKAH,QAAJ,EAAc;MAEZ2I,YAAY,CAAC7sB,MAAb,GAAsBD,QAAtB;WACKgtB,sBAAL,CAA4Bl9B,IAA5B;WACKm9B,4BAAL,CAAkCH,YAAlC;WACKI,iBAAL,CAAuBl7B,SAAvB,EAAkClC,IAAlC;;;;UAII+8B,4BAAN,CACE76B,SADF,EAEE26B,MAFF,EAGEn6B,KAHF,EAIEwN,QAJF,EAKE4sB,sBALF;;;EASFK,4BAA4B,CAC1BH,YAD0B,EAEpB;UACA1sB,QAAQ,GAAG,KAAK/F,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAjB;QACI2Y,QAAJ,EAAc0sB,YAAY,CAAC1sB,QAAb,GAAwB,IAAxB;;;EAOhB4C,wBAAwB,CACtBhV,IADsB,EAEtBoC,IAFsB,EAGT;UACP0U,IAAI,GACR1U,IAAI,CAACnC,IAAL,KAAc,YAAd,GACI,KAAKw8B,0BAAL,CAAgCz8B,IAAhC,EAAsCoC,IAAtC,CADJ,GAEI0I,SAHN;WAIOgM,IAAI,IAAI,MAAM9B,wBAAN,CAA+BhV,IAA/B,EAAqCoC,IAArC,CAAf;;;EAKF6S,4BAA4B,GAAY;QAClC,KAAK+nB,oBAAL,EAAJ,EAAiC,OAAO,IAAP;WAC1B,MAAM/nB,4BAAN,EAAP;;;EAIFE,gBAAgB,CACd/S,IADc,EAEdgT,IAFc,EAGd1Q,QAHc,EAIdC,QAJc,EAKd0Q,gBALc,EAMA;QAGV,CAACA,gBAAD,IAAqB,CAAC,KAAK5I,KAAL,CAAWhI,KAAE,CAAChL,QAAd,CAA1B,EAAmD;aAC1C,MAAM0b,gBAAN,CACL/S,IADK,EAELgT,IAFK,EAGL1Q,QAHK,EAILC,QAJK,EAKL0Q,gBALK,CAAP;;;UASI7Q,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;QACI;aACK,MAAMH,gBAAN,CAAuB/S,IAAvB,EAA6BgT,IAA7B,EAAmC1Q,QAAnC,EAA6CC,QAA7C,CAAP;KADF,CAEE,OAAO4Q,GAAP,EAAY;UACR,EAAEA,GAAG,YAAYC,WAAjB,CAAJ,EAAmC;cAE3BD,GAAN;;;WAGG/Q,KAAL,GAAaA,KAAb;MACA6Q,gBAAgB,CAAClU,KAAjB,GAAyBoU,GAAG,CAAClM,GAAJ,IAAW,KAAK7E,KAAL,CAAWrD,KAA/C;aACOiB,IAAP;;;;EAMJuU,cAAc,CACZ3W,IADY,EAEZ0E,QAFY,EAGZC,QAHY,EAIE;IACd3E,IAAI,GAAG,MAAM2W,cAAN,CAAqB3W,IAArB,EAA2B0E,QAA3B,EAAqCC,QAArC,CAAP;;QACI,KAAK0H,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;MACzBuG,IAAI,CAACoS,QAAL,GAAgB,IAAhB;WAIK5E,gBAAL,CAAsBxN,IAAtB;;;QAGE,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClBsd,YAAoC,GAAG,KAAK1V,WAAL,CAC3CwD,QAD2C,EAE3CC,QAF2C,CAA7C;MAIAiS,YAAY,CAACvV,UAAb,GAA0BrB,IAA1B;MACA4W,YAAY,CAACrJ,cAAb,GAA8B,KAAKknB,qBAAL,EAA9B;aAEO,KAAKtvB,UAAL,CAAgByR,YAAhB,EAA8B,sBAA9B,CAAP;;;WAGK5W,IAAP;;;EAGF+W,sBAAsB,CAAC/W,IAAD,EAAiD;UAE/D0E,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UAGMw6B,SAAS,GAAG,KAAKtxB,aAAL,CAAmB,SAAnB,CAAlB;QAEI7D,WAAJ;;QAEI,KAAKyC,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;MACvB+R,WAAW,GAAG,KAAKwyB,2BAAL,EAAd;;;QAEE,CAACxyB,WAAL,EAAkB;MAChBA,WAAW,GAAG,MAAM+M,sBAAN,CAA6B/W,IAA7B,CAAd;;;QAGEgK,WAAW,IAAIm1B,SAAnB,EAA8B;WAEvBC,kBAAL,CAAwBp1B,WAAxB,EAAqCtF,QAArC,EAA+CC,QAA/C;MAEAqF,WAAW,CAAC2G,OAAZ,GAAsB,IAAtB;;;WAGK3G,WAAP;;;EAGFwN,YAAY,CACVxX,IADU,EAEVyX,WAFU,EAGVC,UAHU,EAIJ;QACF,CAAC,CAACD,WAAD,IAAgBC,UAAjB,KAAgC,KAAKxJ,YAAL,CAAkB,YAAlB,CAApC,EAAqE;;;;UAI/DsJ,YAAN,CAAmB,GAAGH,SAAtB;UACMjT,cAAc,GAAG,KAAK6wB,wBAAL,EAAvB;QACI7wB,cAAJ,EAAoBpE,IAAI,CAACoE,cAAL,GAAsBA,cAAtB;;;EAGtB8T,kBAAkB,CAAClY,IAAD,EAAyC;QACrD,CAACA,IAAI,CAACoS,QAAN,IAAkB,KAAK/F,GAAL,CAAS5H,KAAE,CAACnK,IAAZ,CAAtB,EAAyC;MACvC0F,IAAI,CAACq/B,QAAL,GAAgB,IAAhB;;;UAGIp/B,IAAI,GAAG,KAAKg2B,wBAAL,EAAb;QACIh2B,IAAJ,EAAUD,IAAI,CAACuN,cAAL,GAAsBtN,IAAtB;WACH,MAAMiY,kBAAN,CAAyBlY,IAAzB,CAAP;;;EAGF+D,eAAe,CACbC,SADa,EAEb7D,MAFa,EAGb5B,WAHa,EAIbD,OAJa,EAKb2F,aALa,EAMbC,iBANa,EAOP;UACAE,cAAc,GAAG,KAAK6wB,wBAAL,EAAvB;QACI7wB,cAAJ,EAAoBjE,MAAM,CAACiE,cAAP,GAAwBA,cAAxB;UACdL,eAAN,CACEC,SADF,EAEE7D,MAFF,EAGE5B,WAHF,EAIED,OAJF,EAKE2F,aALF,EAMEC,iBANF;;;EAUFqU,sBAAsB,CACpBvU,SADoB,EAEpB7D,MAFoB,EAGpB5B,WAHoB,EAIpBD,OAJoB,EAKd;UACA8F,cAAc,GAAG,KAAK6wB,wBAAL,EAAvB;QACI7wB,cAAJ,EAAoBjE,MAAM,CAACiE,cAAP,GAAwBA,cAAxB;UACdmU,sBAAN,CAA6BvU,SAA7B,EAAwC7D,MAAxC,EAAgD5B,WAAhD,EAA6DD,OAA7D;;;EAGFka,eAAe,CAACxY,IAAD,EAAsB;UAC7BwY,eAAN,CAAsBxY,IAAtB;;QACIA,IAAI,CAACI,UAAL,IAAmB,KAAK6M,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;MAC7CjN,IAAI,CAACyY,mBAAL,GAA2B,KAAKwb,oBAAL,EAA3B;;;QAEE,KAAKpmB,aAAL,CAAmB,YAAnB,CAAJ,EAAsC;MACpC7N,IAAI,CAACyP,UAAL,GAAkB,KAAKyqB,qBAAL,CAA2B,YAA3B,CAAlB;;;;EAIJthB,iBAAiB,CAAC9W,IAAD,EAAuB,GAAGi8B,IAA1B,EAAsC;UAC/C35B,cAAc,GAAG,KAAK6wB,wBAAL,EAAvB;QACI7wB,cAAJ,EAAoBtC,IAAI,CAACsC,cAAL,GAAsBA,cAAtB;UAEdwU,iBAAN,CAAwB9W,IAAxB,EAA8B,GAAGi8B,IAAjC;;;EAGF/jB,mBAAmB,CAACha,IAAD,EAAmBia,cAAnB,EAAmD;UAC9D7V,cAAc,GAAG,KAAK6wB,wBAAL,EAAvB;QACI7wB,cAAJ,EAAoBpE,IAAI,CAACoE,cAAL,GAAsBA,cAAtB;UACd4V,mBAAN,CAA0Bha,IAA1B,EAAgCia,cAAhC;;;EAIFC,UAAU,CACRpD,IADQ,EAER5W,IAFQ,EAGF;UACAga,UAAN,CAAiBpD,IAAjB,EAAuB5W,IAAvB;;QACI4W,IAAI,CAACjK,EAAL,CAAQ5M,IAAR,KAAiB,YAAjB,IAAiC,KAAKoM,GAAL,CAAS5H,KAAE,CAACnK,IAAZ,CAArC,EAAwD;MACtDwc,IAAI,CAACuoB,QAAL,GAAgB,IAAhB;;;UAGIp/B,IAAI,GAAG,KAAKg2B,wBAAL,EAAb;;QACIh2B,IAAJ,EAAU;MACR6W,IAAI,CAACjK,EAAL,CAAQU,cAAR,GAAyBtN,IAAzB;WACKuN,gBAAL,CAAsBsJ,IAAI,CAACjK,EAA3B;;;;EAKJsN,iCAAiC,CAC/Bna,IAD+B,EAE/Boa,IAF+B,EAGJ;QACvB,KAAK3N,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;MACxB0G,IAAI,CAACsN,UAAL,GAAkB,KAAKmnB,qBAAL,EAAlB;;;WAEK,MAAMta,iCAAN,CAAwCna,IAAxC,EAA8Coa,IAA9C,CAAP;;;EAGFlE,gBAAgB,CAAC,GAAG6nB,IAAJ,EAAwB;QAGlCxjB,QAAJ;;QAEI,KAAK9N,KAAL,CAAWhI,KAAE,CAAC4M,WAAd,CAAJ,EAAgC;YACxBrK,OAAO,GAAG,KAAKI,UAAL,EAAhB;MACAqrB,MAAM,CAACzrB,OAAO,KAAKs4B,OAAE,CAAC3kB,MAAhB,CAAN;MAEA8X,MAAM,CAAC,KAAKjuB,KAAL,CAAWwC,OAAX,CAAmB,KAAKxC,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnB,GAA4B,CAA/C,MAAsDq9B,OAAE,CAACjS,MAA1D,CAAN;YAGM7oB,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;eACK,MAAMY,gBAAN,CAAuB,GAAG6nB,IAA1B,CAAP;OADF,CAEE,OAAOxoB,GAAP,EAAY;YACR,EAAEA,GAAG,YAAYC,WAAjB,CAAJ,EAAmC;gBAE3BD,GAAN;;;aAGG/Q,KAAL,GAAaA,KAAb;QAEAiuB,MAAM,CAAC,KAAKrrB,UAAL,OAAsBk4B,OAAE,CAAC3kB,MAA1B,CAAN;aACKnW,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;QACAsrB,MAAM,CAAC,KAAKrrB,UAAL,OAAsBk4B,OAAE,CAACjS,MAA1B,CAAN;aACK7oB,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;QACAoT,QAAQ,GAAGhF,GAAX;;;;QAIAgF,QAAQ,KAAKzP,SAAb,IAA0B,CAAC,KAAKmC,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;aAC9C,MAAMiJ,gBAAN,CAAuB,GAAG6nB,IAA1B,CAAP;;;QAKEnjB,eAAJ;QACIxW,cAAJ;UACMI,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;QACI;MAEFlR,cAAc,GAAG,KAAK8wB,qBAAL,EAAjB;MACAta,eAAe,GAAG,MAAM1E,gBAAN,CAAuB,GAAG6nB,IAA1B,CAAlB;;UAEEnjB,eAAe,CAAC3a,IAAhB,KAAyB,yBAAzB,IACC2a,eAAe,CAACrZ,KAAhB,IAAyBqZ,eAAe,CAACrZ,KAAhB,CAAsB8B,aAFlD,EAGE;aACK0K,UAAL;;KARJ,CAUE,OAAOwH,GAAP,EAAY;UACR,EAAEA,GAAG,YAAYC,WAAjB,CAAJ,EAAmC;cAE3BD,GAAN;;;UAGEgF,QAAJ,EAAc;cACNA,QAAN;;;MAMFkY,MAAM,CAAC,CAAC,KAAKjY,SAAL,CAAe,KAAf,CAAF,CAAN;WAEKhW,KAAL,GAAaA,KAAb;aAGO,MAAM0R,gBAAN,CAAuB,GAAG6nB,IAA1B,CAAP;;;QAIE35B,cAAc,IAAIA,cAAc,CAACpC,MAAf,CAAsBC,MAAtB,KAAiC,CAAvD,EAA0D;WACnD4Y,0BAAL,CAAgCD,eAAhC,EAAiDxW,cAAjD;;;IAEFwW,eAAe,CAACxW,cAAhB,GAAiCA,cAAjC;WACOwW,eAAP;;;EAIFqd,eAAe,CAAC1zB,sBAAD,EAA8C;QACvD,CAAC,KAAKiW,SAAL,CAAe,KAAf,CAAD,IAA0B,KAAKvN,YAAL,CAAkB,GAAlB,CAA9B,EAAsD;aAC7C,KAAK+sB,oBAAL,EAAP;KADF,MAEO;aACE,MAAM/B,eAAN,CAAsB1zB,sBAAtB,CAAP;;;;EAIJuW,UAAU,CAAC9a,IAAD,EAA8D;QAClE,KAAKyM,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAGlBkL,KAAK,GAAG,KAAKA,KAAL,CAAW8Q,KAAX,EAAd;;UACI;cACIhI,UAAU,GAAG,KAAKooB,oCAAL,CACjBjxB,KAAE,CAACnL,KADc,CAAnB;;YAGI,KAAK6a,kBAAL,MAA6B,CAAC,KAAK1H,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,CAAlC,EAAwD;eACjD6K,KAAL,GAAaA,KAAb;iBACOsG,SAAP;;;QAEF9K,IAAI,CAACsN,UAAL,GAAkBA,UAAlB;OARF,CASE,OAAOiI,GAAP,EAAY;YACRA,GAAG,YAAYC,WAAnB,EAAgC;eACzBhR,KAAL,GAAaA,KAAb;SADF,MAEO;gBAEC+Q,GAAN;;;;;WAKC,MAAMuF,UAAN,CAAiB9a,IAAjB,CAAP;;;EAIF6Y,4BAA4B,CAACtE,KAAD,EAAmB;QACzC,KAAKlI,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;UACrB8a,KAAK,CAACtU,IAAN,KAAe,YAAnB,EAAiC;cACzB,KAAKiC,KAAL,CACJqS,KAAK,CAACpT,KADF,EAEJ,gFAFI,CAAN;;;MAMFoT,KAAK,CAACnC,QAAN,GAAiB,IAAjB;;;UAEInS,IAAI,GAAG,KAAKg2B,wBAAL,EAAb;QACIh2B,IAAJ,EAAUsU,KAAK,CAAChH,cAAN,GAAuBtN,IAAvB;SACLuN,gBAAL,CAAsB+G,KAAtB;WAEOA,KAAP;;;EAGF/O,YAAY,CACVxF,IADU,EAEVyF,SAFU,EAGVlD,kBAHU,EAIF;YACAvC,IAAI,CAACC,IAAb;WACO,sBAAL;eACS,MAAMuF,YAAN,CACL,KAAKmP,mBAAL,CAAyB3U,IAAzB,CADK,EAELyF,SAFK,EAGLlD,kBAHK,CAAP;;WAKG,qBAAL;eACS,MAAMiD,YAAN,CAAmBxF,IAAnB,EAAyByF,SAAzB,EAAoClD,kBAApC,CAAP;;WACG,gBAAL;WACK,qBAAL;WACK,iBAAL;QACEvC,IAAI,CAACqB,UAAL,GAAkB,KAAKmE,YAAL,CAChBxF,IAAI,CAACqB,UADW,EAEhBoE,SAFgB,EAGhBlD,kBAHgB,CAAlB;eAKOvC,IAAP;;;eAEO,MAAMwF,YAAN,CAAmBxF,IAAnB,EAAyByF,SAAzB,EAAoClD,kBAApC,CAAP;;;;EAINJ,SAAS,CACPC,IADO,EAEPC,WAAyB,GAAG1C,SAFrB,EAGP2C,YAHO,EAIPC,kBAJO,EAKD;YACEH,IAAI,CAACnC,IAAb;WACO,sBAAL;;;WAKK,qBAAL;aACOkC,SAAL,CACEC,IAAI,CAACm7B,SADP,EAEEl7B,WAFF,EAGEC,YAHF,EAIE,oBAJF;;;WAOG,gBAAL;WACK,qBAAL;WACK,iBAAL;aACOH,SAAL,CACEC,IAAI,CAACf,UADP,EAEEgB,WAFF,EAGEC,YAHF,EAIEC,kBAJF;;;;cAQMJ,SAAN,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,kBAAjD;;;;;EAKNg9B,gBAAgB,GAAc;YACpB,KAAK/6B,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAAC7H,KAAR;eAES,KAAKkQ,eAAL,CAAmC,IAAnC,CAAP;;;eAEO,MAAMyyB,gBAAN,EAAP;;;;EAINC,4BAA4B,CAACp9B,IAAD,EAAmC;QACzD,KAAK6K,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;YACpBkP,aAAa,GAAG,KAAK8X,oBAAL,EAAtB;;UAEI,KAAKxnB,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAJ,EAA2B;cACnBkhB,IAAI,GAAG,MAAMolB,4BAAN,CAAmCp9B,IAAnC,CAAb;QACAgY,IAAI,CAAChW,cAAL,GAAsB+X,aAAtB;eACO/B,IAAP;;;WAGGrM,UAAL,CAAgB,KAAKvJ,KAAL,CAAWrD,KAA3B,EAAkCsD,KAAE,CAACvL,MAArC;;;WAGK,MAAMsmC,4BAAN,CAAmCp9B,IAAnC,CAAP;;;EAQFgW,aAAa,GAAY;WAChB,KAAKnL,YAAL,CAAkB,GAAlB,KAA0B,MAAMmL,aAAN,EAAjC;;;EAGFC,eAAe,GAAY;WAEvB,KAAK5L,KAAL,CAAWhI,KAAE,CAACnK,IAAd,KAAuB,KAAKmS,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAvB,IAA+C,MAAM+e,eAAN,EADjD;;;EAKFS,iBAAiB,CAAC,GAAGilB,IAAJ,EAAqB;UAC9B/9B,IAAI,GAAG,MAAM8Y,iBAAN,CAAwB,GAAGilB,IAA3B,CAAb;;QAGE/9B,IAAI,CAACC,IAAL,KAAc,mBAAd,IACAD,IAAI,CAACuN,cADL,IAEAvN,IAAI,CAAC0Q,KAAL,CAAWvP,KAAX,GAAmBnB,IAAI,CAACuN,cAAL,CAAoBpM,KAHzC,EAIE;WACKe,KAAL,CACElC,IAAI,CAACuN,cAAL,CAAoBpM,KADtB,EAEE,4DACE,2DAHJ;;;WAOKnB,IAAP;;;EAIF2X,gBAAgB,CAAC3R,IAAD,EAAqB;QAC/B,KAAKxB,KAAL,CAAWmH,MAAX,KAAsB3F,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;aAC9C,KAAK6R,QAAL,CAAcpT,KAAE,CAACzJ,UAAjB,EAA6B,CAA7B,CAAP;KADF,MAEO;aACE,MAAM2c,gBAAN,CAAuB3R,IAAvB,CAAP;;;;EAIJuQ,gBAAgB,CACdwB,QADc,EAEdtS,SAFc,EAGdlD,kBAHc,EAIa;SACtB,IAAI+G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyO,QAAQ,CAAC9V,MAA7B,EAAqCqH,CAAC,EAAtC,EAA0C;YAClClH,IAAI,GAAG2V,QAAQ,CAACzO,CAAD,CAArB;UACI,CAAClH,IAAL,EAAW;;cACHA,IAAI,CAACnC,IAAb;aACO,sBAAL;UACE8X,QAAQ,CAACzO,CAAD,CAAR,GAAc,KAAKqL,mBAAL,CAAyBvS,IAAzB,CAAd;;;aAEG,gBAAL;aACK,iBAAL;eACOF,KAAL,CACEE,IAAI,CAACjB,KADP,EAEE,6CAFF;;;;;WAOC,MAAMoV,gBAAN,CAAuBwB,QAAvB,EAAiCtS,SAAjC,EAA4ClD,kBAA5C,CAAP;;;EAGFoS,mBAAmB,CAAC3U,IAAD,EAAuC;IACxDA,IAAI,CAACqB,UAAL,CAAgBkM,cAAhB,GAAiCvN,IAAI,CAACuN,cAAtC;SAEKC,gBAAL,CACExN,IAAI,CAACqB,UADP,EAEErB,IAAI,CAACuN,cAAL,CAAoB9L,GAFtB,EAGEzB,IAAI,CAACuN,cAAL,CAAoBnM,GAApB,CAAwBK,GAH1B;WAMOzB,IAAI,CAACqB,UAAZ;;;EAGF2W,gBAAgB,CACdD,QADc,EAEd0nB,UAFc,EAGiB;SAC1B,IAAIn2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyO,QAAQ,CAAC9V,MAA7B,EAAqCqH,CAAC,EAAtC,EAA0C;YAClClH,IAAI,GAAG2V,QAAQ,CAACzO,CAAD,CAArB;;UAEElH,IAAI,IACJA,IAAI,CAACs9B,aADL,IAEAt9B,IAAI,CAACnC,IAAL,KAAc,sBAHhB,EAIE;aACKiC,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,wCAAvB;;;;WAIG4W,QAAP;;;EAGFgD,gBAAgB,GAAG;WACV,KAAKtO,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KAAwB,MAAMyhB,gBAAN,EAA/B;;;EAGFV,qBAAqB,GAAY;WACxB,KAAK5N,KAAL,CAAWhI,KAAE,CAACnL,KAAd,KAAwB,MAAM+gB,qBAAN,EAA/B;;;EAGFslB,uBAAuB,GAAG;WAEjB,MAAMA,uBAAN,MAAmC,KAAKrB,eAAL,EAA1C;;;EAGF3O,+BAA+B,CAC7B3vB,IAD6B,EAER;QACjB,KAAKiN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;YACpBkP,aAAa,GAAG,KAAK4f,kBAAL,CAAwB,MAC5C,KAAK9H,oBAAL,EADoB,CAAtB;UAGI9X,aAAJ,EAAmBnc,IAAI,CAACoE,cAAL,GAAsB+X,aAAtB;;;WAEd,MAAMwT,+BAAN,CAAsC3vB,IAAtC,CAAP;;;EAGF4/B,iCAAiC,CAC/Bz/B,MAD+B,EAEvB;UACF0/B,SAAS,GAAG,MAAMD,iCAAN,CAAwCz/B,MAAxC,CAAlB;UACM2/B,UAAU,GAAG3/B,MAAM,CAAC6B,MAAP,CAAc,CAAd,CAAnB;UACM+9B,eAAe,GACnBD,UAAU,IACVA,UAAU,CAAC7/B,IAAX,KAAoB,YADpB,IAEA6/B,UAAU,CAAC7nC,IAAX,KAAoB,MAHtB;WAKO8nC,eAAe,GAAGF,SAAS,GAAG,CAAf,GAAmBA,SAAzC;;;CA3zEN;;ACxEAp7B,KAAE,CAACu7B,WAAH,GAAiB,IAAI1oC,SAAJ,CAAc,IAAd,EAAoB;EAAEL,UAAU,EAAE;CAAlC,CAAjB;AAyCA,oBAAgBmJ,UAAD,IACb,cAAcA,UAAd,CAAyB;EACvB6/B,gBAAgB,CACdC,YADc,EAE8B;QACxC,KAAKzzB,KAAL,CAAWhI,KAAE,CAACu7B,WAAd,CAAJ,EAAgC;YACxBhgC,IAAI,GAAG,KAAKkF,SAAL,EAAb;WACKyE,IAAL;WACKw2B,aAAL,CAAmB,kCAAnB;MAIAngC,IAAI,CAAC/H,IAAL,GAAY,MAAM6U,eAAN,CAAoC,IAApC,CAAZ;WAEKqzB,aAAL,CAAmB,kCAAnB;WACKv0B,MAAL,CAAYnH,KAAE,CAACu7B,WAAf;aACO,KAAKI,iBAAL,CAAuBpgC,IAAvB,EAA6BkgC,YAA7B,CAAP;;;;EAIJE,iBAAiB,CACfpgC,IADe,EAEfkgC,YAFe,EAG2B;UACpCG,UAAU,GAAG,CAAC,EAAErgC,IAAI,CAACkgC,YAAL,IAAqBlgC,IAAI,CAACC,IAAL,KAAc,aAArC,CAApB;IACAD,IAAI,CAACkgC,YAAL,GAAoBA,YAApB;WAEOG,UAAU,GAAGrgC,IAAH,GAAU,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAA3B;;;EAOF2X,gBAAgB,CAAC3R,IAAD,EAAe;QAE3BA,IAAI,OAAJ,IACA,KAAK6B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAFF,EAGE;aACO,KAAKwO,QAAL,CAAcpT,KAAE,CAACu7B,WAAjB,EAA8B,CAA9B,CAAP;;;WAGK,MAAMroB,gBAAN,CAAuB,GAAGN,SAA1B,CAAP;;;EAOF/S,aAAa,GAAmC;WAE5C,KAAK27B,gBAAL,CAAsB,YAAtB,KAAuC,MAAM37B,aAAN,CAAoB,GAAG+S,SAAvB,CADzC;;;EAKFvK,eAAe,GAAmC;WAM9C,KAAKmzB,gBAAL,CAAsB,YAAtB,KACA,MAAMnzB,eAAN,CAAsB,GAAGuK,SAAzB,CAFF;;;EAMF0C,iBAAiB,CAACxR,IAAD,EAAqB;QAIhCA,IAAI,KAAKuC,SAAb,EAAwB,MAAMiP,iBAAN,CAAwB,GAAG1C,SAA3B;;;EAO1BkoB,gBAAgB,GAAgC;WAE5C,KAAKU,gBAAL,CAAsB,SAAtB,KAAoC,MAAMV,gBAAN,CAAuB,GAAGloB,SAA1B,CADtC;;;EAKFlV,SAAS,CAACC,IAAD,EAA2B;QAC9BA,IAAI,CAACnC,IAAL,KAAc,aAAlB,EAAiC,MAAMkC,SAAN,CAAgB,GAAGkV,SAAnB;;;EAGnC7R,YAAY,CAACxF,IAAD,EAAuB;QAE/BA,IAAI,IACJA,IAAI,CAACC,IAAL,KAAc,aADd,IAEAD,IAAI,CAACkgC,YAAL,KAAsB,YAHxB,EAIE;MACAlgC,IAAI,CAACkgC,YAAL,GAAoB,SAApB;aACOlgC,IAAP;;;WAEK,MAAMwF,YAAN,CAAmB,GAAG6R,SAAtB,CAAP;;;EAOFipB,mBAAmB,CAACtgC,IAAD,EAA+C;QAC5DA,IAAI,CAACxI,KAAL,IAAcwI,IAAI,CAACxI,KAAL,CAAWyI,IAAX,KAAoB,aAAtC,EAAqD;UAC/CqgC,mBAAN,CAA0B,GAAGjpB,SAA7B;;;EAGFrC,wBAAwB,CACtBhV,IADsB,EAEtBoC,IAFsB,EAGS;QAE7BA,IAAI,CAACnC,IAAL,KAAc,aAAd,IACCmC,IAAI,CAACb,KAAL,IAAca,IAAI,CAACb,KAAL,CAAW8B,aAF5B,EAGE;aACO,MAAM2R,wBAAN,CAA+B,GAAGqC,SAAlC,CAAP;;;QAGE,KAAK5K,KAAL,CAAWhI,KAAE,CAACnL,KAAd,CAAJ,EAA0B;YAClB2H,IAAwB,GAAGjB,IAAjC;MACAiB,IAAI,CAACzJ,KAAL,GAAa,KAAK4oC,iBAAL,CAAuBh+B,IAAvB,EAA6B,YAA7B,CAAb;WACKuH,IAAL;MACA1I,IAAI,CAACkC,IAAL,GAAY,KAAK4R,cAAL,CAAoB,OAApB,CAAZ;aACO,KAAK5P,UAAL,CAAgBlE,IAAhB,EAAsB,kBAAtB,CAAP;;;SAGGwM,SAAL;IAEAzN,IAAI,CAAC/H,IAAL,GAAYmK,IAAI,CAACnK,IAAjB;WACO,KAAKmoC,iBAAL,CAAuBpgC,IAAvB,EAA6B,WAA7B,CAAP;;;EAGFugC,UAAU,GAAuC;WAE7C,KAAKN,gBAAL,CAAsB,gBAAtB,KACA,MAAMM,UAAN,CAAiB,GAAGlpB,SAApB,CAFF;;;EAMFmpB,eAAe,GAAoC;WAE/C,KAAKP,gBAAL,CAAsB,YAAtB,KACA,MAAMO,eAAN,CAAsB,GAAGnpB,SAAzB,CAFF;;;EAMFglB,UAAU,CACRr8B,IADQ,EAERyX,WAFQ,EAGRC,UAHQ,EAIL;UACGzX,IAAI,GAAGwX,WAAW,GAAG,kBAAH,GAAwB,iBAAhD;SAEK9N,IAAL;SACK82B,cAAL,CAAoBzgC,IAApB;UAEMggC,WAAW,GAAG,KAAKC,gBAAL,CAAsB,YAAtB,CAApB;;QACID,WAAJ,EAAiB;UAEb,KAAKvzB,KAAL,CAAWhI,KAAE,CAAC1H,QAAd,KACA,KAAK0P,KAAL,CAAWhI,KAAE,CAACu7B,WAAd,CADA,IAEA,KAAKvzB,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAHF,EAIE;QACAkH,IAAI,CAAC6M,EAAL,GAAUmzB,WAAV;OALF,MAMO,IAAItoB,UAAU,IAAI,CAACD,WAAnB,EAAgC;QACrCzX,IAAI,CAAC6M,EAAL,GAAU,IAAV;QACA7M,IAAI,CAACmD,IAAL,GAAY,KAAKi9B,iBAAL,CAAuBJ,WAAvB,EAAoC,WAApC,CAAZ;eACO,KAAK76B,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;OAHK,MAIA;aACA8N,UAAL,CAAgB,IAAhB,EAAsB,0BAAtB;;KAZJ,MAcO;WACAyJ,YAAL,CAAkBxX,IAAlB,EAAwByX,WAAxB,EAAqCC,UAArC;;;SAGGc,eAAL,CAAqBxY,IAArB;IACAA,IAAI,CAACmD,IAAL,GACE,KAAK88B,gBAAL,CAAsB,WAAtB,KACA,KAAKS,cAAL,CAAoB,CAAC,CAAC1gC,IAAI,CAACI,UAA3B,CAFF;WAGO,KAAK+E,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;;;EAGFgP,WAAW,CAACjP,IAAD,EAAuB;UAC1BggC,WAAW,GAAG,KAAKC,gBAAL,CAAsB,YAAtB,CAApB;QACI,CAACD,WAAL,EAAkB,OAAO,MAAM/wB,WAAN,CAAkB,GAAGoI,SAArB,CAAP;;QAEd,CAAC,KAAKnJ,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKzB,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAnC,EAAyD;MAEvD4G,IAAI,CAACiX,UAAL,GAAkB,EAAlB;MACAjX,IAAI,CAAC8F,MAAL,GAAc,IAAd;MACA9F,IAAI,CAACgK,WAAL,GAAmB,KAAKo2B,iBAAL,CAAuBJ,WAAvB,EAAoC,aAApC,CAAnB;aACO,KAAK76B,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;SAIGgc,YAAL,CAAkB,mBAAlB;UACM9C,SAAS,GAAG,KAAKhU,SAAL,EAAlB;IACAgU,SAAS,CAACynB,QAAV,GAAqBX,WAArB;IACAhgC,IAAI,CAACiX,UAAL,GAAkB,CAAC,KAAK9R,UAAL,CAAgB+T,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;WAEO,MAAMjK,WAAN,CAAkBjP,IAAlB,CAAP;;;EAGF4gC,gCAAgC,CAAC5gC,IAAD,EAAwB;QAClDA,IAAI,CAACiX,UAAL,IAAmBjX,IAAI,CAACiX,UAAL,CAAgBhV,MAAhB,GAAyB,CAAhD,EAAmD;aAE1C,IAAP;;;WAEK,MAAM2+B,gCAAN,CAAuC,GAAGvpB,SAA1C,CAAP;;;EAGFwpB,WAAW,CAAC7gC,IAAD,EAAuC;UAC1C;MAAEiX;QAAejX,IAAvB;;QACIiX,UAAU,IAAIA,UAAU,CAAChV,MAA7B,EAAqC;MACnCjC,IAAI,CAACiX,UAAL,GAAkBA,UAAU,CAAC6pB,MAAX,CAChB9gC,IAAI,IAAIA,IAAI,CAAC2gC,QAAL,CAAc1gC,IAAd,KAAuB,aADf,CAAlB;;;UAII4gC,WAAN,CAAkB7gC,IAAlB;IACAA,IAAI,CAACiX,UAAL,GAAkBA,UAAlB;;;EAGFvI,WAAW,CACT1O,IADS,EAE0C;UAC7CggC,WAAW,GAAG,KAAKC,gBAAL,CAAsB,YAAtB,CAApB;QACI,CAACD,WAAL,EAAkB,OAAO,MAAMtxB,WAAN,CAAkB,GAAG2I,SAArB,CAAP;IAElBrX,IAAI,CAACiX,UAAL,GAAkB,EAAlB;;QAEI,CAAC,KAAK/I,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKzB,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAnC,EAAyD;MAEvD4G,IAAI,CAAC8F,MAAL,GAAc,KAAKs6B,iBAAL,CAAuBJ,WAAvB,EAAoC,eAApC,CAAd;WACKvyB,SAAL;aACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;UAIIkZ,SAAS,GAAG,KAAKib,eAAL,CAAqB6L,WAArB,CAAlB;IACA9mB,SAAS,CAACC,KAAV,GAAkB6mB,WAAlB;SACK76B,UAAL,CAAgB+T,SAAhB,EAA2B,wBAA3B;IACAlZ,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB6U,SAArB;;QAEI,KAAK7M,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAJ,EAAwB;YAEhB2nC,aAAa,GAAG,KAAKC,6BAAL,CAAmChhC,IAAnC,CAAtB;UAGI,CAAC+gC,aAAL,EAAoB,KAAKE,0BAAL,CAAgCjhC,IAAhC;;;SAGjBkM,gBAAL,CAAsB,MAAtB;IACAlM,IAAI,CAAC8F,MAAL,GAAc,KAAKo7B,iBAAL,EAAd;SACKzzB,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGFkhC,iBAAiB,GAAsC;WAInD,KAAKjB,gBAAL,CAAsB,eAAtB,KACA,MAAMiB,iBAAN,CAAwB,GAAG7pB,SAA3B,CAFF;;;CArQN;;ACvCO,SAASmD,SAAT,CAAmB2mB,OAAnB,EAAwClpC,IAAxC,EAA+D;SAC7DkpC,OAAO,CAACC,IAAR,CAAaC,MAAM,IAAI;QACxBC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;aAClBA,MAAM,CAAC,CAAD,CAAN,KAAcppC,IAArB;KADF,MAEO;aACEopC,MAAM,KAAKppC,IAAlB;;GAJG,CAAP;;AASF,AAAO,SAAS+S,eAAT,CACLm2B,OADK,EAELlpC,IAFK,EAGLupC,MAHK,EAIL;QACMH,MAAM,GAAGF,OAAO,CAACxI,IAAR,CAAa0I,MAAM,IAAI;QAChCC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;aAClBA,MAAM,CAAC,CAAD,CAAN,KAAcppC,IAArB;KADF,MAEO;aACEopC,MAAM,KAAKppC,IAAlB;;GAJW,CAAf;;MAQIopC,MAAM,IAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAd,EAAqC;WAC5BA,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,CAAP;;;SAGK,IAAP;;AAGF,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,CAA3B;AAEA,AAAO,SAASC,eAAT,CAAyBP,OAAzB,EAA8C;MAC/C3mB,SAAS,CAAC2mB,OAAD,EAAU,YAAV,CAAb,EAAsC;QAChC3mB,SAAS,CAAC2mB,OAAD,EAAU,mBAAV,CAAb,EAA6C;YACrC,IAAI51B,KAAJ,CACJ,iEADI,CAAN;;;UAKIo2B,sBAAsB,GAAG32B,eAAe,CAC5Cm2B,OAD4C,EAE5C,YAF4C,EAG5C,wBAH4C,CAA9C;;QAKIQ,sBAAsB,IAAI,IAA9B,EAAoC;YAC5B,IAAIp2B,KAAJ,CACJ,wEACE,2DADF,GAEE,kEAFF,GAGE,qEAJE,CAAN;KADF,MAOO,IAAI,OAAOo2B,sBAAP,KAAkC,SAAtC,EAAiD;YAChD,IAAIp2B,KAAJ,CAAU,6CAAV,CAAN;;;;MAIAiP,SAAS,CAAC2mB,OAAD,EAAU,MAAV,CAAT,IAA8B3mB,SAAS,CAAC2mB,OAAD,EAAU,YAAV,CAA3C,EAAoE;UAC5D,IAAI51B,KAAJ,CAAU,6CAAV,CAAN;;;MAIAiP,SAAS,CAAC2mB,OAAD,EAAU,kBAAV,CAAT,IACA,CAACM,kBAAkB,CAACtkB,QAAnB,CACCnS,eAAe,CAACm2B,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CADhB,CAFH,EAKE;UACM,IAAI51B,KAAJ,CACJ,iFACEk2B,kBAAkB,CAAC79B,GAAnB,CAAuBgD,CAAC,IAAK,IAAGA,CAAE,GAAlC,EAAsCg7B,IAAtC,CAA2C,IAA3C,CAFE,CAAN;;;AASJ,AAOO,MAAMC,YAA6C,GAAG;EAC3DC,MAD2D;EAE3DC,GAF2D;EAG3DC,IAH2D;EAI3DC,UAJ2D;EAK3DC;CALK;AAQP,AAAO,MAAMC,gBAAwC,GAAGC,MAAM,CAACC,IAAP,CACtDR,YADsD,CAAjD;;AC5EA,MAAMS,cAAuB,GAAG;EAErCC,UAAU,EAAE,QAFyB;EAIrCC,cAAc,EAAE13B,SAJqB;EAOrC23B,SAAS,EAAE,CAP0B;EAUrCC,yBAAyB,EAAE,KAVU;EAarCC,0BAA0B,EAAE,KAbS;EAgBrCC,2BAA2B,EAAE,KAhBQ;EAkBrCC,uBAAuB,EAAE,KAlBY;EAoBrCC,sBAAsB,EAAE,KApBa;EAsBrC3B,OAAO,EAAE,EAtB4B;EAwBrC4B,UAAU,EAAE,IAxByB;EAiCrCC,MAAM,EAAE,KAjC6B;EAmCrCC,MAAM,EAAE,KAnC6B;EAsCrCC,8BAA8B,EAAE;CAtC3B;AA2CP,AAAO,SAASC,UAAT,CAAoBC,IAApB,EAA6C;QAC5ClrC,OAAY,GAAG,EAArB;;kCACkBkqC,MAAM,CAACC,IAAP,CAAYC,cAAZ,CAFgC,kCAEH;UAApCx/B,GAAG,mBAAT;IACH5K,OAAO,CAAC4K,GAAD,CAAP,GAAesgC,IAAI,IAAIA,IAAI,CAACtgC,GAAD,CAAJ,IAAa,IAArB,GAA4BsgC,IAAI,CAACtgC,GAAD,CAAhC,GAAwCw/B,cAAc,CAACx/B,GAAD,CAArE;;;SAEK5K,OAAP;;;AC9DK,MAAMmrC,QAAN,CAAe;EAIpB9rC,WAAW,CAAC4U,IAAD,EAAem3B,GAAf,EAA4B;SAChCn3B,IAAL,GAAYA,IAAZ;SACKC,MAAL,GAAck3B,GAAd;;;;AAIJ,AAAO,MAAMC,cAAN,CAAqB;EAM1BhsC,WAAW,CAAC4J,KAAD,EAAkBM,GAAlB,EAAkC;SACtCN,KAAL,GAAaA,KAAb;SAEKM,GAAL,GAAWA,GAAX;;;;AAUJ,AAAO,SAAS+hC,WAAT,CAAqB37B,KAArB,EAAoC47B,MAApC,EAA8D;MAC/Dt3B,IAAI,GAAG,CAAX;MACIiiB,SAAS,GAAG,CAAhB;MACI3hB,KAAJ;EACA5G,UAAU,CAAC69B,SAAX,GAAuB,CAAvB;;SACO,CAACj3B,KAAK,GAAG5G,UAAU,CAACyF,IAAX,CAAgBzD,KAAhB,CAAT,KAAoC4E,KAAK,CAACk3B,KAAN,GAAcF,MAAzD,EAAiE;IAC/Dt3B,IAAI;IACJiiB,SAAS,GAAGvoB,UAAU,CAAC69B,SAAvB;;;SAGK,IAAIL,QAAJ,CAAal3B,IAAb,EAAmBs3B,MAAM,GAAGrV,SAA5B,CAAP;;;AC3Ca,MAAMwV,UAAN,CAAiB;;SAO9BC,iBAP8B,GAOD,KAPC;;;EAgB9BrpB,SAAS,CAACviB,IAAD,EAAwB;WACxB,KAAKkpC,OAAL,CAAaz4B,GAAb,CAAiBzQ,IAAjB,CAAP;;;EAGF+S,eAAe,CAACq2B,MAAD,EAAiBppC,IAAjB,EAA+B;QAExC,KAAKuiB,SAAL,CAAe6mB,MAAf,CAAJ,EAA4B,OAAO,KAAKF,OAAL,CAAa2C,GAAb,CAAiBzC,MAAjB,EAAyBppC,IAAzB,CAAP;;;;;ACAhC,SAAS8rC,IAAT,CAAiB1tB,KAAjB,EAA8C;SACrCA,KAAK,CAACA,KAAK,CAACpU,MAAN,GAAe,CAAhB,CAAZ;;;AAGF,AAAe,MAAM+hC,cAAN,SAA6BJ,UAA7B,CAAwC;EACrDz4B,UAAU,CAACC,OAAD,EAAyB;QAC7B,KAAK64B,QAAT,EAAmB74B,OAAO,CAAChK,GAAR,CAAY6iC,QAAZ,GAAuB,KAAKA,QAA5B;SACdz/B,KAAL,CAAW0/B,gBAAX,CAA4B7/B,IAA5B,CAAiC+G,OAAjC;SACK5G,KAAL,CAAW2/B,eAAX,CAA2B9/B,IAA3B,CAAgC+G,OAAhC;;;EAGFg5B,cAAc,CAACpkC,IAAD,EAAmB;QAC3BA,IAAI,CAACC,IAAL,KAAc,SAAd,IAA2BD,IAAI,CAACmD,IAAL,CAAUlB,MAAV,GAAmB,CAAlD,EAAqD;UAE/CoU,KAAK,GAAG,KAAK7R,KAAL,CAAW6/B,YAAzB;QAEIC,UAAJ,EAAgBC,SAAhB,EAA2BL,gBAA3B,EAA6C56B,CAA7C,EAAgDk7B,CAAhD;;QAEI,KAAKhgC,KAAL,CAAW0/B,gBAAX,CAA4BjiC,MAA5B,GAAqC,CAAzC,EAA4C;UAKtC,KAAKuC,KAAL,CAAW0/B,gBAAX,CAA4B,CAA5B,EAA+B/iC,KAA/B,IAAwCnB,IAAI,CAACyB,GAAjD,EAAsD;QACpDyiC,gBAAgB,GAAG,KAAK1/B,KAAL,CAAW0/B,gBAA9B;aACK1/B,KAAL,CAAW0/B,gBAAX,GAA8B,EAA9B;OAFF,MAGO;aAOA1/B,KAAL,CAAW0/B,gBAAX,CAA4BjiC,MAA5B,GAAqC,CAArC;;KAfJ,MAiBO,IAAIoU,KAAK,CAACpU,MAAN,GAAe,CAAnB,EAAsB;YACrBwiC,WAAW,GAAGV,IAAI,CAAC1tB,KAAD,CAAxB;;UAEEouB,WAAW,CAACP,gBAAZ,IACAO,WAAW,CAACP,gBAAZ,CAA6B,CAA7B,EAAgC/iC,KAAhC,IAAyCnB,IAAI,CAACyB,GAFhD,EAGE;QACAyiC,gBAAgB,GAAGO,WAAW,CAACP,gBAA/B;eACOO,WAAW,CAACP,gBAAnB;;;;QAKA7tB,KAAK,CAACpU,MAAN,GAAe,CAAf,IAAoB8hC,IAAI,CAAC1tB,KAAD,CAAJ,CAAYlV,KAAZ,IAAqBnB,IAAI,CAACmB,KAAlD,EAAyD;MACvDmjC,UAAU,GAAGjuB,KAAK,CAAClP,GAAN,EAAb;;;WAGKkP,KAAK,CAACpU,MAAN,GAAe,CAAf,IAAoB8hC,IAAI,CAAC1tB,KAAD,CAAJ,CAAYlV,KAAZ,IAAqBnB,IAAI,CAACmB,KAArD,EAA4D;MAC1DojC,SAAS,GAAGluB,KAAK,CAAClP,GAAN,EAAZ;;;QAGE,CAACo9B,SAAD,IAAcD,UAAlB,EAA8BC,SAAS,GAAGD,UAAZ;;QAK1BA,UAAU,IAAI,KAAK9/B,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3B,GAAoC,CAAtD,EAAyD;YACjDyiC,WAAW,GAAGX,IAAI,CAAC,KAAKv/B,KAAL,CAAW2/B,eAAZ,CAAxB;;UAEIG,UAAU,CAACrkC,IAAX,KAAoB,gBAAxB,EAA0C;YACpCykC,WAAW,CAACvjC,KAAZ,IAAqBnB,IAAI,CAACmB,KAA9B,EAAqC;cAC/B,KAAKqD,KAAL,CAAWmgC,mBAAf,EAAoC;iBAC7BH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3C,EAAmDuiC,CAAC,EAApD,EAAwD;kBAEpD,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BK,CAA3B,EAA8B/iC,GAA9B,GACA,KAAK+C,KAAL,CAAWmgC,mBAAX,CAA+BljC,GAFjC,EAGE;qBACK+C,KAAL,CAAW2/B,eAAX,CAA2BS,MAA3B,CAAkCJ,CAAlC,EAAqC,CAArC;gBACAA,CAAC;;;;gBAID,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3B,GAAoC,CAAxC,EAA2C;cACzCqiC,UAAU,CAACJ,gBAAX,GAA8B,KAAK1/B,KAAL,CAAW2/B,eAAzC;mBACK3/B,KAAL,CAAW2/B,eAAX,GAA6B,EAA7B;;;;OAfR,MAmBO,IACLnkC,IAAI,CAACC,IAAL,KAAc,gBAAd,IACAD,IAAI,CAACqX,SADL,IAEArX,IAAI,CAACqX,SAAL,CAAepV,MAHV,EAIL;cACM4iC,OAAO,GAAGd,IAAI,CAAC/jC,IAAI,CAACqX,SAAN,CAApB;;YAGEwtB,OAAO,IACPH,WAAW,CAACvjC,KAAZ,IAAqB0jC,OAAO,CAAC1jC,KAD7B,IAEAujC,WAAW,CAACjjC,GAAZ,IAAmBzB,IAAI,CAACyB,GAH1B,EAIE;cACI,KAAK+C,KAAL,CAAWmgC,mBAAf,EAAoC;iBAC7BH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3C,EAAmDuiC,CAAC,EAApD,EAAwD;kBAEpD,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BK,CAA3B,EAA8B/iC,GAA9B,GACA,KAAK+C,KAAL,CAAWmgC,mBAAX,CAA+BljC,GAFjC,EAGE;qBACK+C,KAAL,CAAW2/B,eAAX,CAA2BS,MAA3B,CAAkCJ,CAAlC,EAAqC,CAArC;gBACAA,CAAC;;;;gBAGD,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3B,GAAoC,CAAxC,EAA2C;cACzC4iC,OAAO,CAACX,gBAAR,GAA2B,KAAK1/B,KAAL,CAAW2/B,eAAtC;mBACK3/B,KAAL,CAAW2/B,eAAX,GAA6B,EAA7B;;;;;;;QAONI,SAAJ,EAAe;UACTA,SAAS,CAACJ,eAAd,EAA+B;YAE3BI,SAAS,KAAKvkC,IAAd,IACAukC,SAAS,CAACJ,eAAV,CAA0BliC,MAA1B,GAAmC,CADnC,IAEA8hC,IAAI,CAACQ,SAAS,CAACJ,eAAX,CAAJ,CAAgC1iC,GAAhC,IAAuCzB,IAAI,CAACmB,KAH9C,EAIE;UACAnB,IAAI,CAACmkC,eAAL,GAAuBI,SAAS,CAACJ,eAAjC;iBACOI,SAAS,CAACJ,eAAjB;SANF,MAOO;eAIA76B,CAAC,GAAGi7B,SAAS,CAACJ,eAAV,CAA0BliC,MAA1B,GAAmC,CAA5C,EAA+CqH,CAAC,IAAI,CAApD,EAAuD,EAAEA,CAAzD,EAA4D;gBACtDi7B,SAAS,CAACJ,eAAV,CAA0B76B,CAA1B,EAA6B7H,GAA7B,IAAoCzB,IAAI,CAACmB,KAA7C,EAAoD;cAClDnB,IAAI,CAACmkC,eAAL,GAAuBI,SAAS,CAACJ,eAAV,CAA0BS,MAA1B,CAAiC,CAAjC,EAAoCt7B,CAAC,GAAG,CAAxC,CAAvB;;;;;;KAfV,MAqBO,IAAI,KAAK9E,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3B,GAAoC,CAAxC,EAA2C;UAC5C8hC,IAAI,CAAC,KAAKv/B,KAAL,CAAW2/B,eAAZ,CAAJ,CAAiC1iC,GAAjC,IAAwCzB,IAAI,CAACmB,KAAjD,EAAwD;YAClD,KAAKqD,KAAL,CAAWmgC,mBAAf,EAAoC;eAC7BH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3C,EAAmDuiC,CAAC,EAApD,EAAwD;gBAEpD,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BK,CAA3B,EAA8B/iC,GAA9B,GACA,KAAK+C,KAAL,CAAWmgC,mBAAX,CAA+BljC,GAFjC,EAGE;mBACK+C,KAAL,CAAW2/B,eAAX,CAA2BS,MAA3B,CAAkCJ,CAAlC,EAAqC,CAArC;cACAA,CAAC;;;;;YAIH,KAAKhgC,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3B,GAAoC,CAAxC,EAA2C;UACzCjC,IAAI,CAACmkC,eAAL,GAAuB,KAAK3/B,KAAL,CAAW2/B,eAAlC;eACK3/B,KAAL,CAAW2/B,eAAX,GAA6B,EAA7B;;OAdJ,MAgBO;aAYA76B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAK9E,KAAL,CAAW2/B,eAAX,CAA2BliC,MAA3C,EAAmDqH,CAAC,EAApD,EAAwD;cAClD,KAAK9E,KAAL,CAAW2/B,eAAX,CAA2B76B,CAA3B,EAA8B7H,GAA9B,GAAoCzB,IAAI,CAACmB,KAA7C,EAAoD;;;;;cAShDgjC,eAAe,GAAG,KAAK3/B,KAAL,CAAW2/B,eAAX,CAA2BziC,KAA3B,CAAiC,CAAjC,EAAoC4H,CAApC,CAAxB;;YAEI66B,eAAe,CAACliC,MAApB,EAA4B;UAC1BjC,IAAI,CAACmkC,eAAL,GAAuBA,eAAvB;;;QAKFD,gBAAgB,GAAG,KAAK1/B,KAAL,CAAW2/B,eAAX,CAA2BziC,KAA3B,CAAiC4H,CAAjC,CAAnB;;YACI46B,gBAAgB,CAACjiC,MAAjB,KAA4B,CAAhC,EAAmC;UACjCiiC,gBAAgB,GAAG,IAAnB;;;;;SAKD1/B,KAAL,CAAWmgC,mBAAX,GAAiC3kC,IAAjC;;QAEIkkC,gBAAJ,EAAsB;UAElBA,gBAAgB,CAACjiC,MAAjB,IACAiiC,gBAAgB,CAAC,CAAD,CAAhB,CAAoB/iC,KAApB,IAA6BnB,IAAI,CAACmB,KADlC,IAEA4iC,IAAI,CAACG,gBAAD,CAAJ,CAAuBziC,GAAvB,IAA8BzB,IAAI,CAACyB,GAHrC,EAIE;QACAzB,IAAI,CAAC8kC,aAAL,GAAqBZ,gBAArB;OALF,MAMO;QACLlkC,IAAI,CAACkkC,gBAAL,GAAwBA,gBAAxB;;;;IAIJ7tB,KAAK,CAAChS,IAAN,CAAWrE,IAAX;;;;;AC5NW,MAAM+kC,cAAN,SAA6Bf,cAA7B,CAA4C;EACzDgB,sBAAsB,CAAC37B,GAAD,EAAwB;QACxCjI,GAAJ;QACIiI,GAAG,KAAK,KAAK7E,KAAL,CAAWrD,KAAvB,EAA8BC,GAAG,GAAG,KAAKoD,KAAL,CAAWG,QAAjB,CAA9B,KACK,IAAI0E,GAAG,KAAK,KAAK7E,KAAL,CAAWwJ,YAAvB,EAAqC5M,GAAG,GAAG,KAAKoD,KAAL,CAAWygC,eAAjB,CAArC,KACA,IAAI57B,GAAG,KAAK,KAAK7E,KAAL,CAAW/C,GAAvB,EAA4BL,GAAG,GAAG,KAAKoD,KAAL,CAAW0gC,MAAjB,CAA5B,KACA,IAAI77B,GAAG,KAAK,KAAK7E,KAAL,CAAWsD,UAAvB,EAAmC1G,GAAG,GAAG,KAAKoD,KAAL,CAAW8qB,aAAjB,CAAnC,KACAluB,GAAG,GAAGoiC,WAAW,CAAC,KAAK37B,KAAN,EAAawB,GAAb,CAAjB;WAEEjI,GAAP;;;EAGFc,KAAK,CACHmH,GADG,EAEH87B,OAFG,EAGH;IACEC,kBADF;IAEEp/B;MAIE,EATD,EAUI;UACD5E,GAAG,GAAG,KAAK4jC,sBAAL,CAA4B37B,GAA5B,CAAZ;IAEA87B,OAAO,IAAK,KAAI/jC,GAAG,CAAC+K,IAAK,IAAG/K,GAAG,CAACgL,MAAO,GAAvC;UAEMmJ,GAAiD,GAAG,IAAIC,WAAJ,CACxD2vB,OADwD,CAA1D;IAGA5vB,GAAG,CAAClM,GAAJ,GAAUA,GAAV;IACAkM,GAAG,CAACnU,GAAJ,GAAUA,GAAV;;QACIgkC,kBAAJ,EAAwB;MACtB7vB,GAAG,CAAC8vB,aAAJ,GAAoBD,kBAApB;;;QAEEp/B,IAAI,KAAK8E,SAAb,EAAwB;MACtByK,GAAG,CAACvP,IAAJ,GAAWA,IAAX;;;UAEIuP,GAAN;;;;;AC1BW,MAAM+vB,KAAN,CAAY;;SAkBzBC,gBAlByB,GAkBE,CAAC,CAlBH;SAwBzB7vB,SAxByB,GAwBH,EAxBG;SAgCzBS,yBAhCyB,GAgCa,EAhCb;SAqCzBqvB,kBArCyB,GAqCI,CAAC,CArCL;SAwCzBC,YAxCyB,GAwCD,KAxCC;SAyCzBC,sBAzCyB,GAyCS,KAzCT;SA0CzBC,UA1CyB,GA0CH,KA1CG;SA2CzBh6B,MA3CyB,GA2CP,KA3CO;SA4CzB+F,kBA5CyB,GA4CK,KA5CL;SA6CzB8e,cA7CyB,GA6CC,KA7CD;SA8CzBoV,eA9CyB,GA8CE,KA9CF;SA+CzBppB,cA/CyB,GA+CC,KA/CD;SAgDzB/U,UAhDyB,GAgDH,KAhDG;SAmDzBo+B,YAnDyB,GAmDS;MAChCC,wBAAwB,EAAE,CADM;MAEhCC,aAAa,EAAE;KArDQ;SAyDzBC,SAzDyB,GAyDJ,KAzDI;SA0DzBC,0BA1DyB,GA0Da,KA1Db;SA6DzBC,UA7DyB,GA6DJ,CA7DI;SAgEzBC,MAhEyB,GAoEpB,EApEoB;SAyEzBC,cAzEyB,GAyEmB,CAAC,EAAD,CAzEnB;SA4EzBC,QA5EyB,GA4EN,CA5EM;SA6EzBC,QA7EyB,GA6EN,CA7EM;SAgFzBrD,MAhFyB,GAgFU,EAhFV;SAmFzBsD,QAnFyB,GAmFI,EAnFJ;SAsFzBrC,gBAtFyB,GAsFY,EAtFZ;SAuFzBC,eAvFyB,GAuFW,EAvFX;SAwFzBE,YAxFyB,GA6FpB,EA7FoB;SA+FzBM,mBA/FyB,GA+FK,IA/FL;SAkGzBt7B,GAlGyB,GAkGX,CAlGW;SAmGzB+kB,SAnGyB,GAmGL,CAnGK;SAuGzBnuB,IAvGyB,GAuGPwE,KAAE,CAAC9L,GAvGI;SA0GzBiI,KA1GyB,GA0GZ,IA1GY;SA6GzBO,KA7GyB,GA6GT,CA7GS;SA8GzBM,GA9GyB,GA8GX,CA9GW;SAkHzB6tB,aAlHyB,GAkHC,IAlHD;SAoHzB2V,eApHyB,GAoHG,IApHH;SAqHzBj3B,YArHyB,GAqHF,CArHE;SAsHzBlG,UAtHyB,GAsHJ,CAtHI;SA2HzBd,OA3HyB,GA2HI,CAACs4B,OAAE,CAAC/4B,cAAJ,CA3HJ;SA4HzBU,WA5HyB,GA4HF,IA5HE;SAiIzB3B,WAjIyB,GAiIF,KAjIE;SAoIzBkhC,aApIyB,GAoIA,KApIA;SAqIzBC,aArIyB,GAqIA,IArIA;SAyIzBC,mBAzIyB,GAyIY,EAzIZ;SA2IzBC,6BA3IyB,GA2IgB,IA3IhB;;;EASzBC,IAAI,CAAC1uC,OAAD,EAAyB;SACtB+P,MAAL,GACE/P,OAAO,CAAC6qC,UAAR,KAAuB,KAAvB,GAA+B,KAA/B,GAAuC7qC,OAAO,CAACqqC,UAAR,KAAuB,QADhE;SAGKpU,OAAL,GAAej2B,OAAO,CAACuqC,SAAvB;SACK99B,QAAL,GAAgB,KAAKugC,MAAL,GAAc,KAAK2B,WAAL,EAA9B;;;EA+HFA,WAAW,GAAa;WACf,IAAIxD,QAAJ,CAAa,KAAKlV,OAAlB,EAA2B,KAAK9kB,GAAL,GAAW,KAAK+kB,SAA3C,CAAP;;;EAGF9Y,KAAK,CAACwxB,UAAD,EAA8B;UAC3BtiC,KAAK,GAAG,IAAI8gC,KAAJ,EAAd;UACMjD,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAb;;SACK,IAAI/4B,CAAC,GAAG,CAAR,EAAWrH,MAAM,GAAGogC,IAAI,CAACpgC,MAA9B,EAAsCqH,CAAC,GAAGrH,MAA1C,EAAkDqH,CAAC,EAAnD,EAAuD;YAC/CxG,GAAG,GAAGu/B,IAAI,CAAC/4B,CAAD,CAAhB;UAEI4B,GAAG,GAAG,KAAKpI,GAAL,CAAV;;UAEI,CAACgkC,UAAD,IAAexF,KAAK,CAACC,OAAN,CAAcr2B,GAAd,CAAnB,EAAuC;QACrCA,GAAG,GAAGA,GAAG,CAACxJ,KAAJ,EAAN;;;MAIF8C,KAAK,CAAC1B,GAAD,CAAL,GAAaoI,GAAb;;;WAGK1G,KAAP;;;;;eCxLJ,SAASuiC,OAAT,CAAiB/gC,IAAjB,EAAuB;SACdA,IAAI,MAAJ,IAAkBA,IAAI,MAA7B;;AAiBF,MAAMghC,iBAAiB,GAAG,IAAI5+B,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAR,CAA1B;AAKA,MAAM6+B,iCAAiC,GAAG;EACxCC,SAAS,EAAE,kCAD6B;EAWxCC,GAAG,EAAE;CAXP;AAmBA,MAAMC,+BAA+B,GAAG,EAAxC;AACAA,+BAA+B,CAACC,GAAhC,GAAsC,QAAtC;AAKAD,+BAA+B,CAACE,GAAhC,GAAsC,CAEpC,GAAGF,+BAA+B,CAACC,GAFC,yBAAtC;AAWAD,+BAA+B,CAACG,GAAhC,GAAsC,CAEpC,GAAGH,+BAA+B,CAACE,GAFC,SAAtC;AAQAF,+BAA+B,CAACD,GAAhC,GAAsC,CAEpC,GAAGC,+BAA+B,CAACG,GAFC,oDAAtC;AAuBA,AAAO,MAAMC,KAAN,CAAY;EACjBjwC,WAAW,CAACiN,KAAD,EAAe;SACnBvE,IAAL,GAAYuE,KAAK,CAACvE,IAAlB;SACKW,KAAL,GAAa4D,KAAK,CAAC5D,KAAnB;SACKO,KAAL,GAAaqD,KAAK,CAACrD,KAAnB;SACKM,GAAL,GAAW+C,KAAK,CAAC/C,GAAjB;SACKL,GAAL,GAAW,IAAImiC,cAAJ,CAAmB/+B,KAAK,CAACG,QAAzB,EAAmCH,KAAK,CAAC0gC,MAAzC,CAAX;;;;AAYJ,AAAe,MAAMuC,SAAN,SAAwB1C,cAAxB,CAAuC;EAOpDxtC,WAAW,CAACW,OAAD,EAAmB2P,KAAnB,EAAkC;;SAEtCrD,KAAL,GAAa,IAAI8gC,KAAJ,EAAb;SACK9gC,KAAL,CAAWoiC,IAAX,CAAgB1uC,OAAhB;SACK2P,KAAL,GAAaA,KAAb;SACK5F,MAAL,GAAc4F,KAAK,CAAC5F,MAApB;SACKylC,WAAL,GAAmB,KAAnB;;;EAKF/9B,IAAI,GAAS;QACP,KAAKzR,OAAL,CAAa+qC,MAAb,IAAuB,CAAC,KAAKyE,WAAjC,EAA8C;WACvCljC,KAAL,CAAWy+B,MAAX,CAAkB5+B,IAAlB,CAAuB,IAAImjC,KAAJ,CAAU,KAAKhjC,KAAf,CAAvB;;;SAGGA,KAAL,CAAWsD,UAAX,GAAwB,KAAKtD,KAAL,CAAW/C,GAAnC;SACK+C,KAAL,CAAWwJ,YAAX,GAA0B,KAAKxJ,KAAL,CAAWrD,KAArC;SACKqD,KAAL,CAAW8qB,aAAX,GAA2B,KAAK9qB,KAAL,CAAW0gC,MAAtC;SACK1gC,KAAL,CAAWygC,eAAX,GAA6B,KAAKzgC,KAAL,CAAWG,QAAxC;SACK8X,SAAL;;;EAKFpQ,GAAG,CAACpM,IAAD,EAA2B;QACxB,KAAKwM,KAAL,CAAWxM,IAAX,CAAJ,EAAsB;WACf0J,IAAL;aACO,IAAP;KAFF,MAGO;aACE,KAAP;;;;EAMJ8C,KAAK,CAACxM,IAAD,EAA2B;WACvB,KAAKuE,KAAL,CAAWvE,IAAX,KAAoBA,IAA3B;;;EAKFiS,SAAS,GAAU;UACXy1B,GAAG,GAAG,KAAKnjC,KAAjB;SACKA,KAAL,GAAamjC,GAAG,CAACryB,KAAJ,CAAU,IAAV,CAAb;SAEKoyB,WAAL,GAAmB,IAAnB;SACK/9B,IAAL;SACK+9B,WAAL,GAAmB,KAAnB;UAEME,IAAI,GAAG,KAAKpjC,KAAlB;SACKA,KAAL,GAAamjC,GAAb;WACOC,IAAP;;;EAMFC,SAAS,CAAC5/B,MAAD,EAAwB;SAC1BzD,KAAL,CAAWyD,MAAX,GAAoBA,MAApB;QACI,CAAC,KAAKwE,KAAL,CAAWhI,KAAE,CAAClM,GAAd,CAAD,IAAuB,CAAC,KAAKkU,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAA5B,EAAmD;SAC9C8L,KAAL,CAAW6E,GAAX,GAAiB,KAAK7E,KAAL,CAAWrD,KAA5B;;WACO,KAAKqD,KAAL,CAAW6E,GAAX,GAAiB,KAAK7E,KAAL,CAAW4pB,SAAnC,EAA8C;WACvC5pB,KAAL,CAAW4pB,SAAX,GACE,KAAKvmB,KAAL,CAAWigC,WAAX,CAAuB,IAAvB,EAA6B,KAAKtjC,KAAL,CAAW4pB,SAAX,GAAuB,CAApD,IAAyD,CAD3D;QAEE,KAAK5pB,KAAL,CAAW2pB,OAAb;;;SAEG1R,SAAL;;;EAGFrV,UAAU,GAAe;WAChB,KAAK5C,KAAL,CAAWwC,OAAX,CAAmB,KAAKxC,KAAL,CAAWwC,OAAX,CAAmB/E,MAAnB,GAA4B,CAA/C,CAAP;;;EAMFwa,SAAS,GAAS;UACVrV,UAAU,GAAG,KAAKA,UAAL,EAAnB;QACI,CAACA,UAAD,IAAe,CAACA,UAAU,CAACf,aAA/B,EAA8C,KAAK0hC,SAAL;SAEzCvjC,KAAL,CAAWgiC,aAAX,GAA2B,KAA3B;SACKhiC,KAAL,CAAWiiC,aAAX,GAA2B,IAA3B;SACKjiC,KAAL,CAAWrD,KAAX,GAAmB,KAAKqD,KAAL,CAAW6E,GAA9B;SACK7E,KAAL,CAAWG,QAAX,GAAsB,KAAKH,KAAL,CAAWqiC,WAAX,EAAtB;;QACI,KAAKriC,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;WAC5BgJ,WAAL,CAAiBxG,KAAE,CAAC9L,GAApB;;;;QAIEyO,UAAU,CAACd,QAAf,EAAyB;MACvBc,UAAU,CAACd,QAAX,CAAoB,IAApB;KADF,MAEO;WACAqR,gBAAL,CAAsB,KAAK9P,KAAL,CAAWmgC,WAAX,CAAuB,KAAKxjC,KAAL,CAAW6E,GAAlC,CAAtB;;;;EAIJ4+B,WAAW,CACTC,KADS,EAETC,IAFS,EAGThnC,KAHS,EAITM,GAJS,EAKTkD,QALS,EAMTugC,MANS,EAOH;UACA95B,OAAO,GAAG;MACdnL,IAAI,EAAEioC,KAAK,GAAG,cAAH,GAAoB,aADjB;MAEdtnC,KAAK,EAAEunC,IAFO;MAGdhnC,KAAK,EAAEA,KAHO;MAIdM,GAAG,EAAEA,GAJS;MAKdL,GAAG,EAAE,IAAImiC,cAAJ,CAAmB5+B,QAAnB,EAA6BugC,MAA7B;KALP;QAQI,KAAKhtC,OAAL,CAAa+qC,MAAjB,EAAyB,KAAKz+B,KAAL,CAAWy+B,MAAX,CAAkB5+B,IAAlB,CAAuB+G,OAAvB;SACpB5G,KAAL,CAAW+hC,QAAX,CAAoBliC,IAApB,CAAyB+G,OAAzB;SACKD,UAAL,CAAgBC,OAAhB;;;EAGF2R,gBAAgB,GAAS;UACjBpY,QAAQ,GAAG,KAAKH,KAAL,CAAWqiC,WAAX,EAAjB;UACM1lC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;UACM5H,GAAG,GAAG,KAAKoG,KAAL,CAAW0I,OAAX,CAAmB,IAAnB,EAA0B,KAAK/L,KAAL,CAAW6E,GAAX,IAAkB,CAA5C,CAAZ;QACI5H,GAAG,KAAK,CAAC,CAAb,EAAgB,KAAKS,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAX,GAAiB,CAA5B,EAA+B,sBAA/B;SAEX7E,KAAL,CAAW6E,GAAX,GAAiB5H,GAAG,GAAG,CAAvB;IACAoE,UAAU,CAAC69B,SAAX,GAAuBviC,KAAvB;QACIsL,KAAJ;;WAEE,CAACA,KAAK,GAAG5G,UAAU,CAACyF,IAAX,CAAgB,KAAKzD,KAArB,CAAT,KACA4E,KAAK,CAACk3B,KAAN,GAAc,KAAKn/B,KAAL,CAAW6E,GAF3B,EAGE;QACE,KAAK7E,KAAL,CAAW2pB,OAAb;WACK3pB,KAAL,CAAW4pB,SAAX,GAAuB3hB,KAAK,CAACk3B,KAAN,GAAcl3B,KAAK,CAAC,CAAD,CAAL,CAASxK,MAA9C;;;QAKE,KAAKylC,WAAT,EAAsB;SAEjBO,WAAL,CACE,IADF,EAEE,KAAKpgC,KAAL,CAAWnG,KAAX,CAAiBP,KAAK,GAAG,CAAzB,EAA4BM,GAA5B,CAFF,EAGEN,KAHF,EAIE,KAAKqD,KAAL,CAAW6E,GAJb,EAKE1E,QALF,EAME,KAAKH,KAAL,CAAWqiC,WAAX,EANF;;;EAUFuB,eAAe,CAACC,SAAD,EAA0B;UACjClnC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;UACM1E,QAAQ,GAAG,KAAKH,KAAL,CAAWqiC,WAAX,EAAjB;QACI9Y,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAuB,KAAKpT,KAAL,CAAW6E,GAAX,IAAkBg/B,SAAzC,CAAT;;QACI,KAAK7jC,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAA1B,EAAkC;aAE9B8rB,EAAE,OAAF,IACAA,EAAE,OADF,IAEAA,EAAE,SAFF,IAGAA,EAAE,SAHF,IAIA,EAAE,KAAKvpB,KAAL,CAAW6E,GAAb,GAAmB,KAAKpH,MAL1B,EAME;QACA8rB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAL;;;;QAMA,KAAKq+B,WAAT,EAAsB;SAEjBO,WAAL,CACE,KADF,EAEE,KAAKpgC,KAAL,CAAWnG,KAAX,CAAiBP,KAAK,GAAGknC,SAAzB,EAAoC,KAAK7jC,KAAL,CAAW6E,GAA/C,CAFF,EAGElI,KAHF,EAIE,KAAKqD,KAAL,CAAW6E,GAJb,EAKE1E,QALF,EAME,KAAKH,KAAL,CAAWqiC,WAAX,EANF;;;EAaFkB,SAAS,GAAS;IAChBO,IAAI,EAAE,OAAO,KAAK9jC,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAA7B,EAAqC;YACnC8rB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;;cACQ0kB,EAAR;;;;YAIM,KAAKvpB,KAAL,CAAW6E,GAAb;;;;cAIE,KAAKxB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QADF,EAEE;cACE,KAAK7E,KAAL,CAAW6E,GAAb;;;;;;YAMA,KAAK7E,KAAL,CAAW6E,GAAb;YACE,KAAK7E,KAAL,CAAW2pB,OAAb;eACK3pB,KAAL,CAAW4pB,SAAX,GAAuB,KAAK5pB,KAAL,CAAW6E,GAAlC;;;;kBAIQ,KAAKxB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAR;;mBAES0T,gBAAL;;;;mBAIKqrB,eAAL,CAAqB,CAArB;;;;oBAIME,IAAN;;;;;;cAKApiC,YAAY,CAAC6nB,EAAD,CAAhB,EAAsB;cAClB,KAAKvpB,KAAL,CAAW6E,GAAb;WADF,MAEO;kBACCi/B,IAAN;;;;;;;EAWVr9B,WAAW,CAAChL,IAAD,EAAkBiL,GAAlB,EAAkC;SACtC1G,KAAL,CAAW/C,GAAX,GAAiB,KAAK+C,KAAL,CAAW6E,GAA5B;SACK7E,KAAL,CAAW0gC,MAAX,GAAoB,KAAK1gC,KAAL,CAAWqiC,WAAX,EAApB;UACMx/B,QAAQ,GAAG,KAAK7C,KAAL,CAAWvE,IAA5B;SACKuE,KAAL,CAAWvE,IAAX,GAAkBA,IAAlB;SACKuE,KAAL,CAAW5D,KAAX,GAAmBsK,GAAnB;QAEI,CAAC,KAAKw8B,WAAV,EAAuB,KAAK7vC,aAAL,CAAmBwP,QAAnB;;;EAazBkhC,oBAAoB,GAAS;QACvB,KAAK/jC,KAAL,CAAW6E,GAAX,KAAmB,CAAnB,IAAwB,KAAKm/B,qBAAL,EAA5B,EAA0D;;;;UAIpDC,OAAO,GAAG,KAAKjkC,KAAL,CAAW6E,GAAX,GAAiB,CAAjC;UACMM,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB6wB,OAAtB,CAAb;;QACI9+B,IAAI,MAAJ,IAA4BA,IAAI,MAApC,EAA0D;WACnDzH,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,mCAA3B;;;QAIA,CAAC,KAAKmR,SAAL,CAAe,wBAAf,KACC,KAAKA,SAAL,CAAe,qBAAf,CADF,KAEA,KAAKhW,KAAL,CAAW0hC,UAAX,GAAwB,CAH1B,EAIE;QACE,KAAK1hC,KAAL,CAAW6E,GAAb;WACK4B,WAAL,CAAiBxG,KAAE,CAACxK,IAApB;;KANF,MAQO,IACL,KAAK+Q,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OADpD,EAEL;WACK6M,QAAL,CAAcpT,KAAE,CAACxK,IAAjB,EAAuB,CAAvB;KAHK,MAIA;WACAiI,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,0BAA3B;;;;EAIJq/B,aAAa,GAAS;UACd/+B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QACIM,IAAI,MAAJ,IAA4BA,IAAI,MAApC,EAA0D;WACnDg/B,UAAL,CAAgB,IAAhB;;;;UAIIC,KAAK,GAAG,KAAK/gC,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAd;;QACIM,IAAI,OAAJ,IAA0Bi/B,KAAK,OAAnC,EAAuD;WAChDpkC,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;WACK4B,WAAL,CAAiBxG,KAAE,CAAC5K,QAApB;KAFF,MAGO;QACH,KAAK2K,KAAL,CAAW6E,GAAb;WACK4B,WAAL,CAAiBxG,KAAE,CAACjL,GAApB;;;;EAIJqvC,eAAe,GAAS;QAElB,KAAKrkC,KAAL,CAAWyC,WAAX,IAA0B,CAAC,KAAKzC,KAAL,CAAWmH,MAA1C,EAAkD;QAC9C,KAAKnH,KAAL,CAAW6E,GAAb;WACKy/B,UAAL;;;;UAIIn/B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QACIM,IAAI,OAAR,EAAiC;WAC1BkO,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;KADF,MAEO;WACAyd,QAAL,CAAcpT,KAAE,CAACpJ,KAAjB,EAAwB,CAAxB;;;;EAIJmtC,qBAAqB,GAAY;QAC3B,KAAKhkC,KAAL,CAAW6E,GAAX,KAAmB,CAAnB,IAAwB,KAAKpH,MAAL,GAAc,CAA1C,EAA6C,OAAO,KAAP;UAEvCd,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;SACK7E,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;QAEI0kB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAT;QACI0kB,EAAE,OAAN,EAAsC,OAAO,KAAP;;WAGpCA,EAAE,OAAF,IACAA,EAAE,OADF,IAEAA,EAAE,SAFF,IAGAA,EAAE,SAHF,IAIA,EAAE,KAAKvpB,KAAL,CAAW6E,GAAb,GAAmB,KAAKpH,MAL1B,EAME;MACA8rB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAL;;;UAGIzI,KAAK,GAAG,KAAKiH,KAAL,CAAWnG,KAAX,CAAiBP,KAAK,GAAG,CAAzB,EAA4B,KAAKqD,KAAL,CAAW6E,GAAvC,CAAd;SAEK4B,WAAL,CAAiBxG,KAAE,CAACvK,oBAApB,EAA0C0G,KAA1C;WAEO,IAAP;;;EAGF2b,qBAAqB,CAACvW,IAAD,EAAqB;QAEpC/F,IAAI,GAAG+F,IAAI,OAAJ,GAA8BvB,KAAE,CAACrJ,IAAjC,GAAwCqJ,KAAE,CAACtJ,MAAtD;QACI4tC,KAAK,GAAG,CAAZ;QACIp/B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAX;UACMpC,WAAW,GAAG,KAAKzC,KAAL,CAAWyC,WAA/B;;QAGIjB,IAAI,OAAJ,IAA+B2D,IAAI,OAAvC,EAAgE;MAC9Do/B,KAAK;MACLp/B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAP;MACApJ,IAAI,GAAGwE,KAAE,CAACnJ,QAAV;;;QAGEqO,IAAI,OAAJ,IAA+B,CAAC1C,WAApC,EAAiD;MAC/C8hC,KAAK;MACL9oC,IAAI,GAAGwE,KAAE,CAACrK,MAAV;;;SAGGyd,QAAL,CAAc5X,IAAd,EAAoB8oC,KAApB;;;EAGFrsB,kBAAkB,CAAC1W,IAAD,EAAqB;UAE/B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QAEIM,IAAI,KAAK3D,IAAb,EAAmB;UACb,KAAK6B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAAJ,EAAsE;aAC/DwO,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;OADF,MAEO;aACAyd,QAAL,CACE7R,IAAI,QAAJ,GAAiCvB,KAAE,CAAC/J,SAApC,GAAgD+J,KAAE,CAAC9J,UADrD,EAEE,CAFF;;;;;;QAQAqL,IAAI,QAAR,EAAoC;UAE9B2D,IAAI,OAAR,EAAoC;aAC7BkO,QAAL,CAAcpT,KAAE,CAACjK,QAAjB,EAA2B,CAA3B;;;;;QAKAmP,IAAI,OAAR,EAAiC;WAC1BkO,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;;;;SAIGyd,QAAL,CACE7R,IAAI,QAAJ,GAAiCvB,KAAE,CAAC7J,SAApC,GAAgD6J,KAAE,CAAC3J,UADrD,EAEE,CAFF;;;EAMFkuC,eAAe,GAAS;UAEhBr/B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QACIM,IAAI,OAAR,EAAiC;WAC1BkO,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;KADF,MAEO;WACAyd,QAAL,CAAcpT,KAAE,CAAC5J,UAAjB,EAA6B,CAA7B;;;;EAIJouC,kBAAkB,CAACjjC,IAAD,EAAqB;UAE/B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QAEIM,IAAI,KAAK3D,IAAb,EAAmB;UAEf2D,IAAI,OAAJ,IACA,CAAC,KAAKnB,QADN,IAEA,KAAKX,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAFA,KAGC,KAAK7E,KAAL,CAAWsD,UAAX,KAA0B,CAA1B,IACClC,SAAS,CAACgC,IAAV,CACE,KAAKC,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAW6E,GAAnD,CADF,CAJF,CADF,EAQE;aAEK++B,eAAL,CAAqB,CAArB;aACKL,SAAL;aACKtrB,SAAL;;;;WAGG5E,QAAL,CAAcpT,KAAE,CAACpK,MAAjB,EAAyB,CAAzB;;;;QAIEsP,IAAI,OAAR,EAAiC;WAC1BkO,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;KADF,MAEO;WACAyd,QAAL,CAAcpT,KAAE,CAACvJ,OAAjB,EAA0B,CAA1B;;;;EAIJguC,eAAe,CAACljC,IAAD,EAAqB;UAE5B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;QACI8/B,IAAI,GAAG,CAAX;;QAEIx/B,IAAI,KAAK3D,IAAb,EAAmB;MACjBmjC,IAAI,GACFnjC,IAAI,OAAJ,IACA,KAAK6B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QADA,GAEI,CAFJ,GAGI,CAJN;;UAKI,KAAKxB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB8/B,IAAvC,QAAJ,EAAyE;aAClEtxB,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB+uC,IAAI,GAAG,CAAhC;;;;WAGGtxB,QAAL,CAAcpT,KAAE,CAACxJ,QAAjB,EAA2BkuC,IAA3B;;;;QAKAx/B,IAAI,OAAJ,IACA3D,IAAI,OADJ,IAEA,CAAC,KAAKwC,QAFN,IAGA,KAAKX,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAHA,IAIA,KAAKxB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QALF,EAME;WAEK++B,eAAL,CAAqB,CAArB;WACKL,SAAL;WACKtrB,SAAL;;;;QAIE9S,IAAI,OAAR,EAAiC;MAE/Bw/B,IAAI,GAAG,CAAP;;;SAGGtxB,QAAL,CAAcpT,KAAE,CAACzJ,UAAjB,EAA6BmuC,IAA7B;;;EAGFC,iBAAiB,CAACpjC,IAAD,EAAqB;UAE9B2D,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;QACIM,IAAI,OAAR,EAAiC;WAC1BkO,QAAL,CACEpT,KAAE,CAAC1J,QADL,EAEE,KAAK8M,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,WACI,CADJ,GAEI,CAJN;;;;QAQErD,IAAI,OAAJ,IAA+B2D,IAAI,OAAvC,EAAmE;WAE5DnF,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;WACK4B,WAAL,CAAiBxG,KAAE,CAAC9K,KAApB;;;;SAGGke,QAAL,CAAc7R,IAAI,OAAJ,GAA8BvB,KAAE,CAACtK,EAAjC,GAAsCsK,KAAE,CAACnK,IAAvD,EAA6D,CAA7D;;;EAGF+uC,kBAAkB,GAAS;UAEnB1/B,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;UACMu/B,KAAK,GAAG,KAAK/gC,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAd;;QACIM,IAAI,OAAJ,IAAmC,CAAC,KAAKnF,KAAL,CAAWmH,MAAnD,EAA2D;UACrDi9B,KAAK,OAAT,EAAkC;aAE3B/wB,QAAL,CAAcpT,KAAE,CAACrK,MAAjB,EAAyB,CAAzB;OAFF,MAGO;aAEAyd,QAAL,CAAcpT,KAAE,CAAChK,iBAAjB,EAAoC,CAApC;;KANJ,MAQO,IACLkP,IAAI,OAAJ,IACA,EAAEi/B,KAAK,MAAL,IAA6BA,KAAK,MAApC,CAFK,EAGL;WAEKpkC,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;WACK4B,WAAL,CAAiBxG,KAAE,CAAC/K,WAApB;KANK,MAOA;QACH,KAAK8K,KAAL,CAAW6E,GAAb;WACK4B,WAAL,CAAiBxG,KAAE,CAAChL,QAApB;;;;EAIJke,gBAAgB,CAAC3R,IAAD,EAAqB;YAC3BA,IAAR;;aAKS0iC,aAAL;;;;UAKE,KAAKlkC,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACvL,MAApB;;;;UAGE,KAAKsL,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACtL,MAApB;;;;UAGE,KAAKqL,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACpL,IAApB;;;;UAGE,KAAKmL,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACrL,KAApB;;;;UAGE,KAAKoL,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAAC7L,QAApB;;;;UAGE,KAAK4L,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAAC5L,QAApB;;;;UAGE,KAAK2L,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAAC3L,MAApB;;;;UAGE,KAAK0L,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACzL,MAApB;;;;YAKE,KAAKwhB,SAAL,CAAe,cAAf,KACA,KAAK3S,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,QAFF,EAGE;eACKwO,QAAL,CAAcpT,KAAE,CAAClL,WAAjB,EAA8B,CAA9B;SAJF,MAKO;YACH,KAAKiL,KAAL,CAAW6E,GAAb;eACK4B,WAAL,CAAiBxG,KAAE,CAACnL,KAApB;;;;;;aAKG+vC,kBAAL;;;;UAIE,KAAK7kC,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAAC3K,SAApB;;;;;gBAIM6P,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;cAEIM,IAAI,QAAJ,IAAiCA,IAAI,OAAzC,EAAoE;iBAC7D2/B,eAAL,CAAqB,EAArB;;;;cAIE3/B,IAAI,QAAJ,IAAiCA,IAAI,OAAzC,EAAoE;iBAC7D2/B,eAAL,CAAqB,CAArB;;;;cAIE3/B,IAAI,OAAJ,IAAiCA,IAAI,OAAzC,EAAoE;iBAC7D2/B,eAAL,CAAqB,CAArB;;;;;;;;;;;;;;aAeGX,UAAL,CAAgB,KAAhB;;;;;aAMKY,UAAL,CAAgBvjC,IAAhB;;;;aASK6iC,eAAL;;;;;aAKKtsB,qBAAL,CAA2BvW,IAA3B;;;;;aAKK0W,kBAAL,CAAwB1W,IAAxB;;;;aAIKgjC,eAAL;;;;;aAKKC,kBAAL,CAAwBjjC,IAAxB;;;;;aAKKkjC,eAAL,CAAqBljC,IAArB;;;;;aAKKojC,iBAAL,CAAuBpjC,IAAvB;;;;aAIK6R,QAAL,CAAcpT,KAAE,CAAClK,KAAjB,EAAwB,CAAxB;;;;UAIE,KAAKiK,KAAL,CAAW6E,GAAb;aACK4B,WAAL,CAAiBxG,KAAE,CAACzK,EAApB;;;;aAIKuuC,oBAAL;;;;aAIKzwB,QAAL;;;;YAIIvO,iBAAiB,CAACvD,IAAD,CAArB,EAA6B;eACtB8R,QAAL;;;;;;SAKD5V,KAAL,CACE,KAAKsC,KAAL,CAAW6E,GADb,EAEG,yBAAwBtG,MAAM,CAAC4rB,aAAP,CAAqB3oB,IAArB,CAA2B,GAFtD;;;EAMF6R,QAAQ,CAAC5X,IAAD,EAAkBkpC,IAAlB,EAAsC;UACtC5a,GAAG,GAAG,KAAK1mB,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAW6E,GAA5B,EAAiC,KAAK7E,KAAL,CAAW6E,GAAX,GAAiB8/B,IAAlD,CAAZ;SACK3kC,KAAL,CAAW6E,GAAX,IAAkB8/B,IAAlB;SACKl+B,WAAL,CAAiBhL,IAAjB,EAAuBsuB,GAAvB;;;EAGFua,UAAU,GAAS;UACX3nC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;QACImgC,OAAJ,EAAaC,OAAb;;aACS;UACH,KAAKjlC,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;aAC5BC,KAAL,CAAWf,KAAX,EAAkB,iCAAlB;;;YAEI4sB,EAAE,GAAG,KAAKlmB,KAAL,CAAW6hC,MAAX,CAAkB,KAAKllC,KAAL,CAAW6E,GAA7B,CAAX;;UACIzD,SAAS,CAACgC,IAAV,CAAemmB,EAAf,CAAJ,EAAwB;aACjB7rB,KAAL,CAAWf,KAAX,EAAkB,iCAAlB;;;UAEEqoC,OAAJ,EAAa;QACXA,OAAO,GAAG,KAAV;OADF,MAEO;YACDzb,EAAE,KAAK,GAAX,EAAgB;UACd0b,OAAO,GAAG,IAAV;SADF,MAEO,IAAI1b,EAAE,KAAK,GAAP,IAAc0b,OAAlB,EAA2B;UAChCA,OAAO,GAAG,KAAV;SADK,MAEA,IAAI1b,EAAE,KAAK,GAAP,IAAc,CAAC0b,OAAnB,EAA4B;;;;QAGnCD,OAAO,GAAGzb,EAAE,KAAK,IAAjB;;;QAEA,KAAKvpB,KAAL,CAAW6E,GAAb;;;UAEIsgC,OAAO,GAAG,KAAK9hC,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKqD,KAAL,CAAW6E,GAAnC,CAAhB;MACE,KAAK7E,KAAL,CAAW6E,GAAb;QAEIugC,IAAI,GAAG,EAAX;;WAEO,KAAKplC,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAA7B,EAAqC;YAC7B4nC,IAAI,GAAG,KAAKhiC,KAAL,CAAW,KAAKrD,KAAL,CAAW6E,GAAtB,CAAb;YACMygC,QAAQ,GAAG,KAAKjiC,KAAL,CAAWmgC,WAAX,CAAuB,KAAKxjC,KAAL,CAAW6E,GAAlC,CAAjB;;UAEI29B,iBAAiB,CAACt+B,GAAlB,CAAsBmhC,IAAtB,CAAJ,EAAiC;YAC3BD,IAAI,CAACr5B,OAAL,CAAas5B,IAAb,IAAqB,CAAC,CAA1B,EAA6B;eACtB3nC,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAX,GAAiB,CAA5B,EAA+B,mCAA/B;;;UAGA,KAAK7E,KAAL,CAAW6E,GAAb;QACAugC,IAAI,IAAIC,IAAR;OANF,MAOO,IACLjgC,gBAAgB,CAACkgC,QAAD,CAAhB,IACAA,QAAQ,OAFH,EAGL;aACK5nC,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAX,GAAiB,CAA5B,EAA+B,iCAA/B;OAJK,MAKA;;;;;SAKJ4B,WAAL,CAAiBxG,KAAE,CAAChM,MAApB,EAA4B;MAC1B6H,OAAO,EAAEqpC,OADiB;MAE1BppC,KAAK,EAAEqpC;KAFT;;;EAUFG,OAAO,CAACC,KAAD,EAAgBC,GAAhB,EAA6C;UAC5C9oC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;UACM6gC,iBAAiB,GACrBF,KAAK,KAAK,EAAV,GACI/C,iCAAiC,CAACE,GADtC,GAEIF,iCAAiC,CAACC,SAHxC;UAIMiD,eAAe,GACnBH,KAAK,KAAK,EAAV,GACI5C,+BAA+B,CAACD,GADpC,GAEI6C,KAAK,KAAK,EAAV,GACA5C,+BAA+B,CAACG,GADhC,GAEAyC,KAAK,KAAK,CAAV,GACA5C,+BAA+B,CAACE,GADhC,GAEAF,+BAA+B,CAACC,GAPtC;QASI+C,KAAK,GAAG,CAAZ;;SAEK,IAAI9gC,CAAC,GAAG,CAAR,EAAW5I,CAAC,GAAGupC,GAAG,IAAI,IAAP,GAAcI,QAAd,GAAyBJ,GAA7C,EAAkD3gC,CAAC,GAAG5I,CAAtD,EAAyD,EAAE4I,CAA3D,EAA8D;YACtDtD,IAAI,GAAG,KAAK6B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAb;UACI6B,GAAJ;;UAEI,KAAKsP,SAAL,CAAe,kBAAf,CAAJ,EAAwC;cAChC8vB,IAAI,GAAG,KAAKziC,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;cACMM,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,CAAb;;YACIrD,IAAI,OAAR,EAAmC;cAC7BmkC,eAAe,CAAC55B,OAAhB,CAAwB5G,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;iBACnCzH,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,6BAA3B;;;cAIA6gC,iBAAiB,CAAC35B,OAAlB,CAA0B+5B,IAA1B,IAAkC,CAAC,CAAnC,IACAJ,iBAAiB,CAAC35B,OAAlB,CAA0B5G,IAA1B,IAAkC,CAAC,CADnC,IAEA4gC,MAAM,CAACC,KAAP,CAAa7gC,IAAb,CAHF,EAIE;iBACKzH,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,6BAA3B;;;YAIA,KAAK7E,KAAL,CAAW6E,GAAb;;;;;UAKArD,IAAI,MAAR,EAAkC;QAChCkF,GAAG,GAAGlF,IAAI,KAAJ,KAAN;OADF,MAEO,IAAIA,IAAI,MAAR,EAAkC;QACvCkF,GAAG,GAAGlF,IAAI,KAAJ,KAAN;OADK,MAEA,IAAI,SAAkBA,IAAlB,CAAJ,EAA6B;QAClCkF,GAAG,GAAGlF,IAAI,KAAV;OADK,MAEA;QACLkF,GAAG,GAAGm/B,QAAN;;;UAEEn/B,GAAG,IAAI8+B,KAAX,EAAkB;QAChB,KAAKxlC,KAAL,CAAW6E,GAAb;MACA+gC,KAAK,GAAGA,KAAK,GAAGJ,KAAR,GAAgB9+B,GAAxB;;;QAGA,KAAK1G,KAAL,CAAW6E,GAAX,KAAmBlI,KAAnB,IACC8oC,GAAG,IAAI,IAAP,IAAe,KAAKzlC,KAAL,CAAW6E,GAAX,GAAiBlI,KAAjB,KAA2B8oC,GAF7C,EAGE;aACO,IAAP;;;WAGKG,KAAP;;;EAGFd,eAAe,CAACU,KAAD,EAAsB;UAC7B7oC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;QACIohC,QAAQ,GAAG,KAAf;SAEKjmC,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;UACM6B,GAAG,GAAG,KAAK6+B,OAAL,CAAaC,KAAb,CAAZ;;QACI9+B,GAAG,IAAI,IAAX,EAAiB;WACVhJ,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAX,GAAmB,CAA9B,EAAiC,8BAA8B6oC,KAA/D;;;QAGE,KAAKxvB,SAAL,CAAe,QAAf,CAAJ,EAA8B;UACxB,KAAK3S,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,SAAJ,EAAoE;UAChE,KAAK7E,KAAL,CAAW6E,GAAb;QACAohC,QAAQ,GAAG,IAAX;;;;QAIAlhC,iBAAiB,CAAC,KAAK1B,KAAL,CAAWmgC,WAAX,CAAuB,KAAKxjC,KAAL,CAAW6E,GAAlC,CAAD,CAArB,EAA+D;WACxDnH,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,kCAA3B;;;QAGEohC,QAAJ,EAAc;YACNlc,GAAG,GAAG,KAAK1mB,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKqD,KAAL,CAAW6E,GAAnC,EAAwCqhC,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;WACKz/B,WAAL,CAAiBxG,KAAE,CAACjM,MAApB,EAA4B+1B,GAA5B;;;;SAIGtjB,WAAL,CAAiBxG,KAAE,CAAClM,GAApB,EAAyB2S,GAAzB;;;EAKFy9B,UAAU,CAACgC,aAAD,EAA+B;UACjCxpC,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;QACIuhC,OAAO,GAAG,KAAd;QACIH,QAAQ,GAAG,KAAf;;QAEI,CAACE,aAAD,IAAkB,KAAKZ,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;WAC1C7nC,KAAL,CAAWf,KAAX,EAAkB,gBAAlB;;;QAEE0pC,KAAK,GACP,KAAKrmC,KAAL,CAAW6E,GAAX,GAAiBlI,KAAjB,IAA0B,CAA1B,IACA,KAAK0G,KAAL,CAAW+P,UAAX,CAAsBzW,KAAtB,QAFF;;QAGI0pC,KAAJ,EAAW;UACL,KAAKrmC,KAAL,CAAWyD,MAAf,EAAuB;aAChB/F,KAAL,CACEf,KADF,EAEE,sDAFF;;;UAKE,OAAOyG,IAAP,CAAY,KAAKC,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKqD,KAAL,CAAW6E,GAAnC,CAAZ,CAAJ,EAA0D;QACxDwhC,KAAK,GAAG,KAAR;;;;QAIAlhC,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;;QACIM,IAAI,OAAJ,IAA0B,CAACkhC,KAA/B,EAAsC;QAClC,KAAKrmC,KAAL,CAAW6E,GAAb;WACK0gC,OAAL,CAAa,EAAb;MACAa,OAAO,GAAG,IAAV;MACAjhC,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAP;;;QAIA,CAACM,IAAI,OAAJ,IAAiCA,IAAI,QAAtC,KACA,CAACkhC,KAFH,EAGE;MACAlhC,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,EAAE,KAAKpT,KAAL,CAAW6E,GAAnC,CAAP;;UACIM,IAAI,OAAJ,IAA+BA,IAAI,OAAvC,EAA4D;UACxD,KAAKnF,KAAL,CAAW6E,GAAb;;;UAEE,KAAK0gC,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B,KAAK7nC,KAAL,CAAWf,KAAX,EAAkB,gBAAlB;MAC/BypC,OAAO,GAAG,IAAV;MACAjhC,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAP;;;QAGE,KAAKmR,SAAL,CAAe,QAAf,CAAJ,EAA8B;UACxB7Q,IAAI,QAAR,EAAmC;YAE7BihC,OAAO,IAAIC,KAAf,EAAsB,KAAK3oC,KAAL,CAAWf,KAAX,EAAkB,uBAAlB;UACpB,KAAKqD,KAAL,CAAW6E,GAAb;QACAohC,QAAQ,GAAG,IAAX;;;;QAIAlhC,iBAAiB,CAAC,KAAK1B,KAAL,CAAWmgC,WAAX,CAAuB,KAAKxjC,KAAL,CAAW6E,GAAlC,CAAD,CAArB,EAA+D;WACxDnH,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA2B,kCAA3B;;;UAIIklB,GAAG,GAAG,KAAK1mB,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKqD,KAAL,CAAW6E,GAAnC,EAAwCqhC,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;;QAEID,QAAJ,EAAc;WACPx/B,WAAL,CAAiBxG,KAAE,CAACjM,MAApB,EAA4B+1B,GAA5B;;;;UAIIrjB,GAAG,GAAG2/B,KAAK,GAAGjc,QAAQ,CAACL,GAAD,EAAM,CAAN,CAAX,GAAsBuc,UAAU,CAACvc,GAAD,CAAjD;SACKtjB,WAAL,CAAiBxG,KAAE,CAAClM,GAApB,EAAyB2S,GAAzB;;;EAKF6/B,aAAa,CAACC,cAAD,EAAyC;UAC9Cjd,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;QACIrD,IAAJ;;QAEI+nB,EAAE,QAAN,EAAqC;YAC7Bkd,OAAO,GAAG,EAAE,KAAKzmC,KAAL,CAAW6E,GAA7B;MACArD,IAAI,GAAG,KAAKklC,WAAL,CACL,KAAKrjC,KAAL,CAAW0I,OAAX,CAAmB,GAAnB,EAAwB,KAAK/L,KAAL,CAAW6E,GAAnC,IAA0C,KAAK7E,KAAL,CAAW6E,GADhD,EAEL2hC,cAFK,CAAP;QAIE,KAAKxmC,KAAL,CAAW6E,GAAb;;UACIrD,IAAI,KAAK,IAAb,EAAmB;UAEf,KAAKxB,KAAL,CAAWmiC,6BAAb;OAFF,MAGO,IAAI3gC,IAAI,GAAG,QAAX,EAAqB;YACtBglC,cAAJ,EAAoB;eACb9oC,KAAL,CAAW+oC,OAAX,EAAoB,0BAApB;SADF,MAEO;eACAzmC,KAAL,CAAWmiC,6BAAX,GAA2CsE,OAAO,GAAG,CAArD;iBACO,IAAP;;;KAfN,MAkBO;MACLjlC,IAAI,GAAG,KAAKklC,WAAL,CAAiB,CAAjB,EAAoBF,cAApB,CAAP;;;WAEKhlC,IAAP;;;EAGFujC,UAAU,CAACjb,KAAD,EAAsB;QAC1BpnB,GAAG,GAAG,EAAV;QACE4mB,UAAU,GAAG,EAAE,KAAKtpB,KAAL,CAAW6E,GAD5B;;aAES;UACH,KAAK7E,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;aAC5BC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,8BAA7B;;;YAEI4sB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;UACI0kB,EAAE,KAAKO,KAAX,EAAkB;;UACdP,EAAE,OAAN,EAAgC;QAC9B7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;QAEAnC,GAAG,IAAI,KAAKikC,eAAL,CAAqB,KAArB,CAAP;QACArd,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OAJF,MAKO,IACL0kB,EAAE,SAAF,IACAA,EAAE,SAFG,EAGL;UACE,KAAKvpB,KAAL,CAAW6E,GAAb;UACE,KAAK7E,KAAL,CAAW2pB,OAAb;OALK,MAMA,IAAIpoB,SAAS,CAACgoB,EAAD,CAAb,EAAmB;aACnB7rB,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,8BAA7B;OADK,MAEA;UACH,KAAKqD,KAAL,CAAW6E,GAAb;;;;IAGJnC,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAX,EAA7B,CAAP;SACK4B,WAAL,CAAiBxG,KAAE,CAAC/L,MAApB,EAA4BwO,GAA5B;;;EAKFL,aAAa,GAAS;QAChBK,GAAG,GAAG,EAAV;QACE4mB,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAD1B;QAEE+hC,eAAe,GAAG,KAFpB;;aAGS;UACH,KAAK5mC,KAAL,CAAW6E,GAAX,IAAkB,KAAKpH,MAA3B,EAAmC;aAC5BC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,uBAA7B;;;YAEI4sB,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAX;;UAEE0kB,EAAE,OAAF,IACCA,EAAE,OAAF,IACC,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAX,GAAiB,CAAvC,SAHJ,EAKE;YACI,KAAK7E,KAAL,CAAW6E,GAAX,KAAmB,KAAK7E,KAAL,CAAWrD,KAA9B,IAAuC,KAAKsL,KAAL,CAAWhI,KAAE,CAAC7K,QAAd,CAA3C,EAAoE;cAC9Dm0B,EAAE,OAAN,EAAiC;iBAC1BvpB,KAAL,CAAW6E,GAAX,IAAkB,CAAlB;iBACK4B,WAAL,CAAiBxG,KAAE,CAAC1K,YAApB;;WAFF,MAIO;cACH,KAAKyK,KAAL,CAAW6E,GAAb;iBACK4B,WAAL,CAAiBxG,KAAE,CAAC3K,SAApB;;;;;QAIJoN,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;aACK4B,WAAL,CAAiBxG,KAAE,CAAC7K,QAApB,EAA8BwxC,eAAe,GAAG,IAAH,GAAUlkC,GAAvD;;;;UAGE6mB,EAAE,OAAN,EAAgC;QAC9B7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;cACMmgC,OAAO,GAAG,KAAK2B,eAAL,CAAqB,IAArB,CAAhB;;YACI3B,OAAO,KAAK,IAAhB,EAAsB;UACpB4B,eAAe,GAAG,IAAlB;SADF,MAEO;UACLlkC,GAAG,IAAIsiC,OAAP;;;QAEF1b,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OARF,MASO,IAAItD,SAAS,CAACgoB,EAAD,CAAb,EAAmB;QACxB7mB,GAAG,IAAI,KAAKW,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAP;UACE,KAAK7E,KAAL,CAAW6E,GAAb;;gBACQ0kB,EAAR;;gBAEQ,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,QAAJ,EAAkE;gBAC9D,KAAK7E,KAAL,CAAW6E,GAAb;;;;YAGFnC,GAAG,IAAI,IAAP;;;;YAGAA,GAAG,IAAInE,MAAM,CAACyG,YAAP,CAAoBukB,EAApB,CAAP;;;;UAGF,KAAKvpB,KAAL,CAAW2pB,OAAb;aACK3pB,KAAL,CAAW4pB,SAAX,GAAuB,KAAK5pB,KAAL,CAAW6E,GAAlC;QACAykB,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OAjBK,MAkBA;UACH,KAAK7E,KAAL,CAAW6E,GAAb;;;;;EAON8hC,eAAe,CAACE,UAAD,EAAqC;UAC5CL,cAAc,GAAG,CAACK,UAAxB;UACMtd,EAAE,GAAG,KAAKlmB,KAAL,CAAW+P,UAAX,CAAsB,EAAE,KAAKpT,KAAL,CAAW6E,GAAnC,CAAX;MACE,KAAK7E,KAAL,CAAW6E,GAAb;;YACQ0kB,EAAR;;eAEW,IAAP;;;eAEO,IAAP;;;;gBAEM/nB,IAAI,GAAG,KAAKklC,WAAL,CAAiB,CAAjB,EAAoBF,cAApB,CAAb;iBACOhlC,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBjD,MAAM,CAACyG,YAAP,CAAoBxD,IAApB,CAA9B;;;;;gBAGMA,IAAI,GAAG,KAAK+kC,aAAL,CAAmBC,cAAnB,CAAb;iBACOhlC,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBjD,MAAM,CAAC4rB,aAAP,CAAqB3oB,IAArB,CAA9B;;;;eAGO,IAAP;;;eAEO,IAAP;;;eAEO,QAAP;;;eAEO,IAAP;;;YAEI,KAAK6B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,QAAJ,EAAkE;YAC9D,KAAK7E,KAAL,CAAW6E,GAAb;;;;aAGG7E,KAAL,CAAW4pB,SAAX,GAAuB,KAAK5pB,KAAL,CAAW6E,GAAlC;UACE,KAAK7E,KAAL,CAAW2pB,OAAb;;;;eAGO,EAAP;;;YAEIJ,EAAE,MAAF,IAA0BA,EAAE,MAAhC,EAAsD;gBAC9Ckd,OAAO,GAAG,KAAKzmC,KAAL,CAAW6E,GAAX,GAAiB,CAAjC;cAEIiiC,QAAQ,GAAG,KAAKzjC,KAAL,CACZ6mB,MADY,CACL,KAAKlqB,KAAL,CAAW6E,GAAX,GAAiB,CADZ,EACe,CADf,EAEZoD,KAFY,CAEN,SAFM,EAEK,CAFL,CAAf;cAGIo+B,KAAK,GAAGjc,QAAQ,CAAC0c,QAAD,EAAW,CAAX,CAApB;;cACIT,KAAK,GAAG,GAAZ,EAAiB;YACfS,QAAQ,GAAGA,QAAQ,CAAC5pC,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;YACAmpC,KAAK,GAAGjc,QAAQ,CAAC0c,QAAD,EAAW,CAAX,CAAhB;;;eAEG9mC,KAAL,CAAW6E,GAAX,IAAkBiiC,QAAQ,CAACrpC,MAAT,GAAkB,CAApC;gBACM0H,IAAI,GAAG,KAAK9B,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAW6E,GAAjC,CAAb;;cAEEiiC,QAAQ,KAAK,GAAb,IACA3hC,IAAI,OADJ,IAEAA,IAAI,OAHN,EAIE;gBACI0hC,UAAJ,EAAgB;mBACT7mC,KAAL,CAAWmiC,6BAAX,GAA2CsE,OAA3C;qBACO,IAAP;aAFF,MAGO,IAAI,KAAKzmC,KAAL,CAAWyD,MAAf,EAAuB;mBACvB/F,KAAL,CAAW+oC,OAAX,EAAoB,8BAApB;aADK,MAEA,IAAI,CAAC,KAAKzmC,KAAL,CAAWgiC,aAAhB,EAA+B;mBAG/BhiC,KAAL,CAAWgiC,aAAX,GAA2B,IAA3B;mBACKhiC,KAAL,CAAWiiC,aAAX,GAA2BwE,OAA3B;;;;iBAIGloC,MAAM,CAACyG,YAAP,CAAoBqhC,KAApB,CAAP;;;eAGK9nC,MAAM,CAACyG,YAAP,CAAoBukB,EAApB,CAAP;;;;EAMNmd,WAAW,CAACjB,GAAD,EAAce,cAAd,EAAsD;UACzDC,OAAO,GAAG,KAAKzmC,KAAL,CAAW6E,GAA3B;UACMkiC,CAAC,GAAG,KAAKxB,OAAL,CAAa,EAAb,EAAiBE,GAAjB,CAAV;;QACIsB,CAAC,KAAK,IAAV,EAAgB;UACVP,cAAJ,EAAoB;aACb9oC,KAAL,CAAW+oC,OAAX,EAAoB,+BAApB;OADF,MAEO;aACAzmC,KAAL,CAAW6E,GAAX,GAAiB4hC,OAAO,GAAG,CAA3B;aACKzmC,KAAL,CAAWmiC,6BAAX,GAA2CsE,OAAO,GAAG,CAArD;;;;WAGGM,CAAP;;;EASFC,SAAS,GAAW;QACdjjC,IAAI,GAAG,EAAX;SACK/D,KAAL,CAAWc,WAAX,GAAyB,KAAzB;UACMnE,KAAK,GAAG,KAAKqD,KAAL,CAAW6E,GAAzB;QACIykB,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAA5B;;WAEO,KAAK7E,KAAL,CAAW6E,GAAX,GAAiB,KAAKpH,MAA7B,EAAqC;YAC7B8rB,EAAE,GAAG,KAAKlmB,KAAL,CAAWmgC,WAAX,CAAuB,KAAKxjC,KAAL,CAAW6E,GAAlC,CAAX;;UACIO,gBAAgB,CAACmkB,EAAD,CAApB,EAA0B;aACnBvpB,KAAL,CAAW6E,GAAX,IAAkB0kB,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAArC;OADF,MAEO,IAAI,KAAKvpB,KAAL,CAAWiD,UAAX,IAAyBsmB,EAAE,OAA/B,EAAsD;UACzD,KAAKvpB,KAAL,CAAW6E,GAAb;OADK,MAEA,IAAI0kB,EAAE,OAAN,EAAgC;aAChCvpB,KAAL,CAAWc,WAAX,GAAyB,IAAzB;QAEAiD,IAAI,IAAI,KAAKV,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAR;cACMoiC,QAAQ,GAAG,KAAKjnC,KAAL,CAAW6E,GAA5B;cACMqiC,eAAe,GACnB,KAAKlnC,KAAL,CAAW6E,GAAX,KAAmBlI,KAAnB,GAA2BoI,iBAA3B,GAA+CK,gBADjD;;YAGI,KAAK/B,KAAL,CAAW+P,UAAX,CAAsB,EAAE,KAAKpT,KAAL,CAAW6E,GAAnC,SAAJ,EAAsE;eAC/DnH,KAAL,CACE,KAAKsC,KAAL,CAAW6E,GADb,EAEE,2CAFF;;;UAMA,KAAK7E,KAAL,CAAW6E,GAAb;cACMsiC,GAAG,GAAG,KAAKZ,aAAL,CAAmB,IAAnB,CAAZ;;YAIE,CAACW,eAAe,CAACC,GAAD,EAAM,IAAN,CAFlB,EAGE;eACKzpC,KAAL,CAAWupC,QAAX,EAAqB,wBAArB;;;QAIFljC,IAAI,IAAIxF,MAAM,CAAC4rB,aAAP,CAAqBgd,GAArB,CAAR;QACA7d,UAAU,GAAG,KAAKtpB,KAAL,CAAW6E,GAAxB;OA3BK,MA4BA;;;;;WAIFd,IAAI,GAAG,KAAKV,KAAL,CAAWnG,KAAX,CAAiBosB,UAAjB,EAA6B,KAAKtpB,KAAL,CAAW6E,GAAxC,CAAd;;;EAGF5B,UAAU,CAACc,IAAD,EAAwB;WACzBA,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,iBAAzC;;;EAMFuP,QAAQ,GAAS;UACTvP,IAAI,GAAG,KAAKijC,SAAL,EAAb;UACMvrC,IAAI,GAAG2rC,QAAY,CAAC9H,GAAb,CAAiBv7B,IAAjB,KAA0B9D,KAAE,CAACxM,IAA1C;;QAEIgI,IAAI,CAACvI,OAAL,IAAgB,KAAK8M,KAAL,CAAWc,WAA/B,EAA4C;WACrCpD,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA4B,8BAA6Bd,IAAK,EAA9D;;;QAKA,KAAK/D,KAAL,CAAWiD,UAAX,KACC,CAAC,KAAKA,UAAL,CAAgBc,IAAhB,CAAD,IAA0B,CAAC,KAAK/D,KAAL,CAAWmH,MADvC,CADF,EAGE;WACKzJ,KAAL,CAAW,KAAKsC,KAAL,CAAW6E,GAAtB,EAA4B,sBAAqBd,IAAK,EAAtD;;;SAGG0C,WAAL,CAAiBhL,IAAjB,EAAuBsI,IAAvB;;;EAGFb,YAAY,CAACL,QAAD,EAA+B;UACnCwkC,MAAM,GAAG,KAAKzkC,UAAL,EAAf;;QACIykC,MAAM,KAAKvM,OAAE,CAACx4B,kBAAd,IAAoC+kC,MAAM,KAAKvM,OAAE,CAACv4B,iBAAtD,EAAyE;aAChE,IAAP;;;QAGAM,QAAQ,KAAK5C,KAAE,CAACnL,KAAhB,KACCuyC,MAAM,KAAKvM,OAAE,CAAC/4B,cAAd,IAAgCslC,MAAM,KAAKvM,OAAE,CAAC94B,eAD/C,CADF,EAGE;aACO,CAACqlC,MAAM,CAACzlC,MAAf;;;QAOAiB,QAAQ,KAAK5C,KAAE,CAACtI,OAAhB,IACCkL,QAAQ,KAAK5C,KAAE,CAACxM,IAAhB,IAAwB,KAAKuM,KAAL,CAAWyC,WAFtC,EAGE;aACOrB,SAAS,CAACgC,IAAV,CACL,KAAKC,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWrD,KAAnD,CADK,CAAP;;;QAMAkG,QAAQ,KAAK5C,KAAE,CAAC3I,KAAhB,IACAuL,QAAQ,KAAK5C,KAAE,CAACpL,IADhB,IAEAgO,QAAQ,KAAK5C,KAAE,CAAC9L,GAFhB,IAGA0O,QAAQ,KAAK5C,KAAE,CAACtL,MAHhB,IAIAkO,QAAQ,KAAK5C,KAAE,CAAC9K,KALlB,EAME;aACO,IAAP;;;QAGE0N,QAAQ,KAAK5C,KAAE,CAAC3L,MAApB,EAA4B;aACnB+yC,MAAM,KAAKvM,OAAE,CAAC/4B,cAArB;;;QAIAc,QAAQ,KAAK5C,KAAE,CAAClI,IAAhB,IACA8K,QAAQ,KAAK5C,KAAE,CAACjI,MADhB,IAEA6K,QAAQ,KAAK5C,KAAE,CAACxM,IAHlB,EAIE;aACO,KAAP;;;QAGEoP,QAAQ,KAAK5C,KAAE,CAACzJ,UAApB,EAAgC;aAEvB,IAAP;;;WAGK,CAAC,KAAKwJ,KAAL,CAAWyC,WAAnB;;;EAGFpP,aAAa,CAACwP,QAAD,EAA4B;UACjCpH,IAAI,GAAG,KAAKuE,KAAL,CAAWvE,IAAxB;QACI6rC,MAAJ;;QAEI7rC,IAAI,CAACvI,OAAL,KAAiB2P,QAAQ,KAAK5C,KAAE,CAACjL,GAAhB,IAAuB6N,QAAQ,KAAK5C,KAAE,CAAC/K,WAAxD,CAAJ,EAA0E;WACnE8K,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;KADF,MAEO,IAAK6kC,MAAM,GAAG7rC,IAAI,CAACpI,aAAnB,EAAmC;MACxCi0C,MAAM,CAAC1xB,IAAP,CAAY,IAAZ,EAAkB/S,QAAlB;KADK,MAEA;WACA7C,KAAL,CAAWyC,WAAX,GAAyBhH,IAAI,CAACjJ,UAA9B;;;;;;ACv3CN,MAAM2gC,OAAO,GAAG,sBAAhB;AAIA,AAAe,MAAMoU,UAAN,SAAyBtE,SAAzB,CAAmC;EAGhDuE,QAAQ,CAAChsC,IAAD,EAAa8C,GAAb,EAA0BoI,GAA1B,EAA0C;QAC5C,CAAClL,IAAL,EAAW;UAELuB,KAAK,GAAIvB,IAAI,CAACuB,KAAL,GAAavB,IAAI,CAACuB,KAAL,IAAc,EAA1C;IACAA,KAAK,CAACuB,GAAD,CAAL,GAAaoI,GAAb;;;EAKF+B,YAAY,CAACg/B,EAAD,EAAyB;WAC5B,KAAKx/B,KAAL,CAAWhI,KAAE,CAACzJ,UAAd,KAA6B,KAAKwJ,KAAL,CAAW5D,KAAX,KAAqBqrC,EAAzD;;;EAGFlwB,qBAAqB,CAACkwB,EAAD,EAAyB;UACtCC,CAAC,GAAG,KAAKh6B,SAAL,EAAV;WACOg6B,CAAC,CAACjsC,IAAF,KAAWwE,KAAE,CAACzJ,UAAd,IAA4BkxC,CAAC,CAACtrC,KAAF,KAAYqrC,EAA/C;;;EAKFz6B,gBAAgB,CAACy6B,EAAD,EAAsB;QAChC,KAAKh/B,YAAL,CAAkBg/B,EAAlB,CAAJ,EAA2B;WACpBtiC,IAAL;KADF,MAEO;WACAoE,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAACzJ,UAAzB;;;;EAMJmxC,aAAa,CAACF,EAAD,EAAyB;QAChC,KAAKh/B,YAAL,CAAkBg/B,EAAlB,CAAJ,EAA2B;WACpBtiC,IAAL;aACO,IAAP;;;WAEK,KAAP;;;EAKFuE,YAAY,CAACjW,IAAD,EAAwB;WAEhC,KAAKwU,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KACA,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB3I,IADrB,IAEA,CAAC,KAAKuM,KAAL,CAAWc,WAHd;;;EAOFmU,qBAAqB,CAACxhB,IAAD,EAAwB;UACrCi0C,CAAC,GAAG,KAAKh6B,SAAL,EAAV;WACOg6B,CAAC,CAACjsC,IAAF,KAAWwE,KAAE,CAACxM,IAAd,IAAsBi0C,CAAC,CAACtrC,KAAF,KAAY3I,IAAzC;;;EAKF4V,aAAa,CAAC5V,IAAD,EAAwB;WAC5B,KAAKiW,YAAL,CAAkBjW,IAAlB,KAA2B,KAAKoU,GAAL,CAAS5H,KAAE,CAACxM,IAAZ,CAAlC;;;EAKFiU,gBAAgB,CAACjU,IAAD,EAAektC,OAAf,EAAuC;QACjD,CAAC,KAAKt3B,aAAL,CAAmB5V,IAAnB,CAAL,EAA+B,KAAK8V,UAAL,CAAgB,IAAhB,EAAsBo3B,OAAtB;;;EAKjChxB,kBAAkB,GAAY;WAE1B,KAAK1H,KAAL,CAAWhI,KAAE,CAAC9L,GAAd,KACA,KAAK8T,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CADA,IAEA,KAAK85B,qBAAL,EAHF;;;EAOFA,qBAAqB,GAAY;WACxBltB,SAAS,CAACgC,IAAV,CACL,KAAKC,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWrD,KAAnD,CADK,CAAP;;;EAOF+6B,gBAAgB,GAAY;WACnB,KAAK7vB,GAAL,CAAS5H,KAAE,CAACpL,IAAZ,KAAqB,KAAK8a,kBAAL,EAA5B;;;EAMF1G,SAAS,GAAS;QACZ,CAAC,KAAKyuB,gBAAL,EAAL,EAA8B,KAAKnuB,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAACpL,IAAzB;;;EAMhCuS,MAAM,CAAC3L,IAAD,EAAkBoJ,GAAlB,EAAuC;SACtCgD,GAAL,CAASpM,IAAT,KAAkB,KAAK8N,UAAL,CAAgB1E,GAAhB,EAAqBpJ,IAArB,CAAlB;;;EAIFkgC,aAAa,CAACgF,OAAe,GAAG,mBAAnB,EAA8C;QACrD,KAAK3gC,KAAL,CAAWrD,KAAX,GAAmB,KAAKqD,KAAL,CAAWsD,UAAlC,EAA8C;WACvC5F,KAAL,CAAW,KAAKsC,KAAL,CAAWsD,UAAtB,EAAkCq9B,OAAlC;;;;EAOJp3B,UAAU,CACR1E,GADQ,EAER+iC,aAAiC,GAAG,kBAF5B,EAGD;QACH,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;MACrCA,aAAa,GAAI,+BAA8BA,aAAa,CAAC50C,KAAM,GAAnE;;;UAEI,KAAK0K,KAAL,CAAWmH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK7E,KAAL,CAAWrD,KAA1C,EAAiDirC,aAAjD,CAAN;;;EAGFpwB,YAAY,CAAC/jB,IAAD,EAAeoR,GAAf,EAAoC;QAC1C,CAAC,KAAKmR,SAAL,CAAeviB,IAAf,CAAL,EAA2B;YACnB,KAAKiK,KAAL,CACJmH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK7E,KAAL,CAAWrD,KAD3B,EAEH,kEAAiElJ,IAAK,GAFnE,EAGJ;QAAEmtC,kBAAkB,EAAE,CAACntC,IAAD;OAHlB,CAAN;;;WAOK,IAAP;;;EAGFo0C,eAAe,CAACC,KAAD,EAAuBjjC,GAAvB,EAA4C;QACrD,CAACijC,KAAK,CAAClL,IAAN,CAAWmK,CAAC,IAAI,KAAK/wB,SAAL,CAAe+wB,CAAf,CAAhB,CAAL,EAAyC;YACjC,KAAKrpC,KAAL,CACJmH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK7E,KAAL,CAAWrD,KAD3B,EAEH,sFAAqFmrC,KAAK,CAAC1K,IAAN,CACpF,IADoF,CAEpF,GAJE,EAKJ;QAAEwD,kBAAkB,EAAEkH;OALlB,CAAN;;;;EAUJC,8BAA8B,GAAG;QAE7B,KAAK/nC,KAAL,CAAW6hC,QAAX,KACC,CAAC,KAAK7hC,KAAL,CAAW8hC,QAAZ,IAAwB,KAAK9hC,KAAL,CAAW6hC,QAAX,GAAsB,KAAK7hC,KAAL,CAAW8hC,QAD1D,CADF,EAGE;WACKpkC,KAAL,CACE,KAAKsC,KAAL,CAAW6hC,QADb,EAEE,0DAFF;;;QAKE,KAAK7hC,KAAL,CAAW8hC,QAAf,EAAyB;WAClBpkC,KAAL,CACE,KAAKsC,KAAL,CAAW8hC,QADb,EAEE,uDAFF;;;;EAOJkG,eAAe,CAACrrC,KAAD,EAAyB;aAC7B;MAEP8E,cAAc,CAACy9B,SAAf,GAA2BviC,KAA3B;MAEAA,KAAK,IAAI8E,cAAc,CAACqF,IAAf,CAAoB,KAAKzD,KAAzB,EAAgC,CAAhC,EAAmC5F,MAA5C;YACMwK,KAAK,GAAGkrB,OAAO,CAACrsB,IAAR,CAAa,KAAKzD,KAAL,CAAWnG,KAAX,CAAiBP,KAAjB,CAAb,CAAd;UACI,CAACsL,KAAL,EAAY;UACRA,KAAK,CAAC,CAAD,CAAL,KAAa,YAAjB,EAA+B,OAAO,IAAP;MAC/BtL,KAAK,IAAIsL,KAAK,CAAC,CAAD,CAAL,CAASxK,MAAlB;MAGAgE,cAAc,CAACy9B,SAAf,GAA2BviC,KAA3B;MAEAA,KAAK,IAAI8E,cAAc,CAACqF,IAAf,CAAoB,KAAKzD,KAAzB,EAAgC,CAAhC,EAAmC5F,MAA5C;;UACI,KAAK4F,KAAL,CAAW1G,KAAX,MAAsB,GAA1B,EAA+B;QAC7BA,KAAK;;;;WAIF,KAAP;;;;;AC5LJ,MAAMsrC,IAAN,CAA+B;EAC7Bl1C,WAAW,CAACm1C,MAAD,EAAiBrjC,GAAjB,EAA8BjI,GAA9B,EAA6C;SACjDnB,IAAL,GAAY,EAAZ;SACKkB,KAAL,GAAakI,GAAb;SACK5H,GAAL,GAAW,CAAX;SACKL,GAAL,GAAW,IAAImiC,cAAJ,CAAmBniC,GAAnB,CAAX;QACIsrC,MAAM,IAAIA,MAAM,CAACx0C,OAAP,CAAe8qC,MAA7B,EAAqC,KAAK2J,KAAL,GAAa,CAACtjC,GAAD,EAAM,CAAN,CAAb;QACjCqjC,MAAM,IAAIA,MAAM,CAACzI,QAArB,EAA+B,KAAK7iC,GAAL,CAAS6iC,QAAT,GAAoByI,MAAM,CAACzI,QAA3B;;;EAajCrqB,OAAO,GAAS;UAERsV,OAAY,GAAG,IAAIud,IAAJ,EAArB;UACMpK,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAb;;SACK,IAAI/4B,CAAC,GAAG,CAAR,EAAWrH,MAAM,GAAGogC,IAAI,CAACpgC,MAA9B,EAAsCqH,CAAC,GAAGrH,MAA1C,EAAkDqH,CAAC,EAAnD,EAAuD;YAC/CxG,GAAG,GAAGu/B,IAAI,CAAC/4B,CAAD,CAAhB;;UAGExG,GAAG,KAAK,iBAAR,IACAA,GAAG,KAAK,kBADR,IAEAA,GAAG,KAAK,eAHV,EAIE;QAEAosB,OAAO,CAACpsB,GAAD,CAAP,GAAe,KAAKA,GAAL,CAAf;;;;WAIGosB,OAAP;;;;;AAIJ,AAAO,MAAM0d,SAAN,SAAwBb,UAAxB,CAAmC;EACxC7mC,SAAS,GAAmB;WAEnB,IAAIunC,IAAJ,CAAS,IAAT,EAAe,KAAKjoC,KAAL,CAAWrD,KAA1B,EAAiC,KAAKqD,KAAL,CAAWG,QAA5C,CAAP;;;EAGFzD,WAAW,CAAcmI,GAAd,EAA2BjI,GAA3B,EAA6C;WAE/C,IAAIqrC,IAAJ,CAAS,IAAT,EAAepjC,GAAf,EAAoBjI,GAApB,CAAP;;;EAIF+yB,eAAe,CAAcl0B,IAAd,EAAiC;WACvC,KAAKiB,WAAL,CAAiBjB,IAAI,CAACkB,KAAtB,EAA6BlB,IAAI,CAACmB,GAAL,CAASD,KAAtC,CAAP;;;EAKFgE,UAAU,CAAcnF,IAAd,EAAuBC,IAAvB,EAAwC;WACzC,KAAKuB,YAAL,CACLxB,IADK,EAELC,IAFK,EAGL,KAAKuE,KAAL,CAAWsD,UAHN,EAIL,KAAKtD,KAAL,CAAW8qB,aAJN,CAAP;;;EAUF9tB,YAAY,CACVxB,IADU,EAEVC,IAFU,EAGVoJ,GAHU,EAIVjI,GAJU,EAKP;QACC0J,AAAyC9K,IAAI,CAACyB,GAAL,GAAW,CAAxD,EAA2D;YACnD,IAAI8J,KAAJ,CACJ,sDACE,0DAFE,CAAN;;;IAKFvL,IAAI,CAACC,IAAL,GAAYA,IAAZ;IACAD,IAAI,CAACyB,GAAL,GAAW4H,GAAX;IACArJ,IAAI,CAACoB,GAAL,CAASK,GAAT,GAAeL,GAAf;QACI,KAAKlJ,OAAL,CAAa8qC,MAAjB,EAAyBhjC,IAAI,CAAC2sC,KAAL,CAAW,CAAX,IAAgBtjC,GAAhB;SACpB+6B,cAAL,CAAoBpkC,IAApB;WACOA,IAAP;;;EAGFo/B,kBAAkB,CAACp/B,IAAD,EAAiBmB,KAAjB,EAAgCwD,QAAhC,EAA0D;IAC1E3E,IAAI,CAACmB,KAAL,GAAaA,KAAb;IACAnB,IAAI,CAACoB,GAAL,CAASD,KAAT,GAAiBwD,QAAjB;QACI,KAAKzM,OAAL,CAAa8qC,MAAjB,EAAyBhjC,IAAI,CAAC2sC,KAAL,CAAW,CAAX,IAAgBxrC,KAAhB;;;EAG3BqM,gBAAgB,CACdxN,IADc,EAEdyB,GAAY,GAAG,KAAK+C,KAAL,CAAWsD,UAFZ,EAGdo9B,MAAiB,GAAG,KAAK1gC,KAAL,CAAW8qB,aAHjB,EAIR;IACNtvB,IAAI,CAACyB,GAAL,GAAWA,GAAX;IACAzB,IAAI,CAACoB,GAAL,CAASK,GAAT,GAAeyjC,MAAf;QACI,KAAKhtC,OAAL,CAAa8qC,MAAjB,EAAyBhjC,IAAI,CAAC2sC,KAAL,CAAW,CAAX,IAAgBlrC,GAAhB;;;EAM3BoZ,0BAA0B,CAAC7a,IAAD,EAAiB6sC,YAAjB,EAA+C;SAClEzN,kBAAL,CAAwBp/B,IAAxB,EAA8B6sC,YAAY,CAAC1rC,KAA3C,EAAkD0rC,YAAY,CAACzrC,GAAb,CAAiBD,KAAnE;;;;;ACnGW,MAAM2rC,UAAN,SAAyBF,SAAzB,CAAmC;EAmBhDpnC,YAAY,CACVxF,IADU,EAEVyF,SAFU,EAGVlD,kBAHU,EAIJ;QACFvC,IAAJ,EAAU;cACAA,IAAI,CAACC,IAAb;aACO,YAAL;aACK,eAAL;aACK,cAAL;aACK,mBAAL;;;aAGK,kBAAL;UACED,IAAI,CAACC,IAAL,GAAY,eAAZ;;eAEE,IAAIqJ,CAAC,GAAG,CAAR,EAAWrH,MAAM,GAAGjC,IAAI,CAACwC,UAAL,CAAgBP,MAApC,EAA4C8hC,IAAI,GAAG9hC,MAAM,GAAG,CAD9D,EAEEqH,CAAC,GAAGrH,MAFN,EAGEqH,CAAC,EAHH,EAIE;kBACMxH,IAAI,GAAG9B,IAAI,CAACwC,UAAL,CAAgB8G,CAAhB,CAAb;kBACM3D,MAAM,GAAG2D,CAAC,KAAKy6B,IAArB;iBACKr+B,gCAAL,CAAsC5D,IAAtC,EAA4C2D,SAA5C,EAAuDE,MAAvD;;;;;aAIC,gBAAL;eACOH,YAAL,CAAkBxF,IAAI,CAACY,KAAvB,EAA8B6E,SAA9B,EAAyClD,kBAAzC;;;aAGG,eAAL;;iBACOwqC,qBAAL,CAA2B/sC,IAA3B;YAEAA,IAAI,CAACC,IAAL,GAAY,aAAZ;kBACM+sC,GAAG,GAAGhtC,IAAI,CAACoT,QAAjB;iBACK5N,YAAL,CAAkBwnC,GAAlB,EAAuBvnC,SAAvB,EAAkClD,kBAAlC;;;;aAIG,iBAAL;UACEvC,IAAI,CAACC,IAAL,GAAY,cAAZ;eACKsW,gBAAL,CAAsBvW,IAAI,CAACitC,QAA3B,EAAqCxnC,SAArC,EAAgDlD,kBAAhD;;;aAGG,sBAAL;cACMvC,IAAI,CAACu4B,QAAL,KAAkB,GAAtB,EAA2B;YACzBv4B,IAAI,CAACC,IAAL,GAAY,mBAAZ;mBACOD,IAAI,CAACu4B,QAAZ;WAFF,MAGO;iBACAr2B,KAAL,CACElC,IAAI,CAAC+Y,IAAL,CAAUtX,GADZ,EAEE,6DAFF;;;;;aAOC,yBAAL;UACEzB,IAAI,CAACqB,UAAL,GAAkB,KAAKmE,YAAL,CAChBxF,IAAI,CAACqB,UADW,EAEhBoE,SAFgB,EAGhBlD,kBAHgB,CAAlB;;;aAOG,kBAAL;cACM,CAACkD,SAAL,EAAgB;;;;kBAGV0/B,OAAO,GACX,4BACC5iC,kBAAkB,GACf,SAASA,kBADM,GAEY,YAH/B,CADF;iBAKKL,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuBgkC,OAAvB;;;;;WAICnlC,IAAP;;;EAGF0F,gCAAgC,CAC9B5D,IAD8B,EAE9B2D,SAF8B,EAG9BE,MAH8B,EAI9B;QACI7D,IAAI,CAAC7B,IAAL,KAAc,cAAlB,EAAkC;YAC1Byb,KAAK,GACT5Z,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAC5B,IAAL,KAAc,KAArC,GACI,+CADJ,GAEI,sCAHN;WAKKgC,KAAL,CAAWJ,IAAI,CAACgB,GAAL,CAAS3B,KAApB,EAA2Bua,KAA3B;KANF,MAOO,IAAI5Z,IAAI,CAAC7B,IAAL,KAAc,eAAd,IAAiC,CAAC0F,MAAtC,EAA8C;WAC9CunC,gBAAL,CAAsBprC,IAAI,CAACX,KAA3B;KADK,MAEA;WACAqE,YAAL,CAAkB1D,IAAlB,EAAwB2D,SAAxB,EAAmC,8BAAnC;;;;EAMJ8Q,gBAAgB,CACdwB,QADc,EAEdtS,SAFc,EAGdlD,kBAHc,EAIW;QACrBd,GAAG,GAAGsW,QAAQ,CAAC9V,MAAnB;;QACIR,GAAJ,EAAS;YACDsiC,IAAI,GAAGhsB,QAAQ,CAACtW,GAAG,GAAG,CAAP,CAArB;;UACIsiC,IAAI,IAAIA,IAAI,CAAC9jC,IAAL,KAAc,aAA1B,EAAyC;UACrCwB,GAAF;OADF,MAEO,IAAIsiC,IAAI,IAAIA,IAAI,CAAC9jC,IAAL,KAAc,eAA1B,EAA2C;QAChD8jC,IAAI,CAAC9jC,IAAL,GAAY,aAAZ;cACM+sC,GAAG,GAAGjJ,IAAI,CAAC3wB,QAAjB;aACK5N,YAAL,CAAkBwnC,GAAlB,EAAuBvnC,SAAvB,EAAkClD,kBAAlC;;YAEEyqC,GAAG,CAAC/sC,IAAJ,KAAa,YAAb,IACA+sC,GAAG,CAAC/sC,IAAJ,KAAa,kBADb,IAEA+sC,GAAG,CAAC/sC,IAAJ,KAAa,cAFb,IAGA+sC,GAAG,CAAC/sC,IAAJ,KAAa,eAJf,EAKE;eACK8N,UAAL,CAAgBi/B,GAAG,CAAC7rC,KAApB;;;UAEAM,GAAF;;;;SAGC,IAAI6H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7H,GAApB,EAAyB6H,CAAC,EAA1B,EAA8B;YACtB+zB,GAAG,GAAGtlB,QAAQ,CAACzO,CAAD,CAApB;;UACI+zB,GAAJ,EAAS;aACF73B,YAAL,CAAkB63B,GAAlB,EAAuB53B,SAAvB,EAAkClD,kBAAlC;;YACI86B,GAAG,CAACp9B,IAAJ,KAAa,aAAjB,EAAgC;eACzBitC,gBAAL,CAAsB7P,GAAG,CAACl8B,KAA1B;;;;;WAIC4W,QAAP;;;EAKFC,gBAAgB,CACdD,QADc,EAEdE,mBAFc,EAGe;WACtBF,QAAP;;;EAGFo1B,oBAAoB,CAClBp1B,QADkB,EAElBE,mBAFkB,EAGW;SACxBD,gBAAL,CAAsBD,QAAtB,EAAgCE,mBAAhC;;0BAEmBF,QAHU,eAGA;YAAlB3V,IAAI,GAAI2V,QAAJ,IAAV;;UACC3V,IAAI,IAAIA,IAAI,CAACnC,IAAL,KAAc,iBAA1B,EAA6C;aACtCktC,oBAAL,CAA0B/qC,IAAI,CAAC6qC,QAA/B;;;;WAIGl1B,QAAP;;;EAKFq1B,WAAW,CACT7oC,sBADS,EAET8Q,gBAFS,EAGM;UACTrV,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKyE,IAAL;IACA3J,IAAI,CAACoT,QAAL,GAAgB,KAAK8C,gBAAL,CACd,KADc,EAEd3R,sBAFc,EAGduG,SAHc,EAIduK,gBAJc,CAAhB;;QAOI,KAAK7Q,KAAL,CAAWghC,kBAAX,KAAkC,CAAC,CAAnC,IAAwC,KAAK/4B,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAA5C,EAAkE;WAC3DoL,KAAL,CAAWghC,kBAAX,GAAgC,KAAKhhC,KAAL,CAAWrD,KAA3C;;;WAGK,KAAKgE,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFqtC,gBAAgB,GAAgB;UACxBrtC,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKyE,IAAL;IACA3J,IAAI,CAACoT,QAAL,GAAgB,KAAKmsB,gBAAL,EAAhB;WACO,KAAKp6B,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;;EAIFu/B,gBAAgB,GAAY;YAClB,KAAK/6B,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAAC7L,QAAR;;gBACQoH,IAAI,GAAG,KAAKkF,SAAL,EAAb;eACKyE,IAAL;UACA3J,IAAI,CAACitC,QAAL,GAAgB,KAAKtX,gBAAL,CAAsBlxB,KAAE,CAAC5L,QAAzB,EAAmC,IAAnC,CAAhB;iBACO,KAAKsM,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;WAGGyE,KAAE,CAAC3L,MAAR;eACS,KAAKw0C,QAAL,CAAc,IAAd,CAAP;;;WAGG,KAAKxgC,eAAL,EAAP;;;EAGF6oB,gBAAgB,CACd4X,KADc,EAEdC,UAFc,EAGdvzB,cAHc,EAIiC;UACzCwzB,IAA0C,GAAG,EAAnD;QACIC,KAAK,GAAG,IAAZ;;WACO,CAAC,KAAKrhC,GAAL,CAASkhC,KAAT,CAAR,EAAyB;UACnBG,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;;UAEEo0C,UAAU,IAAI,KAAK/gC,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAlB,EAAwC;QAEtCq0C,IAAI,CAACppC,IAAL,CAAU,IAAV;OAFF,MAGO,IAAI,KAAKgI,GAAL,CAASkhC,KAAT,CAAJ,EAAqB;;OAArB,MAEA,IAAI,KAAK9gC,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;QAClC4zC,IAAI,CAACppC,IAAL,CAAU,KAAKwU,4BAAL,CAAkC,KAAKw0B,gBAAL,EAAlC,CAAV;aACK/V,mBAAL;aACK1rB,MAAL,CAAY2hC,KAAZ;;OAHK,MAKA;cACCrQ,UAAU,GAAG,EAAnB;;YACI,KAAKzwB,KAAL,CAAWhI,KAAE,CAACzK,EAAd,KAAqB,KAAKwgB,SAAL,CAAe,YAAf,CAAzB,EAAuD;eAChDtY,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,0DAFF;;;eAKK,KAAKsL,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAP,EAA0B;UACxBkjC,UAAU,CAAC74B,IAAX,CAAgB,KAAKspC,cAAL,EAAhB;;;QAEFF,IAAI,CAACppC,IAAL,CAAU,KAAK44B,uBAAL,CAA6BhjB,cAA7B,EAA6CijB,UAA7C,CAAV;;;;WAGGuQ,IAAP;;;EAGFxQ,uBAAuB,CACrBhjB,cADqB,EAErBijB,UAFqB,EAGU;UACzBnkB,IAAI,GAAG,KAAKD,iBAAL,EAAb;SACKD,4BAAL,CAAkCE,IAAlC;UACMskB,GAAG,GAAG,KAAKvkB,iBAAL,CAAuBC,IAAI,CAAC5X,KAA5B,EAAmC4X,IAAI,CAAC3X,GAAL,CAASD,KAA5C,EAAmD4X,IAAnD,CAAZ;;QACImkB,UAAU,CAACj7B,MAAf,EAAuB;MACrB8W,IAAI,CAACmkB,UAAL,GAAkBA,UAAlB;;;WAEKG,GAAP;;;EAGFxkB,4BAA4B,CAACtE,KAAD,EAA0B;WAC7CA,KAAP;;;EAKFuE,iBAAiB,CACfpU,QADe,EAEfC,QAFe,EAGfoU,IAHe,EAIN;IACTpU,QAAQ,GAAGA,QAAQ,IAAI,KAAKH,KAAL,CAAWG,QAAlC;IACAD,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWrD,KAAlC;IACA4X,IAAI,GAAGA,IAAI,IAAI,KAAKwmB,gBAAL,EAAf;QACI,CAAC,KAAKlzB,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,CAAL,EAAsB,OAAO4e,IAAP;UAEhB/Y,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;IACA3E,IAAI,CAAC+Y,IAAL,GAAYA,IAAZ;IACA/Y,IAAI,CAAC0Q,KAAL,GAAa,KAAKwF,gBAAL,EAAb;WACO,KAAK/Q,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAMFmC,SAAS,CACPC,IADO,EAEPC,WAAyB,GAAG1C,SAFrB,EAGP2C,YAHO,EAIPC,kBAJO,EAKD;YACEH,IAAI,CAACnC,IAAb;WACO,YAAL;YAEI,KAAKuE,KAAL,CAAWyD,MAAX,IACAU,wBAAwB,CAACvG,IAAI,CAACnK,IAAN,EAAY,KAAKuQ,QAAjB,CAF1B,EAGE;eACKtG,KAAL,CACEE,IAAI,CAACjB,KADP,EAEG,GAAEkB,WAAW,KAAK1C,SAAhB,GAA4B,cAA5B,GAA6C,SAAU,KACxDyC,IAAI,CAACnK,IACN,kBAJH;;;YAQEqK,YAAJ,EAAkB;gBAYVQ,GAAG,GAAI,IAAGV,IAAI,CAACnK,IAAK,EAA1B;;cAEIqK,YAAY,CAACQ,GAAD,CAAhB,EAAuB;iBAChBZ,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,qBAAvB;WADF,MAEO;YACLmB,YAAY,CAACQ,GAAD,CAAZ,GAAoB,IAApB;;;;YAGAT,WAAW,KAAKjD,YAAhB,IAAgCgD,IAAI,CAACnK,IAAL,KAAc,KAAlD,EAAyD;eAClDiK,KAAL,CACEE,IAAI,CAACjB,KADP,EAEE,6EAFF;;;YAKE,EAAEkB,WAAW,GAAG1C,SAAhB,CAAJ,EAAgC;eACzB4H,KAAL,CAAWkJ,WAAX,CAAuBrO,IAAI,CAACnK,IAA5B,EAAkCoK,WAAlC,EAA+CD,IAAI,CAACjB,KAApD;;;;;WAIC,kBAAL;YACMkB,WAAW,KAAK1C,SAApB,EAA+B;eACxBuC,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,2BAAvB;;;;;WAIC,eAAL;6CACmBiB,IAAI,CAACI,UADxB,wCACoC;cAAzBV,IAAI,wBAAR;cACCA,IAAI,CAAC7B,IAAL,KAAc,gBAAlB,EAAoC6B,IAAI,GAAGA,IAAI,CAAClB,KAAZ;eAC/BuB,SAAL,CACEL,IADF,EAEEO,WAFF,EAGEC,YAHF,EAIE,8BAJF;;;;;WASC,cAAL;2CACqBF,IAAI,CAAC6qC,QAD1B,sCACoC;gBAAvBW,IAAI,sBAAV;;cACCA,IAAJ,EAAU;iBACHzrC,SAAL,CACEyrC,IADF,EAEEvrC,WAFF,EAGEC,YAHF,EAIE,6BAJF;;;;;;WAUD,mBAAL;aACOH,SAAL,CACEC,IAAI,CAAC2W,IADP,EAEE1W,WAFF,EAGEC,YAHF,EAIE,oBAJF;;;WAQG,aAAL;aACOH,SAAL,CACEC,IAAI,CAACgR,QADP,EAEE/Q,WAFF,EAGEC,YAHF,EAIE,cAJF;;;WAQG,yBAAL;aACOH,SAAL,CACEC,IAAI,CAACf,UADP,EAEEgB,WAFF,EAGEC,YAHF,EAIE,0BAJF;;;;;gBASM6iC,OAAO,GACX,CAAC9iC,WAAW,KAAK1C,SAAhB,GACG,SADH,GAE8B,iBAF/B,IAGA,iBAHA,IAIC4C,kBAAkB,GACf,SAASA,kBADM,GAEY,YAN/B,CADF;eAQKL,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuBgkC,OAAvB;;;;;EAKN4H,qBAAqB,CAAC/sC,IAAD,EAA4B;QAE7CA,IAAI,CAACoT,QAAL,CAAcnT,IAAd,KAAuB,YAAvB,IACAD,IAAI,CAACoT,QAAL,CAAcnT,IAAd,KAAuB,kBAFzB,EAGE;WACKiC,KAAL,CAAWlC,IAAI,CAACoT,QAAL,CAAcjS,KAAzB,EAAgC,kCAAhC;;;;EAIJm2B,mBAAmB,GAAS;QACtB,KAAK7qB,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAJ,EAA0B;WACnB8zC,gBAAL,CAAsB,KAAK1oC,KAAL,CAAWrD,KAAjC;;;;EAIJ0sC,6BAA6B,GAAS;QAChC,KAAKrpC,KAAL,CAAWghC,kBAAX,GAAgC,CAAC,CAArC,EAAwC;WACjC0H,gBAAL,CAAsB,KAAK1oC,KAAL,CAAWghC,kBAAjC;;;;EAIJ0H,gBAAgB,CAAC7jC,GAAD,EAAc;SACvBnH,KAAL,CAAWmH,GAAX,EAAiB,mCAAjB;;;;;AC5aJ,MAAMykC,6BAA6B,GAAG9tC,IAAI,IAAI;SACrCA,IAAI,CAACC,IAAL,KAAc,yBAAd,GACH6tC,6BAA6B,CAAC9tC,IAAI,CAACqB,UAAN,CAD1B,GAEHrB,IAFJ;CADF;;AAMA,AAAe,MAAM+tC,gBAAN,SAA+BjB,UAA/B,CAA0C;EA0BvDpqC,cAAc,CACZZ,IADY,EAEZa,QAFY,EAGN;QAEJb,IAAI,CAAC7B,IAAL,KAAc,eAAd,IACA6B,IAAI,CAACc,QADL,IAEAd,IAAI,CAAC5B,IAFL,IAIA4B,IAAI,CAACe,SALP,EAME;;;;UAIIC,GAAG,GAAGhB,IAAI,CAACgB,GAAjB;UAEM7K,IAAI,GAAG6K,GAAG,CAAC7C,IAAJ,KAAa,YAAb,GAA4B6C,GAAG,CAAC7K,IAAhC,GAAuC8K,MAAM,CAACD,GAAG,CAAClC,KAAL,CAA1D;;QAEI3I,IAAI,KAAK,WAAb,EAA0B;UACpB0K,QAAQ,CAACK,KAAb,EAAoB;aACbd,KAAL,CAAWY,GAAG,CAAC3B,KAAf,EAAsB,oCAAtB;;;MAEFwB,QAAQ,CAACK,KAAT,GAAiB,IAAjB;;;;EAKJgrC,aAAa,GAAiB;SACvBzmC,KAAL,CAAWiH,KAAX,CAAiB7Q,aAAjB;SACK8e,SAAL;UACMra,IAAI,GAAG,KAAKkK,eAAL,EAAb;;QACI,CAAC,KAAKG,KAAL,CAAWhI,KAAE,CAAC9L,GAAd,CAAL,EAAyB;WAClBoV,UAAL;;;IAEF3L,IAAI,CAACmkC,QAAL,GAAgB,KAAK/hC,KAAL,CAAW+hC,QAA3B;WACOnkC,IAAP;;;EAkBFkK,eAAe,CAAC8I,IAAD,EAAiB7Q,sBAAjB,EAA6D;UACpEG,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACMvC,IAAI,GAAG,KAAK8T,gBAAL,CAAsBd,IAAtB,EAA4B7Q,sBAA5B,CAAb;;QACI,KAAKkI,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAJ,EAA0B;YAClB4G,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAAC+3B,WAAL,GAAmB,CAAC31B,IAAD,CAAnB;;aACO,KAAKiK,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAP,EAA2B;QACzB4G,IAAI,CAAC+3B,WAAL,CAAiB1zB,IAAjB,CACE,KAAK6R,gBAAL,CAAsBd,IAAtB,EAA4B7Q,sBAA5B,CADF;;;WAIGyT,gBAAL,CAAsBhY,IAAI,CAAC+3B,WAA3B;aACO,KAAK5yB,UAAL,CAAgBnF,IAAhB,EAAsB,oBAAtB,CAAP;;;WAEKoC,IAAP;;;EAMF8T,gBAAgB,CACdd,IADc,EAEd7Q,sBAFc,EAGd+V,cAHc,EAIdjF,gBAJc,EAKA;UACR3Q,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;;QACI,KAAKuJ,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;UAC1B,KAAK3G,KAAL,CAAWC,WAAf,EAA4B;YACtBuR,IAAI,GAAG,KAAKk1B,UAAL,CAAgB74B,IAAhB,CAAX;;YACIkF,cAAJ,EAAoB;UAClBvB,IAAI,GAAGuB,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BrB,IAA1B,EAAgCrU,QAAhC,EAA0CC,QAA1C,CAAP;;;eAEKoU,IAAP;OALF,MAMO;aAGAvU,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;;;;UAIEinC,qBAAqB,GAAG,KAAK1pC,KAAL,CAAWghC,kBAAzC;SACKhhC,KAAL,CAAWghC,kBAAX,GAAgC,CAAC,CAAjC;QAEI2I,qBAAJ;;QACI5pC,sBAAJ,EAA4B;MAC1B4pC,qBAAqB,GAAG,KAAxB;KADF,MAEO;MACL5pC,sBAAsB,GAAG;QAAEpD,KAAK,EAAE;OAAlC;MACAgtC,qBAAqB,GAAG,IAAxB;;;QAGE,KAAK1hC,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,KAAKuT,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAA7B,EAAkD;WAC3CuM,KAAL,CAAW+gC,gBAAX,GAA8B,KAAK/gC,KAAL,CAAWrD,KAAzC;;;QAGE4X,IAAI,GAAG,KAAKq1B,qBAAL,CACTh5B,IADS,EAET7Q,sBAFS,EAGT8Q,gBAHS,CAAX;;QAKIiF,cAAJ,EAAoB;MAClBvB,IAAI,GAAGuB,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BrB,IAA1B,EAAgCrU,QAAhC,EAA0CC,QAA1C,CAAP;;;QAEE,KAAKH,KAAL,CAAWvE,IAAX,CAAgB9I,QAApB,EAA8B;YACtB6I,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;YACM4zB,QAAQ,GAAG,KAAK/zB,KAAL,CAAW5D,KAA5B;MACAZ,IAAI,CAACu4B,QAAL,GAAgBA,QAAhB;;UAEIA,QAAQ,KAAK,KAAjB,EAAwB;aACjBvc,YAAL,CAAkB,2BAAlB;aACKA,YAAL,CAAkB,mBAAlB;;;UAEEuc,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,KAAK,KAAvC,EAA8C;aACvCvc,YAAL,CAAkB,mBAAlB;;;MAEFhc,IAAI,CAAC+Y,IAAL,GAAY,KAAKtM,KAAL,CAAWhI,KAAE,CAACtK,EAAd,IACR,KAAKqL,YAAL,CAAkBuT,IAAlB,EAAwBjO,SAAxB,EAAmC,uBAAnC,CADQ,GAERiO,IAFJ;MAGAxU,sBAAsB,CAACpD,KAAvB,GAA+B,CAA/B;WAEKgB,SAAL,CAAe4W,IAAf,EAAqBjO,SAArB,EAAgCA,SAAhC,EAA2C,uBAA3C;YAEMujC,YAAY,GAAGP,6BAA6B,CAAC/0B,IAAD,CAAlD;UAEIu1B,eAAJ;;UACID,YAAY,CAACpuC,IAAb,KAAsB,eAA1B,EAA2C;QACzCquC,eAAe,GAAG,6BAAlB;OADF,MAEO,IAAID,YAAY,CAACpuC,IAAb,KAAsB,cAA1B,EAA0C;QAC/CquC,eAAe,GAAG,6BAAlB;;;UAIAA,eAAe,KACbv1B,IAAI,CAACxX,KAAL,IAAcwX,IAAI,CAACxX,KAAL,CAAW8B,aAA1B,IACC0V,IAAI,CAAC9Y,IAAL,KAAc,yBAFD,CADjB,EAIE;aACKiC,KAAL,CACEmsC,YAAY,CAACltC,KADf,EAEG,yEAAwEmtC,eAAgB,EAF3F;;;UAMEA,eAAJ,EAAqB,KAAKT,6BAAL;WAChBrpC,KAAL,CAAWghC,kBAAX,GAAgC0I,qBAAhC;WAEKvkC,IAAL;MACA3J,IAAI,CAAC0Q,KAAL,GAAa,KAAKwF,gBAAL,CAAsBd,IAAtB,CAAb;aACO,KAAKjQ,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;KA5CF,MA6CO,IAAImuC,qBAAqB,IAAI5pC,sBAAsB,CAACpD,KAApD,EAA2D;WAC3D4M,UAAL,CAAgBxJ,sBAAsB,CAACpD,KAAvC;;;SAGGqD,KAAL,CAAWghC,kBAAX,GAAgC0I,qBAAhC;WAEOn1B,IAAP;;;EAKFq1B,qBAAqB,CACnBh5B,IADmB,EAEnB7Q,sBAFmB,EAGnB8Q,gBAHmB,EAIL;UACR3Q,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACM4gC,gBAAgB,GAAG,KAAK/gC,KAAL,CAAW+gC,gBAApC;UACMnjC,IAAI,GAAG,KAAKmsC,YAAL,CAAkBn5B,IAAlB,EAAwB7Q,sBAAxB,CAAb;;QAGEnC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IACAmC,IAAI,CAACjB,KAAL,KAAeokC,gBAFjB,EAGE;aACOnjC,IAAP;;;QAEEmC,sBAAsB,IAAIA,sBAAsB,CAACpD,KAArD,EAA4D,OAAOiB,IAAP;WAErD,KAAK+S,gBAAL,CACL/S,IADK,EAELgT,IAFK,EAGL1Q,QAHK,EAILC,QAJK,EAKL0Q,gBALK,CAAP;;;EASFF,gBAAgB,CACd/S,IADc,EAEdgT,IAFc,EAGd1Q,QAHc,EAIdC,QAJc,EAOd0Q,gBAPc,EAQA;QACV,KAAKhJ,GAAL,CAAS5H,KAAE,CAAChL,QAAZ,CAAJ,EAA2B;YACnBuG,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAAC4H,IAAL,GAAYxF,IAAZ;MACApC,IAAI,CAAC2V,UAAL,GAAkB,KAAKO,gBAAL,EAAlB;WACKtK,MAAL,CAAYnH,KAAE,CAACnL,KAAf;MACA0G,IAAI,CAACiW,SAAL,GAAiB,KAAKC,gBAAL,CAAsBd,IAAtB,CAAjB;aACO,KAAKjQ,UAAL,CAAgBnF,IAAhB,EAAsB,uBAAtB,CAAP;;;WAEKoC,IAAP;;;EAKFmsC,YAAY,CAACn5B,IAAD,EAAiB7Q,sBAAjB,EAA4D;UAChEG,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACM4gC,gBAAgB,GAAG,KAAK/gC,KAAL,CAAW+gC,gBAApC;UACMnjC,IAAI,GAAG,KAAK61B,eAAL,CAAqB1zB,sBAArB,CAAb;;QAGEnC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IACAmC,IAAI,CAACjB,KAAL,KAAeokC,gBAFjB,EAGE;aACOnjC,IAAP;;;QAEEmC,sBAAsB,IAAIA,sBAAsB,CAACpD,KAArD,EAA4D;aACnDiB,IAAP;;;WAGK,KAAK47B,WAAL,CAAiB57B,IAAjB,EAAuBsC,QAAvB,EAAiCC,QAAjC,EAA2C,CAAC,CAA5C,EAA+CyQ,IAA/C,CAAP;;;EASF4oB,WAAW,CACTjlB,IADS,EAETklB,YAFS,EAGTC,YAHS,EAITC,OAJS,EAKT/oB,IALS,EAMK;UACRo5B,IAAI,GAAG,KAAKhqC,KAAL,CAAWvE,IAAX,CAAgBrI,KAA7B;;QACI42C,IAAI,IAAI,IAAR,KAAiB,CAACp5B,IAAD,IAAS,CAAC,KAAK3I,KAAL,CAAWhI,KAAE,CAACpH,GAAd,CAA3B,CAAJ,EAAoD;UAC9CmxC,IAAI,GAAGrQ,OAAX,EAAoB;cACZ5F,QAAQ,GAAG,KAAK/zB,KAAL,CAAW5D,KAA5B;;YACI23B,QAAQ,KAAK,IAAb,IAAqB,KAAK/zB,KAAL,CAAWyhC,0BAApC,EAAgE;iBACvDltB,IAAP;;;cAEI/Y,IAAI,GAAG,KAAKkB,WAAL,CAAiB+8B,YAAjB,EAA+BC,YAA/B,CAAb;QACAl+B,IAAI,CAAC+Y,IAAL,GAAYA,IAAZ;QACA/Y,IAAI,CAACu4B,QAAL,GAAgBA,QAAhB;;YAEEA,QAAQ,KAAK,IAAb,IACAxf,IAAI,CAAC9Y,IAAL,KAAc,iBADd,KAEC,KAAK/H,OAAL,CAAagrC,8BAAb,IACC,EAAEnqB,IAAI,CAACxX,KAAL,IAAcwX,IAAI,CAACxX,KAAL,CAAW8B,aAA3B,CAHF,CADF,EAKE;eACKnB,KAAL,CACE6W,IAAI,CAAC3F,QAAL,CAAcjS,KADhB,EAEE,kFAFF;;;cAMI8qC,EAAE,GAAG,KAAKznC,KAAL,CAAWvE,IAAtB;;YAEIgsC,EAAE,KAAKxnC,KAAE,CAACjK,QAAd,EAAwB;eACjBwhB,YAAL,CAAkB,kBAAlB;eACKxX,KAAL,CAAWmhC,UAAX,GAAwB,IAAxB;eACK8I,4BAAL,CAAkC11B,IAAlC,EAAwCklB,YAAxC;SAHF,MAIO,IAAIgO,EAAE,KAAKxnC,KAAE,CAAChK,iBAAd,EAAiC;eACjCuhB,YAAL,CAAkB,2BAAlB;;;aAGGrS,IAAL;;YAGEsiC,EAAE,KAAKxnC,KAAE,CAACjK,QAAV,IACA,KAAKwQ,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,SAF3D,EAGE;cAEE,KAAKyB,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KACA,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,OADrB,IAEA,KAAK2G,KAAL,CAAW2pB,OAHb,EAIE;kBACM,KAAKhvB,KAAL,CACJ,KAAKsC,KAAL,CAAWrD,KADP,EAEH,yFAFG,CAAN;;;;QAOJnB,IAAI,CAAC0Q,KAAL,GAAa,KAAKg+B,oBAAL,CAA0BzC,EAA1B,EAA8BuC,IAA9B,EAAoCp5B,IAApC,CAAb;aAEKjQ,UAAL,CACEnF,IADF,EAEEisC,EAAE,KAAKxnC,KAAE,CAAC/J,SAAV,IACEuxC,EAAE,KAAKxnC,KAAE,CAAC9J,UADZ,IAEEsxC,EAAE,KAAKxnC,KAAE,CAAChK,iBAFZ,GAGI,mBAHJ,GAII,kBANN;eASO,KAAKujC,WAAL,CACLh+B,IADK,EAELi+B,YAFK,EAGLC,YAHK,EAILC,OAJK,EAKL/oB,IALK,CAAP;;;;WASG2D,IAAP;;;EAMF21B,oBAAoB,CAClBzC,EADkB,EAElBuC,IAFkB,EAGlBp5B,IAHkB,EAIJ;UACR1Q,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;;YACQsnC,EAAR;WACOxnC,KAAE,CAACjK,QAAR;gBACU,KAAKwQ,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAR;eACO,OAAL;mBACS,KAAK2jC,0BAAL,CAAgC,MAAM;qBACpC,KAAKC,sBAAL,CACL,KAAKC,wBAAL,CAA8B5C,EAA9B,EAAkCuC,IAAlC,EAAwCp5B,IAAxC,CADK,EAEL1Q,QAFK,EAGLC,QAHK,CAAP;aADK,CAAP;;eAOG,QAAL;mBACS,KAAKmqC,8BAAL,CAAoC,MAAM;qBACxC,KAAKC,uBAAL,CAA6BP,IAA7B,EAAmCp5B,IAAnC,CAAP;aADK,CAAP;;;;eAOG,KAAKy5B,wBAAL,CAA8B5C,EAA9B,EAAkCuC,IAAlC,EAAwCp5B,IAAxC,CAAP;;;;EAONy5B,wBAAwB,CACtB5C,EADsB,EAEtBuC,IAFsB,EAGtBp5B,IAHsB,EAIR;UACR1Q,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;WAEO,KAAKq5B,WAAL,CACL,KAAK/F,eAAL,EADK,EAELvzB,QAFK,EAGLC,QAHK,EAILsnC,EAAE,CAACt0C,gBAAH,GAAsB62C,IAAI,GAAG,CAA7B,GAAiCA,IAJ5B,EAKLp5B,IALK,CAAP;;;EAWF6iB,eAAe,CAAC1zB,sBAAD,EAA6C;QAExD,KAAK2J,YAAL,CAAkB,OAAlB,MACC,KAAK3G,KAAL,CAAW2pB,OAAX,IACE,CAAC,KAAK3pB,KAAL,CAAWypB,UAAZ,IAA0B,KAAK94B,OAAL,CAAawqC,yBAF1C,CADF,EAIE;aACO,KAAKsM,UAAL,EAAP;KALF,MAMO,IAAI,KAAKxqC,KAAL,CAAWvE,IAAX,CAAgB7I,MAApB,EAA4B;YAC3B4I,IAAI,GAAG,KAAKkF,SAAL,EAAb;YACM4mC,MAAM,GAAG,KAAKr/B,KAAL,CAAWhI,KAAE,CAACpK,MAAd,CAAf;MACA2F,IAAI,CAACu4B,QAAL,GAAgB,KAAK/zB,KAAL,CAAW5D,KAA3B;MACAZ,IAAI,CAAC5I,MAAL,GAAc,IAAd;;UAEI4I,IAAI,CAACu4B,QAAL,KAAkB,OAAtB,EAA+B;aACxBvc,YAAL,CAAkB,kBAAlB;;;WAEGrS,IAAL;MAEA3J,IAAI,CAACoT,QAAL,GAAgB,KAAK6kB,eAAL,EAAhB;;UAEI1zB,sBAAsB,IAAIA,sBAAsB,CAACpD,KAArD,EAA4D;aACrD4M,UAAL,CAAgBxJ,sBAAsB,CAACpD,KAAvC;;;UAGE2qC,MAAJ,EAAY;aACL3pC,SAAL,CAAenC,IAAI,CAACoT,QAApB,EAA8BtI,SAA9B,EAAyCA,SAAzC,EAAoD,kBAApD;OADF,MAEO,IAAI,KAAKtG,KAAL,CAAWyD,MAAX,IAAqBjI,IAAI,CAACu4B,QAAL,KAAkB,QAA3C,EAAqD;cACpDyU,GAAG,GAAGhtC,IAAI,CAACoT,QAAjB;;YAEI45B,GAAG,CAAC/sC,IAAJ,KAAa,YAAjB,EAA+B;eACxBiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,wCAAvB;SADF,MAEO,IACL6rC,GAAG,CAAC/sC,IAAJ,KAAa,kBAAb,IACA+sC,GAAG,CAAC15B,QAAJ,CAAarT,IAAb,KAAsB,aAFjB,EAGL;eACKiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,yCAAvB;;;;aAIG,KAAKgE,UAAL,CACLnF,IADK,EAEL8rC,MAAM,GAAG,kBAAH,GAAwB,iBAFzB,CAAP;;;UAMIpnC,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;QACIvC,IAAI,GAAG,KAAK6sC,mBAAL,CAAyB1qC,sBAAzB,CAAX;QACIA,sBAAsB,IAAIA,sBAAsB,CAACpD,KAArD,EAA4D,OAAOiB,IAAP;;WACrD,KAAKoC,KAAL,CAAWvE,IAAX,CAAgB5I,OAAhB,IAA2B,CAAC,KAAK8c,kBAAL,EAAnC,EAA8D;YACtDnU,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAACu4B,QAAL,GAAgB,KAAK/zB,KAAL,CAAW5D,KAA3B;MACAZ,IAAI,CAAC5I,MAAL,GAAc,KAAd;MACA4I,IAAI,CAACoT,QAAL,GAAgBhR,IAAhB;WACKD,SAAL,CAAeC,IAAf,EAAqB0I,SAArB,EAAgCA,SAAhC,EAA2C,mBAA3C;WACKnB,IAAL;MACAvH,IAAI,GAAG,KAAK+C,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;WAEKoC,IAAP;;;EAKF6sC,mBAAmB,CAAC1qC,sBAAD,EAA6C;UACxDG,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACM4gC,gBAAgB,GAAG,KAAK/gC,KAAL,CAAW+gC,gBAApC;UACMnjC,IAAI,GAAG,KAAKkC,aAAL,CAAmBC,sBAAnB,CAAb;;QAGEnC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IACAmC,IAAI,CAACjB,KAAL,KAAeokC,gBAFjB,EAGE;aACOnjC,IAAP;;;QAGEmC,sBAAsB,IAAIA,sBAAsB,CAACpD,KAArD,EAA4D;aACnDiB,IAAP;;;WAGK,KAAKiZ,eAAL,CAAqBjZ,IAArB,EAA2BsC,QAA3B,EAAqCC,QAArC,CAAP;;;EAGF0W,eAAe,CACbC,IADa,EAEb5W,QAFa,EAGbC,QAHa,EAIb4W,OAJa,EAKC;UACRO,eAAe,GAAG,KAAK6hB,eAAL,CAAqBriB,IAArB,CAAxB;UAEM9W,KAAK,GAAG;MACZyX,mBAAmB,EAAE,KADT;MAEZC,IAAI,EAAE;KAFR;;OAIG;MACDZ,IAAI,GAAG,KAAKM,cAAL,CACLN,IADK,EAEL5W,QAFK,EAGLC,QAHK,EAIL4W,OAJK,EAKL/W,KALK,EAMLsX,eANK,CAAP;KADF,QASS,CAACtX,KAAK,CAAC0X,IAThB;;WAUOZ,IAAP;;;EAOFM,cAAc,CACZN,IADY,EAEZ5W,QAFY,EAGZC,QAHY,EAIZ4W,OAJY,EAKZ/W,KALY,EAMZsX,eANY,EAOE;QACV,CAACP,OAAD,IAAY,KAAKlP,GAAL,CAAS5H,KAAE,CAAClL,WAAZ,CAAhB,EAA0C;YAClCyG,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAAC0tB,MAAL,GAAcpS,IAAd;MACAtb,IAAI,CAACwb,MAAL,GAAc,KAAK0zB,eAAL,EAAd;MACA1qC,KAAK,CAAC0X,IAAN,GAAa,IAAb;aACO,KAAKb,eAAL,CACL,KAAKlW,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CADK,EAEL0E,QAFK,EAGLC,QAHK,EAIL4W,OAJK,CAAP;KALF,MAWO,IAAI,KAAK9O,KAAL,CAAWhI,KAAE,CAAC/K,WAAd,CAAJ,EAAgC;WAChCsiB,YAAL,CAAkB,kBAAlB;MACAxX,KAAK,CAACyX,mBAAN,GAA4B,IAA5B;;UACIV,OAAO,IAAI,KAAKrJ,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACvL,MAA5C,EAAoD;QAClDsL,KAAK,CAAC0X,IAAN,GAAa,IAAb;eACOZ,IAAP;;;WAEG3R,IAAL;YAEM3J,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;;UAEI,KAAK0H,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAJ,EAA2B;QACzBoH,IAAI,CAAC0tB,MAAL,GAAcpS,IAAd;QACAtb,IAAI,CAACsT,QAAL,GAAgB,KAAKhH,eAAL,EAAhB;QACAtM,IAAI,CAAC4C,QAAL,GAAgB,IAAhB;QACA5C,IAAI,CAACoS,QAAL,GAAgB,IAAhB;aACKxG,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;eACO,KAAKsM,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;OANF,MAOO,IAAI,KAAKqM,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAJ,EAAyB;QAC9B8G,IAAI,CAACwb,MAAL,GAAcF,IAAd;QACAtb,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CAAkChX,KAAE,CAACtL,MAArC,EAA6C,KAA7C,CAAjB;QACA6G,IAAI,CAACoS,QAAL,GAAgB,IAAhB;eACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;OAJK,MAKA;QACLA,IAAI,CAAC0tB,MAAL,GAAcpS,IAAd;QACAtb,IAAI,CAACsT,QAAL,GAAgB,KAAKxG,eAAL,CAAqB,IAArB,CAAhB;QACA9M,IAAI,CAAC4C,QAAL,GAAgB,KAAhB;QACA5C,IAAI,CAACoS,QAAL,GAAgB,IAAhB;eACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;KA5BG,MA8BA,IAAI,KAAKqM,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAJ,EAAsB;YACrBwG,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAAC0tB,MAAL,GAAcpS,IAAd;MACAtb,IAAI,CAACsT,QAAL,GAAgB,KAAK67B,qBAAL,EAAhB;MACAnvC,IAAI,CAAC4C,QAAL,GAAgB,KAAhB;;UACI4B,KAAK,CAACyX,mBAAV,EAA+B;QAC7Bjc,IAAI,CAACoS,QAAL,GAAgB,KAAhB;eACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;;aAEK,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;KATK,MAUA,IAAI,KAAKqM,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAJ,EAA2B;YAC1BoH,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;MACA3E,IAAI,CAAC0tB,MAAL,GAAcpS,IAAd;MACAtb,IAAI,CAACsT,QAAL,GAAgB,KAAKhH,eAAL,EAAhB;MACAtM,IAAI,CAAC4C,QAAL,GAAgB,IAAhB;WACKgJ,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;;UACI2L,KAAK,CAACyX,mBAAV,EAA+B;QAC7Bjc,IAAI,CAACoS,QAAL,GAAgB,KAAhB;eACO,KAAKjN,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;;aAEK,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;KAVK,MAWA,IAAI,CAACub,OAAD,IAAY,KAAK9O,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAhB,EAAuC;YACtCk2C,yBAAyB,GAAG,KAAK5qC,KAAL,CAAWkhC,sBAA7C;YACM2J,WAAW,GAAG,KAAK7qC,KAAL,CAAW6hC,QAA/B;YACMiJ,WAAW,GAAG,KAAK9qC,KAAL,CAAW8hC,QAA/B;WACK9hC,KAAL,CAAWkhC,sBAAX,GAAoC,IAApC;WACKlhC,KAAL,CAAW6hC,QAAX,GAAsB,CAAtB;WACK7hC,KAAL,CAAW8hC,QAAX,GAAsB,CAAtB;WAEK38B,IAAL;UAEI3J,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAX;MACA3E,IAAI,CAACwb,MAAL,GAAcF,IAAd;YAEM4yB,qBAAqB,GAAG,KAAK1pC,KAAL,CAAWghC,kBAAzC;WACKhhC,KAAL,CAAWghC,kBAAX,GAAgC,CAAC,CAAjC;MAEAxlC,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CACfhX,KAAE,CAACtL,MADY,EAEf2iB,eAFe,EAGfR,IAAI,CAACrb,IAAL,KAAc,QAHC,EAIfqb,IAAI,CAACrb,IAAL,KAAc,OAJC,CAAjB;;UAMI,CAACuE,KAAK,CAACyX,mBAAX,EAAgC;aACzB4hB,oBAAL,CAA0B79B,IAA1B;OADF,MAEO;aACAuvC,4BAAL,CAAkCvvC,IAAlC;;;UAGE8b,eAAe,IAAI,KAAKzB,qBAAL,EAAvB,EAAqD;QACnD7V,KAAK,CAAC0X,IAAN,GAAa,IAAb;aAEK2xB,6BAAL;QAEA7tC,IAAI,GAAG,KAAKma,iCAAL,CACL,KAAKjZ,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CADK,EAEL3E,IAFK,CAAP;aAIKusC,8BAAL;aACK/nC,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAtB;aACK7qC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAtB;OAXF,MAYO;aACAnC,oBAAL,CAA0BntC,IAAI,CAACqX,SAA/B;aAIK7S,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAW,IAAI,KAAK7qC,KAAL,CAAW6hC,QAAhD;aACK7hC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAW,IAAI,KAAK9qC,KAAL,CAAW8hC,QAAhD;;;WAGG9hC,KAAL,CAAWkhC,sBAAX,GAAoC0J,yBAApC;WACK5qC,KAAL,CAAWghC,kBAAX,GAAgC0I,qBAAhC;aAEOluC,IAAP;KApDK,MAqDA,IAAI,KAAKyM,KAAL,CAAWhI,KAAE,CAAC3K,SAAd,CAAJ,EAA8B;aAC5B,KAAKgkC,6BAAL,CACLp5B,QADK,EAELC,QAFK,EAGL2W,IAHK,EAIL9W,KAJK,CAAP;KADK,MAOA;MACLA,KAAK,CAAC0X,IAAN,GAAa,IAAb;aACOZ,IAAP;;;;EAIJwiB,6BAA6B,CAC3Bp5B,QAD2B,EAE3BC,QAF2B,EAG3B2W,IAH2B,EAI3B9W,KAJ2B,EAK3B2X,aAL2B,EAMC;UACtBnc,IAAgC,GAAG,KAAKkB,WAAL,CACvCwD,QADuC,EAEvCC,QAFuC,CAAzC;IAIA3E,IAAI,CAACwvC,GAAL,GAAWl0B,IAAX;IACAtb,IAAI,CAACyvC,KAAL,GAAa,KAAK3X,aAAL,CAAmB,IAAnB,CAAb;QACI3b,aAAJ,EAAmBnc,IAAI,CAACoE,cAAL,GAAsB+X,aAAtB;;QACf3X,KAAK,CAACyX,mBAAV,EAA+B;WACxB/Z,KAAL,CACEwC,QADF,EAEE,2DAFF;;;WAKK,KAAKS,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;;EAGF29B,eAAe,CAACriB,IAAD,EAA8B;WAEzCA,IAAI,CAACrb,IAAL,KAAc,YAAd,IACAqb,IAAI,CAACrjB,IAAL,KAAc,OADd,IAEA,KAAKuM,KAAL,CAAWsD,UAAX,KAA0BwT,IAAI,CAAC7Z,GAF/B,IAGA,CAAC,KAAK0S,kBAAL,EAHD,IAIA,KAAKtM,KAAL,CAAWnG,KAAX,CAAiB4Z,IAAI,CAACna,KAAtB,EAA6Bma,IAAI,CAAC7Z,GAAlC,MAA2C,OAL7C;;;EASFo8B,oBAAoB,CAAC79B,IAAD,EAA2C;QACzDA,IAAI,CAACwb,MAAL,CAAYvb,IAAZ,KAAqB,QAAzB,EAAmC;UAC7BD,IAAI,CAACqX,SAAL,CAAepV,MAAf,KAA0B,CAA9B,EAAiC;aAC1BC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,wCAAvB;;;YAGIuuC,SAAS,GAAG1vC,IAAI,CAACqX,SAAL,CAAe,CAAf,CAAlB;;UACIq4B,SAAS,IAAIA,SAAS,CAACzvC,IAAV,KAAmB,eAApC,EAAqD;aAC9CiC,KAAL,CAAWwtC,SAAS,CAACvuC,KAArB,EAA4B,gCAA5B;;;;WAGG,KAAKgE,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFuvC,4BAA4B,CAACvvC,IAAD,EAA2C;QACjEA,IAAI,CAACwb,MAAL,CAAYvb,IAAZ,KAAqB,QAAzB,EAAmC;UAC7BD,IAAI,CAACqX,SAAL,CAAepV,MAAf,KAA0B,CAA9B,EAAiC;aAC1BC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,wCAAvB;;;YAGIuuC,SAAS,GAAG1vC,IAAI,CAACqX,SAAL,CAAe,CAAf,CAAlB;;UACIq4B,SAAS,IAAIA,SAAS,CAACzvC,IAAV,KAAmB,eAApC,EAAqD;aAC9CiC,KAAL,CAAWwtC,SAAS,CAACvuC,KAArB,EAA4B,gCAA5B;;;;WAGG,KAAKgE,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;EAGFyb,4BAA4B,CAC1B8xB,KAD0B,EAE1BoC,kBAF0B,EAG1BC,aAH0B,EAI1BC,gBAJ0B,EAKK;UACzBpC,IAAI,GAAG,EAAb;QACIqC,eAAJ;QACIpC,KAAK,GAAG,IAAZ;UACMqC,6BAA6B,GAAG,KAAKvrC,KAAL,CAAWyhC,0BAAjD;SACKzhC,KAAL,CAAWyhC,0BAAX,GAAwC,KAAxC;;WAEO,CAAC,KAAK55B,GAAL,CAASkhC,KAAT,CAAR,EAAyB;UACnBG,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;;YACI,KAAKiT,GAAL,CAASkhC,KAAT,CAAJ,EAAqB;cACfqC,aAAJ,EAAmB;iBACZ1tC,KAAL,CACE,KAAKsC,KAAL,CAAWwJ,YADb,EAEE,2DAFF;;;;;;;UAWF,KAAKvB,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KAAyB,CAAC42C,eAA9B,EAA+C;QAC7CA,eAAe,GAAG,KAAKtrC,KAAL,CAAWrD,KAA7B;;;MAGFssC,IAAI,CAACppC,IAAL,CACE,KAAK2rC,iBAAL,CACE,KADF,EAEEL,kBAAkB,GAAG;QAAExuC,KAAK,EAAE;OAAZ,GAAkB2J,SAFtC,EAGE6kC,kBAAkB,GAAG;QAAExuC,KAAK,EAAE;OAAZ,GAAkB2J,SAHtC,EAIE+kC,gBAJF,CADF;;;QAWEF,kBAAkB,IAAIG,eAAtB,IAAyC,KAAKz1B,qBAAL,EAA7C,EAA2E;WACpEtM,UAAL;;;SAGGvJ,KAAL,CAAWyhC,0BAAX,GAAwC8J,6BAAxC;WAEOtC,IAAP;;;EAGFpzB,qBAAqB,GAAY;WACxB,KAAK5N,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,KAAwB,CAAC,KAAKwa,kBAAL,EAAhC;;;EAGFgG,iCAAiC,CAC/Bna,IAD+B,EAE/Boa,IAF+B,EAGJ;SACtBxO,MAAL,CAAYnH,KAAE,CAAC9K,KAAf;SACK2iB,oBAAL,CAA0Btc,IAA1B,EAAgCoa,IAAI,CAAC/C,SAArC,EAAgD,IAAhD;WACOrX,IAAP;;;EAKFkvC,eAAe,GAAiB;UACxBxqC,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;WACO,KAAK0W,eAAL,CAAqB,KAAK/W,aAAL,EAArB,EAA2CI,QAA3C,EAAqDC,QAArD,EAA+D,IAA/D,CAAP;;;EAQFL,aAAa,CAACC,sBAAD,EAA8C;QAGrD,KAAKC,KAAL,CAAWvE,IAAX,KAAoBwE,KAAE,CAACpJ,KAA3B,EAAkC,KAAKytC,UAAL;UAE5B1tB,UAAU,GAAG,KAAK5W,KAAL,CAAW+gC,gBAAX,KAAgC,KAAK/gC,KAAL,CAAWrD,KAA9D;QACInB,IAAJ;;YAEQ,KAAKwE,KAAL,CAAWvE,IAAnB;WACOwE,KAAE,CAAC5H,MAAR;YACM,CAAC,KAAK0K,KAAL,CAAW4pB,UAAZ,IAA0B,CAAC,KAAKj5B,OAAL,CAAa2qC,uBAA5C,EAAqE;eAC9D3gC,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,qDAFF;;;QAMFnB,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKyE,IAAL;;YAEE,KAAK8C,KAAL,CAAWhI,KAAE,CAACvL,MAAd,KACA,CAAC,KAAKqO,KAAL,CAAWxC,gBADZ,IAEA,CAAC,KAAK7M,OAAL,CAAa2qC,uBAHhB,EAIE;eACK3gC,KAAL,CACElC,IAAI,CAACmB,KADP,EAEE,qEACE,iFAHJ;;;YAQA,CAAC,KAAKsL,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAD,IACA,CAAC,KAAKuT,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CADD,IAEA,CAAC,KAAK6T,KAAL,CAAWhI,KAAE,CAACjL,GAAd,CAHH,EAIE;eACKuU,UAAL;;;eAGK,KAAK5I,UAAL,CAAgBnF,IAAhB,EAAsB,OAAtB,CAAP;;WAEGyE,KAAE,CAACxH,OAAR;QACE+C,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKyE,IAAL;;YAEI,KAAK8C,KAAL,CAAWhI,KAAE,CAACjL,GAAd,CAAJ,EAAwB;iBACf,KAAKy2C,uBAAL,CAA6BjwC,IAA7B,CAAP;;;aAGGgc,YAAL,CAAkB,eAAlB,EAAmChc,IAAI,CAACmB,KAAxC;;YAEI,CAAC,KAAKsL,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAL,EAA4B;eACrB6U,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAACvL,MAAzB;;;eAEK,KAAKiM,UAAL,CAAgBnF,IAAhB,EAAsB,QAAtB,CAAP;;WACGyE,KAAE,CAAC7H,KAAR;QACEoD,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKyE,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;WAEGyE,KAAE,CAACxM,IAAR;;UACE+H,IAAI,GAAG,KAAKkF,SAAL,EAAP;gBACMI,WAAW,GAAG,KAAKd,KAAL,CAAWc,WAA/B;gBACMuH,EAAE,GAAG,KAAKC,eAAL,EAAX;;cAGE,CAACxH,WAAD,IACAuH,EAAE,CAAC5U,IAAH,KAAY,OADZ,IAEA,KAAKwU,KAAL,CAAWhI,KAAE,CAACxI,SAAd,CAFA,IAGA,CAAC,KAAKkY,kBAAL,EAJH,EAKE;iBACKxK,IAAL;mBACO,KAAKumC,aAAL,CAAmBlwC,IAAnB,EAAyB8K,SAAzB,EAAoC,IAApC,CAAP;WAPF,MAQO,IACLsQ,UAAU,IACV,CAAC9V,WADD,IAEAuH,EAAE,CAAC5U,IAAH,KAAY,OAFZ,IAGA,KAAKwU,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAHA,IAIA,CAAC,KAAKkc,kBAAL,EALI,EAML;kBACMnS,MAAM,GAAG,CAAC,KAAK8K,eAAL,EAAD,CAAf;iBACKlB,MAAL,CAAYnH,KAAE,CAAC9K,KAAf;iBAEK2iB,oBAAL,CAA0Btc,IAA1B,EAAgCgC,MAAhC,EAAwC,IAAxC;mBACOhC,IAAP;;;cAGEob,UAAU,IAAI,KAAK3O,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,CAAd,IAAsC,CAAC,KAAKwa,kBAAL,EAA3C,EAAsE;iBAC/DxK,IAAL;iBACK2S,oBAAL,CAA0Btc,IAA1B,EAAgC,CAAC6M,EAAD,CAAhC,EAAsC,KAAtC;mBACO7M,IAAP;;;iBAGK6M,EAAP;;;WAGGpI,KAAE,CAAC5I,GAAR;;eACOmgB,YAAL,CAAkB,eAAlB;gBACMhc,IAAI,GAAG,KAAKkF,SAAL,EAAb;eACKyE,IAAL;gBACMwmC,SAAS,GAAG,KAAK3rC,KAAL,CAAW2hC,MAA7B;eACK3hC,KAAL,CAAW2hC,MAAX,GAAoB,EAApB;UACAnmC,IAAI,CAACmD,IAAL,GAAY,KAAKo9B,UAAL,EAAZ;eACK/7B,KAAL,CAAW2hC,MAAX,GAAoBgK,SAApB;iBACO,KAAKhrC,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;WAGGyE,KAAE,CAAChM,MAAR;;gBACQmI,KAAK,GAAG,KAAK4D,KAAL,CAAW5D,KAAzB;UACAZ,IAAI,GAAG,KAAKa,YAAL,CAAkBD,KAAK,CAACA,KAAxB,EAA+B,eAA/B,CAAP;UACAZ,IAAI,CAACM,OAAL,GAAeM,KAAK,CAACN,OAArB;UACAN,IAAI,CAACO,KAAL,GAAaK,KAAK,CAACL,KAAnB;iBACOP,IAAP;;;WAGGyE,KAAE,CAAClM,GAAR;eACS,KAAKsI,YAAL,CAAkB,KAAK2D,KAAL,CAAW5D,KAA7B,EAAoC,gBAApC,CAAP;;WAEG6D,KAAE,CAACjM,MAAR;eACS,KAAKqI,YAAL,CAAkB,KAAK2D,KAAL,CAAW5D,KAA7B,EAAoC,eAApC,CAAP;;WAEG6D,KAAE,CAAC/L,MAAR;eACS,KAAKmI,YAAL,CAAkB,KAAK2D,KAAL,CAAW5D,KAA7B,EAAoC,eAApC,CAAP;;WAEG6D,KAAE,CAACvH,KAAR;QACE8C,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKyE,IAAL;eACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;WAEGyE,KAAE,CAACtH,KAAR;WACKsH,KAAE,CAACrH,MAAR;eACS,KAAKgzC,mBAAL,EAAP;;WAEG3rC,KAAE,CAACvL,MAAR;eACS,KAAKiiB,kCAAL,CAAwCC,UAAxC,CAAP;;WAEG3W,KAAE,CAAC7L,QAAR;;gBACQm3C,6BAA6B,GAAG,KAAKvrC,KAAL,CACnCyhC,0BADH;eAEKzhC,KAAL,CAAWyhC,0BAAX,GAAwC,KAAxC;UACAjmC,IAAI,GAAG,KAAKkF,SAAL,EAAP;eACKyE,IAAL;UACA3J,IAAI,CAACitC,QAAL,GAAgB,KAAKoD,aAAL,CACd5rC,KAAE,CAAC5L,QADW,EAEd,IAFc,EAGd0L,sBAHc,CAAhB;;cAKI,CAAC,KAAKC,KAAL,CAAWkhC,sBAAhB,EAAwC;iBAMjC1tB,gBAAL,CAAsBhY,IAAI,CAACitC,QAA3B;;;eAEGzoC,KAAL,CAAWyhC,0BAAX,GAAwC8J,6BAAxC;iBACO,KAAK5qC,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;WAEGyE,KAAE,CAAC3L,MAAR;;gBACQi3C,6BAA6B,GAAG,KAAKvrC,KAAL,CACnCyhC,0BADH;eAEKzhC,KAAL,CAAWyhC,0BAAX,GAAwC,KAAxC;gBACMqK,GAAG,GAAG,KAAKhD,QAAL,CAAc,KAAd,EAAqB/oC,sBAArB,CAAZ;eACKC,KAAL,CAAWyhC,0BAAX,GAAwC8J,6BAAxC;iBACOO,GAAP;;;WAEG7rC,KAAE,CAACxI,SAAR;eACS,KAAKs0C,uBAAL,EAAP;;WAEG9rC,KAAE,CAACzK,EAAR;aACOw2C,eAAL;;WAEG/rC,KAAE,CAAC3H,MAAR;QACEkD,IAAI,GAAG,KAAKkF,SAAL,EAAP;aACKu7B,cAAL,CAAoBzgC,IAApB;eACO,KAAKq8B,UAAL,CAAgBr8B,IAAhB,EAAsB,KAAtB,CAAP;;WAEGyE,KAAE,CAAC9H,IAAR;eACS,KAAK8zC,QAAL,EAAP;;WAEGhsC,KAAE,CAAC3K,SAAR;eACS,KAAKg+B,aAAL,CAAmB,KAAnB,CAAP;;WAEGrzB,KAAE,CAAClL,WAAR;;UACEyG,IAAI,GAAG,KAAKkF,SAAL,EAAP;eACKyE,IAAL;UACA3J,IAAI,CAAC0tB,MAAL,GAAc,IAAd;gBACMlS,MAAM,GAAIxb,IAAI,CAACwb,MAAL,GAAc,KAAK0zB,eAAL,EAA9B;;cACI1zB,MAAM,CAACvb,IAAP,KAAgB,kBAApB,EAAwC;mBAC/B,KAAKkF,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;WADF,MAEO;kBACC,KAAKkC,KAAL,CACJsZ,MAAM,CAACra,KADH,EAEJ,iDAFI,CAAN;;;;WAOCsD,KAAE,CAACxK,IAAR;;cACM,KAAKuK,KAAL,CAAWmhC,UAAf,EAA2B;YACzB3lC,IAAI,GAAG,KAAKkF,SAAL,EAAP;;gBAGE,KAAK8F,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAD3D,EAEE;mBACK9I,KAAL,CACElC,IAAI,CAACmB,KADP,EAEE,8FAFF;;;iBAMGwI,IAAL;;gBACI,KAAK+mC,mDAAL,EAAJ,EAAgE;mBACzDC,sBAAL;qBACO,KAAKxrC,UAAL,CAAgBnF,IAAhB,EAAsB,+BAAtB,CAAP;aAFF,MAGO;oBACC,KAAKkC,KAAL,CACJlC,IAAI,CAACmB,KADD,EAEH,qEAFG,CAAN;;;;;;cASE,KAAK4M,UAAL,EAAN;;;;EAINqiC,mBAAmB,GAAqB;UAChCpwC,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAACY,KAAL,GAAa,KAAK6L,KAAL,CAAWhI,KAAE,CAACtH,KAAd,CAAb;SACKwM,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFmvC,qBAAqB,GAAiC;UAC9CyB,SAAS,GAAG,KAAKnkC,KAAL,CAAWhI,KAAE,CAACxK,IAAd,CAAlB;;QAEI22C,SAAJ,EAAe;WACRvE,eAAL,CAAqB,CAAC,wBAAD,EAA2B,qBAA3B,CAArB;YACMrsC,IAAI,GAAG,KAAKkF,SAAL,EAAb;WACKyE,IAAL;WACKw2B,aAAL,CAAmB,2CAAnB;MACAngC,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,CAAqB,IAArB,CAAV;aACO,KAAK3H,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;KANF,MAOO;aACE,KAAK8M,eAAL,CAAqB,IAArB,CAAP;;;;EAIJyjC,uBAAuB,GAA0C;UACzDvwC,IAAI,GAAG,KAAKkF,SAAL,EAAb;QAOI2rC,IAAI,GAAG,KAAK3rC,SAAL,EAAX;SACKyE,IAAL;IACAknC,IAAI,GAAG,KAAK58B,gBAAL,CAAsB48B,IAAtB,EAA4B,UAA5B,CAAP;;QAEI,KAAKtpC,KAAL,CAAWC,WAAX,IAA0B,KAAK6E,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAA9B,EAAgD;aACvC,KAAKs3C,iBAAL,CAAuB9wC,IAAvB,EAA6B6wC,IAA7B,EAAmC,MAAnC,CAAP;;;WAEK,KAAKX,aAAL,CAAmBlwC,IAAnB,CAAP;;;EAGF8wC,iBAAiB,CACf9wC,IADe,EAEf6wC,IAFe,EAGfE,YAHe,EAIC;IAChB/wC,IAAI,CAAC6wC,IAAL,GAAYA,IAAZ;;QAEIA,IAAI,CAAC54C,IAAL,KAAc,UAAd,IAA4B84C,YAAY,KAAK,MAAjD,EAAyD;UACnD,KAAK7iC,YAAL,CAAkB6iC,YAAlB,CAAJ,EAAqC;aAC9B/0B,YAAL,CAAkB,cAAlB;OADF,MAEO,IAAI,CAAC,KAAKxB,SAAL,CAAe,cAAf,CAAL,EAAqC;aAErCzM,UAAL;;;;UAIEzI,WAAW,GAAG,KAAKd,KAAL,CAAWc,WAA/B;IAEAtF,IAAI,CAACsT,QAAL,GAAgB,KAAKxG,eAAL,CAAqB,IAArB,CAAhB;;QAEI9M,IAAI,CAACsT,QAAL,CAAcrb,IAAd,KAAuB84C,YAAvB,IAAuCzrC,WAA3C,EAAwD;WACjDpD,KAAL,CACElC,IAAI,CAACsT,QAAL,CAAcnS,KADhB,EAEG,oCAAmC0vC,IAAI,CAAC54C,IAAK,OAC5C44C,IAAI,CAAC54C,IACN,IAAG84C,YAAa,EAJnB;;;WAQK,KAAK5rC,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGFiwC,uBAAuB,CAACjwC,IAAD,EAAuC;UACtD6M,EAAE,GAAG,KAAKoH,gBAAL,CAAsB,KAAKkgB,eAAL,CAAqBn0B,IAArB,CAAtB,EAAkD,QAAlD,CAAX;SACK4L,MAAL,CAAYnH,KAAE,CAACjL,GAAf;;QAEI,KAAK0U,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;WACxB8N,YAAL,CAAkB,YAAlB;KADF,MAEO,IAAI,CAAC,KAAKxB,SAAL,CAAe,YAAf,CAAL,EAAmC;WACnCtY,KAAL,CACE2K,EAAE,CAAC1L,KADL,EAEG,qDAFH;;;QAME,CAAC,KAAKqH,QAAV,EAAoB;WACbtG,KAAL,CACE2K,EAAE,CAAC1L,KADL,EAEG,yDAFH,EAGE;QAAE6E,IAAI,EAAE;OAHV;;;SAMG69B,iBAAL,GAAyB,IAAzB;WAEO,KAAKiN,iBAAL,CAAuB9wC,IAAvB,EAA6B6M,EAA7B,EAAiC,MAAjC,CAAP;;;EAGFhM,YAAY,CACVD,KADU,EAEVX,IAFU,EAGVyE,QAHU,EAIVC,QAJU,EAKP;IACHD,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWrD,KAAlC;IACAwD,QAAQ,GAAGA,QAAQ,IAAI,KAAKH,KAAL,CAAWG,QAAlC;UAEM3E,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;SACKqnC,QAAL,CAAchsC,IAAd,EAAoB,UAApB,EAAgCY,KAAhC;SACKorC,QAAL,CAAchsC,IAAd,EAAoB,KAApB,EAA2B,KAAK6H,KAAL,CAAWnG,KAAX,CAAiBgD,QAAjB,EAA2B,KAAKF,KAAL,CAAW/C,GAAtC,CAA3B;IACAzB,IAAI,CAACY,KAAL,GAAaA,KAAb;SACK+I,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB,CAAP;;;EAGFkb,kCAAkC,CAACC,UAAD,EAAoC;UAC9D1W,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;QAEIuG,GAAJ;SACKU,MAAL,CAAYnH,KAAE,CAACvL,MAAf;UAEMk2C,yBAAyB,GAAG,KAAK5qC,KAAL,CAAWkhC,sBAA7C;UACM2J,WAAW,GAAG,KAAK7qC,KAAL,CAAW6hC,QAA/B;UACMiJ,WAAW,GAAG,KAAK9qC,KAAL,CAAW8hC,QAA/B;UACMyJ,6BAA6B,GAAG,KAAKvrC,KAAL,CAAWyhC,0BAAjD;SACKzhC,KAAL,CAAWkhC,sBAAX,GAAoC,IAApC;SACKlhC,KAAL,CAAW6hC,QAAX,GAAsB,CAAtB;SACK7hC,KAAL,CAAW8hC,QAAX,GAAsB,CAAtB;SACK9hC,KAAL,CAAWyhC,0BAAX,GAAwC,KAAxC;UAEM+K,aAAa,GAAG,KAAKxsC,KAAL,CAAWrD,KAAjC;UACM8vC,aAAa,GAAG,KAAKzsC,KAAL,CAAWG,QAAjC;UACMoT,QAAQ,GAAG,EAAjB;UACMxT,sBAAsB,GAAG;MAAEpD,KAAK,EAAE;KAAxC;UACMkU,gBAAgB,GAAG;MAAElU,KAAK,EAAE;KAAlC;QACIusC,KAAK,GAAG,IAAZ;QACIwD,WAAJ;QACIC,kBAAJ;;WAEO,CAAC,KAAK1kC,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAR,EAA+B;UACzBu0C,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf,EAAsBic,gBAAgB,CAAClU,KAAjB,IAA0B,IAAhD;;YACI,KAAKsL,KAAL,CAAWhI,KAAE,CAACtL,MAAd,CAAJ,EAA2B;UACzBg4C,kBAAkB,GAAG,KAAK3sC,KAAL,CAAWrD,KAAhC;;;;;UAKA,KAAKsL,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;cACrBu3C,kBAAkB,GAAG,KAAK5sC,KAAL,CAAWrD,KAAtC;cACMkwC,kBAAkB,GAAG,KAAK7sC,KAAL,CAAWG,QAAtC;QACAusC,WAAW,GAAG,KAAK1sC,KAAL,CAAWrD,KAAzB;QACA4W,QAAQ,CAAC1T,IAAT,CACE,KAAKsS,cAAL,CACE,KAAK02B,gBAAL,EADF,EAEE+D,kBAFF,EAGEC,kBAHF,CADF;aAQK/Z,mBAAL;;OAZF,MAeO;QACLvf,QAAQ,CAAC1T,IAAT,CACE,KAAK6R,gBAAL,CACE,KADF,EAEE3R,sBAFF,EAGE,KAAKoS,cAHP,EAIEtB,gBAJF,CADF;;;;UAWEi8B,WAAW,GAAG,KAAK9sC,KAAL,CAAWrD,KAA/B;UACMowC,WAAW,GAAG,KAAK/sC,KAAL,CAAWG,QAA/B;SACKiH,MAAL,CAAYnH,KAAE,CAACtL,MAAf;SAEKqL,KAAL,CAAWkhC,sBAAX,GAAoC0J,yBAApC;SACK5qC,KAAL,CAAWyhC,0BAAX,GAAwC8J,6BAAxC;QAEIyB,SAAS,GAAG,KAAKtwC,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAhB;;QAEEyW,UAAU,IACV,KAAKL,gBAAL,EADA,KAECy2B,SAAS,GAAG,KAAK12B,UAAL,CAAgB02B,SAAhB,CAFb,CADF,EAIE;WACKjF,8BAAL;WACK/nC,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAtB;WACK7qC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAtB;;4BACoBv3B,QAJpB,eAI8B;cAAnBxD,KAAK,GAAIwD,QAAJ,IAAX;;YACCxD,KAAK,CAAChT,KAAN,IAAegT,KAAK,CAAChT,KAAN,CAAY8B,aAA/B,EAA8C;eACvC0K,UAAL,CAAgBwG,KAAK,CAAChT,KAAN,CAAYkwC,UAA5B;;;;WAICn1B,oBAAL,CAA0Bk1B,SAA1B,EAAqCz5B,QAArC,EAA+C,KAA/C;aACOy5B,SAAP;;;SAKGhtC,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAW,IAAI,KAAK7qC,KAAL,CAAW6hC,QAAhD;SACK7hC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAW,IAAI,KAAK9qC,KAAL,CAAW8hC,QAAhD;;QAEI,CAACvuB,QAAQ,CAAC9V,MAAd,EAAsB;WACf8L,UAAL,CAAgB,KAAKvJ,KAAL,CAAWwJ,YAA3B;;;QAEEmjC,kBAAJ,EAAwB,KAAKpjC,UAAL,CAAgBojC,kBAAhB;QACpBD,WAAJ,EAAiB,KAAKnjC,UAAL,CAAgBmjC,WAAhB;;QACb3sC,sBAAsB,CAACpD,KAA3B,EAAkC;WAC3B4M,UAAL,CAAgBxJ,sBAAsB,CAACpD,KAAvC;;;QAEEkU,gBAAgB,CAAClU,KAArB,EAA4B,KAAK4M,UAAL,CAAgBsH,gBAAgB,CAAClU,KAAjC;SAEvBgsC,oBAAL,CAA0Bp1B,QAA1B,EAA8D,IAA9D;;QACIA,QAAQ,CAAC9V,MAAT,GAAkB,CAAtB,EAAyB;MACvBiJ,GAAG,GAAG,KAAKhK,WAAL,CAAiB8vC,aAAjB,EAAgCC,aAAhC,CAAN;MACA/lC,GAAG,CAAC6sB,WAAJ,GAAkBhgB,QAAlB;WACKvW,YAAL,CAAkB0J,GAAlB,EAAuB,oBAAvB,EAA6ComC,WAA7C,EAA0DC,WAA1D;KAHF,MAIO;MACLrmC,GAAG,GAAG6M,QAAQ,CAAC,CAAD,CAAd;;;QAGE,CAAC,KAAK7f,OAAL,CAAagrC,8BAAlB,EAAkD;WAC3C8I,QAAL,CAAc9gC,GAAd,EAAmB,eAAnB,EAAoC,IAApC;WACK8gC,QAAL,CAAc9gC,GAAd,EAAmB,YAAnB,EAAiCxG,QAAjC;aACOwG,GAAP;;;UAGIvE,eAAe,GAAG,KAAKzF,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAxB;IACAgC,eAAe,CAACtF,UAAhB,GAA6B6J,GAA7B;SACK/F,UAAL,CAAgBwB,eAAhB,EAAiC,yBAAjC;WACOA,eAAP;;;EAGFoU,gBAAgB,GAAY;WACnB,CAAC,KAAK5G,kBAAL,EAAR;;;EAGF2G,UAAU,CAAC9a,IAAD,EAA8D;QAClE,KAAKqM,GAAL,CAAS5H,KAAE,CAAC9K,KAAZ,CAAJ,EAAwB;aACfqG,IAAP;;;;EAIJ2W,cAAc,CACZ3W,IADY,EAEZ0E,QAFY,EAGZC,QAHY,EAIE;WACP3E,IAAP;;;EASFywC,QAAQ,GAAqC;UACrCzwC,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACM2rC,IAAI,GAAG,KAAK/jC,eAAL,CAAqB,IAArB,CAAb;;QAEI,KAAKT,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAJ,EAAsB;YACdk4C,QAAQ,GAAG,KAAKZ,iBAAL,CAAuB9wC,IAAvB,EAA6B6wC,IAA7B,EAAmC,QAAnC,CAAjB;;UAEI,CAAC,KAAKtpC,KAAL,CAAW8pB,kBAAZ,IAAkC,CAAC,KAAK7sB,KAAL,CAAWohC,eAAlD,EAAmE;YAC7DlqB,KAAK,GAAG,0CAAZ;;YAEI,KAAKlB,SAAL,CAAe,iBAAf,CAAJ,EAAuC;UACrCkB,KAAK,IAAI,sBAAT;;;aAGGxZ,KAAL,CAAWwvC,QAAQ,CAACvwC,KAApB,EAA2Bua,KAA3B;;;aAGKg2B,QAAP;;;IAGF1xC,IAAI,CAACwb,MAAL,GAAc,KAAK0zB,eAAL,EAAd;;QAEIlvC,IAAI,CAACwb,MAAL,CAAYvb,IAAZ,KAAqB,QAAzB,EAAmC;WAC5BiC,KAAL,CAAWlC,IAAI,CAACwb,MAAL,CAAYra,KAAvB,EAA8B,iCAA9B;KADF,MAEO,IACLnB,IAAI,CAACwb,MAAL,CAAYvb,IAAZ,KAAqB,0BAArB,IACAD,IAAI,CAACwb,MAAL,CAAYvb,IAAZ,KAAqB,wBAFhB,EAGL;WACKiC,KAAL,CACE,KAAKsC,KAAL,CAAWsD,UADb,EAEE,yDAFF;KAJK,MAQA,IAAI,KAAKuE,GAAL,CAAS5H,KAAE,CAAC/K,WAAZ,CAAJ,EAA8B;WAC9BwI,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,yDAFF;;;SAMGib,iBAAL,CAAuBpc,IAAvB;WACO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFoc,iBAAiB,CAACpc,IAAD,EAA8B;QACzC,KAAKqM,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAJ,EAAyB;YACjB6kC,IAAI,GAAG,KAAKsS,aAAL,CAAmB5rC,KAAE,CAACtL,MAAtB,CAAb;WACK6e,gBAAL,CAAsB+lB,IAAtB;MAEA/9B,IAAI,CAACqX,SAAL,GAAiB0mB,IAAjB;KAJF,MAKO;MACL/9B,IAAI,CAACqX,SAAL,GAAiB,EAAjB;;;;EAMJs6B,oBAAoB,CAACC,QAAD,EAAuC;UACnDhE,IAAI,GAAG,KAAK1oC,SAAL,EAAb;;QACI,KAAKV,KAAL,CAAW5D,KAAX,KAAqB,IAAzB,EAA+B;UACzB,CAACgxC,QAAL,EAAe;aAER1vC,KAAL,CACE,KAAKsC,KAAL,CAAWmiC,6BAAX,IAA4C,CAD9C,EAEE,qCAFF;OAFF,MAMO;aACAniC,KAAL,CAAWmiC,6BAAX,GAA2C,IAA3C;;;;IAGJiH,IAAI,CAAChtC,KAAL,GAAa;MACXU,GAAG,EAAE,KAAKuG,KAAL,CACFnG,KADE,CACI,KAAK8C,KAAL,CAAWrD,KADf,EACsB,KAAKqD,KAAL,CAAW/C,GADjC,EAEFipC,OAFE,CAEM,QAFN,EAEgB,IAFhB,CADM;MAIXmH,MAAM,EAAE,KAAKrtC,KAAL,CAAW5D;KAJrB;SAMK+I,IAAL;IACAikC,IAAI,CAACkE,IAAL,GAAY,KAAKrlC,KAAL,CAAWhI,KAAE,CAAC3K,SAAd,CAAZ;WACO,KAAKqL,UAAL,CAAgByoC,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGF9V,aAAa,CAAC8Z,QAAD,EAAuC;UAC5C5xC,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKyE,IAAL;IACA3J,IAAI,CAAC+3B,WAAL,GAAmB,EAAnB;QACIga,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAAb;IACA5xC,IAAI,CAACgyC,MAAL,GAAc,CAACD,MAAD,CAAd;;WACO,CAACA,MAAM,CAACD,IAAf,EAAqB;WACdlmC,MAAL,CAAYnH,KAAE,CAAC1K,YAAf;MACAiG,IAAI,CAAC+3B,WAAL,CAAiB1zB,IAAjB,CAAsB,KAAKiI,eAAL,EAAtB;WACKV,MAAL,CAAYnH,KAAE,CAACzL,MAAf;MACAgH,IAAI,CAACgyC,MAAL,CAAY3tC,IAAZ,CAAkB0tC,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAA3B;;;SAEGjoC,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAKFstC,QAAQ,CACNjoC,SADM,EAENd,sBAFM,EAGH;UACG5B,QAAa,GAAGy/B,MAAM,CAAC6P,MAAP,CAAc,IAAd,CAAtB;QACIvE,KAAK,GAAG,IAAZ;UACM1tC,IAAI,GAAG,KAAKkF,SAAL,EAAb;IAEAlF,IAAI,CAACwC,UAAL,GAAkB,EAAlB;SACKmH,IAAL;;WAEO,CAAC,KAAK0C,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAR,EAA6B;UACvB00C,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;YACI,KAAKiT,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAJ,EAAyB;;;YAGrB8I,IAAI,GAAG,KAAKowC,iBAAL,CAAuB7sC,SAAvB,EAAkCd,sBAAlC,CAAb;UAEI,CAACc,SAAL,EAAgB,KAAK3C,cAAL,CAAoBZ,IAApB,EAA0Ba,QAA1B;;UAGZb,IAAI,CAACe,SAAT,EAAoB;aACbmpC,QAAL,CAAclqC,IAAd,EAAoB,WAApB,EAAiC,IAAjC;;;MAGF9B,IAAI,CAACwC,UAAL,CAAgB6B,IAAhB,CAAqBvC,IAArB;;;WAGK,KAAKqD,UAAL,CACLnF,IADK,EAELqF,SAAS,GAAG,eAAH,GAAqB,kBAFzB,CAAP;;;EAMF8sC,WAAW,CAACrwC,IAAD,EAAkC;WAEzC,CAACA,IAAI,CAACc,QAAN,IACAd,IAAI,CAACgB,GAAL,CAAS7C,IAAT,KAAkB,YADlB,IAEA6B,IAAI,CAACgB,GAAL,CAAS7K,IAAT,KAAkB,OAFlB,KAGC,KAAKwU,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KACC,KAAKwU,KAAL,CAAWhI,KAAE,CAAClM,GAAd,CADD,IAEC,KAAKkU,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAFD,IAGC,KAAK+T,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CAHD,IAIC,KAAK4L,KAAL,CAAWvE,IAAX,CAAgBvI,OAJjB,IAKC,KAAK+U,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,CARF,KASA,CAAC,KAAK03B,qBAAL,EAVH;;;EAcFof,iBAAiB,CACf7sC,SADe,EAEfd,sBAFe,EAGmC;QAC9C24B,UAAU,GAAG,EAAjB;;QACI,KAAKzwB,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAJ,EAAuB;UACjB,KAAKwgB,SAAL,CAAe,YAAf,CAAJ,EAAkC;aAC3BtY,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,gEAFF;OADF,MAKO;eAGE,KAAKsL,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAP,EAA0B;UACxBkjC,UAAU,CAAC74B,IAAX,CAAgB,KAAKspC,cAAL,EAAhB;;;;;UAKA7rC,IAAI,GAAG,KAAKoD,SAAL,EAAb;QACI3G,WAAW,GAAG,KAAlB;QACID,OAAO,GAAG,KAAd;QACIoG,QAAJ;QACIC,QAAJ;;QAEI,KAAK8H,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;UACvBqjC,UAAU,CAACj7B,MAAf,EAAuB,KAAK8L,UAAL;;UACnB1I,SAAJ,EAAe;aACRsE,IAAL;QAEA7H,IAAI,CAACsR,QAAL,GAAgB,KAAKtG,eAAL,EAAhB;aACKwqB,mBAAL;eACO,KAAKnyB,UAAL,CAAgBrD,IAAhB,EAAsB,aAAtB,CAAP;;;aAGK,KAAKsrC,WAAL,EAAP;;;QAGElQ,UAAU,CAACj7B,MAAf,EAAuB;MACrBH,IAAI,CAACo7B,UAAL,GAAkBA,UAAlB;MACAA,UAAU,GAAG,EAAb;;;IAGFp7B,IAAI,CAAC3B,MAAL,GAAc,KAAd;;QAEIkF,SAAS,IAAId,sBAAjB,EAAyC;MACvCG,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAAtB;MACAwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAAtB;;;QAGE,CAACU,SAAL,EAAgB;MACd9G,WAAW,GAAG,KAAK8N,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAd;;;UAGIkK,WAAW,GAAG,KAAKd,KAAL,CAAWc,WAA/B;SACKqT,iBAAL,CAAuB7W,IAAvB;;QAEI,CAACuD,SAAD,IAAc,CAACC,WAAf,IAA8B,CAAC/G,WAA/B,IAA8C,KAAK4zC,WAAL,CAAiBrwC,IAAjB,CAAlD,EAA0E;MACxExD,OAAO,GAAG,IAAV;MACAC,WAAW,GAAG,KAAK8N,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAd;WACKud,iBAAL,CAAuB7W,IAAvB;KAHF,MAIO;MACLxD,OAAO,GAAG,KAAV;;;SAGGsa,iBAAL,CACE9W,IADF,EAEE4C,QAFF,EAGEC,QAHF,EAIEpG,WAJF,EAKED,OALF,EAME+G,SANF,EAOEd,sBAPF,EAQEe,WARF;WAWOxD,IAAP;;;EAGFswC,sBAAsB,CAACtwC,IAAD,EAAuBuD,SAAvB,EAAoD;WAEtE,CAACA,SAAD,IACA,CAACvD,IAAI,CAACc,QADN,IAEAd,IAAI,CAACgB,GAAL,CAAS7C,IAAT,KAAkB,YAFlB,KAGC6B,IAAI,CAACgB,GAAL,CAAS7K,IAAT,KAAkB,KAAlB,IAA2B6J,IAAI,CAACgB,GAAL,CAAS7K,IAAT,KAAkB,KAH9C,MAIC,KAAKwU,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,KACD,KAAK+T,KAAL,CAAWhI,KAAE,CAAClM,GAAd,CADC,IAED,KAAKkU,KAAL,CAAWhI,KAAE,CAAC7L,QAAd,CAFC,IAGD,KAAK6T,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAHC,IAIC,CAAC,CAAC,KAAKuM,KAAL,CAAWvE,IAAX,CAAgBvI,OARpB,CADF;;;EAaFkoC,iCAAiC,CAC/Bz/B,MAD+B,EAEvB;WACDA,MAAM,CAACD,IAAP,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAAnC;;;EAKF2B,uBAAuB,CAAC1B,MAAD,EAA+C;UAC9D4B,UAAU,GAAG,KAAK69B,iCAAL,CAAuCz/B,MAAvC,CAAnB;UACMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;;QACIhB,MAAM,CAAC6B,MAAP,CAAcC,MAAd,KAAyBF,UAA7B,EAAyC;UACnC5B,MAAM,CAACD,IAAP,KAAgB,KAApB,EAA2B;aACpBgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;OADF,MAEO;aACAe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;;;;QAKFhB,MAAM,CAACD,IAAP,KAAgB,KAAhB,IACAC,MAAM,CAAC6B,MAAP,CAAc7B,MAAM,CAAC6B,MAAP,CAAcC,MAAd,GAAuB,CAArC,EAAwChC,IAAxC,KAAiD,aAFnD,EAGE;WACKiC,KAAL,CACEf,KADF,EAEE,uDAFF;;;;EAOJiE,iBAAiB,CACftD,IADe,EAEfvD,WAFe,EAGfD,OAHe,EAIf+G,SAJe,EAKfC,WALe,EAME;QACbhH,OAAO,IAAIC,WAAX,IAA0B,KAAKkO,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAA9B,EAAqD;UAC/CmM,SAAJ,EAAe,KAAK0I,UAAL;MACfjM,IAAI,CAAC5B,IAAL,GAAY,QAAZ;MACA4B,IAAI,CAAC3B,MAAL,GAAc,IAAd;aACO,KAAKgE,WAAL,CACLrC,IADK,EAELvD,WAFK,EAGLD,OAHK,EAIe,KAJf,EAKL,KALK,EAML,cANK,CAAP;;;QAUE,CAACgH,WAAD,IAAgB,KAAK8sC,sBAAL,CAA4BtwC,IAA5B,EAAkCuD,SAAlC,CAApB,EAAkE;UAC5D9G,WAAW,IAAID,OAAnB,EAA4B,KAAKyP,UAAL;MAC5BjM,IAAI,CAAC5B,IAAL,GAAY4B,IAAI,CAACgB,GAAL,CAAS7K,IAArB;WACK0gB,iBAAL,CAAuB7W,IAAvB;WACKqC,WAAL,CACErC,IADF,EAEoB,KAFpB,EAGgB,KAHhB,EAIsB,KAJtB,EAKE,KALF,EAME,cANF;WAQKD,uBAAL,CAA6BC,IAA7B;aACOA,IAAP;;;;EAIJyD,mBAAmB,CACjBzD,IADiB,EAEjB4C,QAFiB,EAGjBC,QAHiB,EAIjBU,SAJiB,EAKjBd,sBALiB,EAME;IACnBzC,IAAI,CAACe,SAAL,GAAiB,KAAjB;;QAEI,KAAKwJ,GAAL,CAAS5H,KAAE,CAACnL,KAAZ,CAAJ,EAAwB;MACtBwI,IAAI,CAAClB,KAAL,GAAayE,SAAS,GAClB,KAAKyT,iBAAL,CAAuB,KAAKtU,KAAL,CAAWrD,KAAlC,EAAyC,KAAKqD,KAAL,CAAWG,QAApD,CADkB,GAElB,KAAKuR,gBAAL,CAAsB,KAAtB,EAA6B3R,sBAA7B,CAFJ;aAIO,KAAKY,UAAL,CAAgBrD,IAAhB,EAAsB,gBAAtB,CAAP;;;QAGE,CAACA,IAAI,CAACc,QAAN,IAAkBd,IAAI,CAACgB,GAAL,CAAS7C,IAAT,KAAkB,YAAxC,EAAsD;WAC/C8Z,iBAAL,CAAuBjY,IAAI,CAACgB,GAAL,CAAS7K,IAAhC,EAAsC6J,IAAI,CAACgB,GAAL,CAAS3B,KAA/C,EAAsD,IAAtD,EAA4D,IAA5D;;UAEIkE,SAAJ,EAAe;QACbvD,IAAI,CAAClB,KAAL,GAAa,KAAKkY,iBAAL,CACXpU,QADW,EAEXC,QAFW,EAGX7C,IAAI,CAACgB,GAAL,CAAS8W,OAAT,EAHW,CAAb;OADF,MAMO,IAAI,KAAKnN,KAAL,CAAWhI,KAAE,CAACtK,EAAd,KAAqBoK,sBAAzB,EAAiD;YAClD,CAACA,sBAAsB,CAACpD,KAA5B,EAAmC;UACjCoD,sBAAsB,CAACpD,KAAvB,GAA+B,KAAKqD,KAAL,CAAWrD,KAA1C;;;QAEFW,IAAI,CAAClB,KAAL,GAAa,KAAKkY,iBAAL,CACXpU,QADW,EAEXC,QAFW,EAGX7C,IAAI,CAACgB,GAAL,CAAS8W,OAAT,EAHW,CAAb;OAJK,MASA;QACL9X,IAAI,CAAClB,KAAL,GAAakB,IAAI,CAACgB,GAAL,CAAS8W,OAAT,EAAb;;;MAEF9X,IAAI,CAACe,SAAL,GAAiB,IAAjB;aAEO,KAAKsC,UAAL,CAAgBrD,IAAhB,EAAsB,gBAAtB,CAAP;;;;EAIJ8W,iBAAiB,CACf9W,IADe,EAEf4C,QAFe,EAGfC,QAHe,EAIfpG,WAJe,EAKfD,OALe,EAMf+G,SANe,EAOfd,sBAPe,EAQfe,WARe,EAST;UACAtF,IAAI,GACR,KAAKoF,iBAAL,CACEtD,IADF,EAEEvD,WAFF,EAGED,OAHF,EAIE+G,SAJF,EAKEC,WALF,KAOA,KAAKC,mBAAL,CACEzD,IADF,EAEE4C,QAFF,EAGEC,QAHF,EAIEU,SAJF,EAKEd,sBALF,CARF;QAgBI,CAACvE,IAAL,EAAW,KAAK+N,UAAL;WAGJ/N,IAAP;;;EAGF2Y,iBAAiB,CACf7W,IADe,EAEc;QACzB,KAAKuK,GAAL,CAAS5H,KAAE,CAAC7L,QAAZ,CAAJ,EAA2B;MACxBkJ,IAAD,CAA4Cc,QAA5C,GAAuD,IAAvD;MACAd,IAAI,CAACgB,GAAL,GAAW,KAAKoT,gBAAL,EAAX;WACKtK,MAAL,CAAYnH,KAAE,CAAC5L,QAAf;KAHF,MAIO;YACCw5C,iBAAiB,GAAG,KAAK7tC,KAAL,CAAWgsB,cAArC;WACKhsB,KAAL,CAAWgsB,cAAX,GAA4B,IAA5B;MAEC1uB,IAAD,CAAmBgB,GAAnB,GACE,KAAK2J,KAAL,CAAWhI,KAAE,CAAClM,GAAd,KAAsB,KAAKkU,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAtB,GACI,KAAK4L,aAAL,EADJ,GAEI,KAAK6qC,qBAAL,EAHN;;UAKIrtC,IAAI,CAACgB,GAAL,CAAS7C,IAAT,KAAkB,aAAtB,EAAqC;QAEnC6B,IAAI,CAACc,QAAL,GAAgB,KAAhB;;;WAGG4B,KAAL,CAAWgsB,cAAX,GAA4B6hB,iBAA5B;;;WAGKvwC,IAAI,CAACgB,GAAZ;;;EAKFnB,YAAY,CAAC3B,IAAD,EAAuC1B,OAAvC,EAAgE;IAC1E0B,IAAI,CAAC6M,EAAL,GAAU,IAAV;IACA7M,IAAI,CAACsyC,SAAL,GAAiB,KAAjB;IACAtyC,IAAI,CAACuyC,KAAL,GAAa,CAAC,CAACj0C,OAAf;;;EAKF6F,WAAW,CACTnE,IADS,EAETzB,WAFS,EAGTD,OAHS,EAIT2F,aAJS,EAKTc,gBALS,EAMT9E,IANS,EAOT+E,YAAqB,GAAG,KAPf,EAQN;UACGqqC,WAAW,GAAG,KAAK7qC,KAAL,CAAW6hC,QAA/B;UACMiJ,WAAW,GAAG,KAAK9qC,KAAL,CAAW8hC,QAA/B;SACK9hC,KAAL,CAAW6hC,QAAX,GAAsB,CAAtB;SACK7hC,KAAL,CAAW8hC,QAAX,GAAsB,CAAtB;SAEK3kC,YAAL,CAAkB3B,IAAlB,EAAwB1B,OAAxB;IACA0B,IAAI,CAACsyC,SAAL,GAAiB,CAAC,CAAC/zC,WAAnB;UACM0b,cAAc,GAAGhW,aAAvB;SACKsD,KAAL,CAAWiH,KAAX,CACEnQ,aAAa,CAACC,OAAD,EAAU0B,IAAI,CAACsyC,SAAf,CAAb,GACEr0C,WADF,IAEG+G,YAAY,GAAG7G,WAAH,GAAiB,CAFhC,KAGG4G,gBAAgB,GAAG7G,kBAAH,GAAwB,CAH3C,CADF;SAMK8b,mBAAL,CAA0Bha,IAA1B,EAAsCia,cAAtC;SACKsyB,8BAAL;SACKz3B,0BAAL,CAAgC9U,IAAhC,EAAsCC,IAAtC,EAA4C,IAA5C;SACKsH,KAAL,CAAWoH,IAAX;SAEKnK,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAtB;SACK7qC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAtB;WAEOtvC,IAAP;;;EAMFsc,oBAAoB,CAClBtc,IADkB,EAElBgC,MAFkB,EAGlB1D,OAHkB,EAIS;SACtBiJ,KAAL,CAAWiH,KAAX,CAAiBnQ,aAAa,CAACC,OAAD,EAAU,KAAV,CAAb,GAAgCP,WAAjD;SACK4D,YAAL,CAAkB3B,IAAlB,EAAwB1B,OAAxB;UAEM8wC,yBAAyB,GAAG,KAAK5qC,KAAL,CAAWkhC,sBAA7C;UACM2J,WAAW,GAAG,KAAK7qC,KAAL,CAAW6hC,QAA/B;UACMiJ,WAAW,GAAG,KAAK9qC,KAAL,CAAW8hC,QAA/B;SACK9hC,KAAL,CAAWkhC,sBAAX,GAAoC,KAApC;SACKlhC,KAAL,CAAW6hC,QAAX,GAAsB,CAAtB;SACK7hC,KAAL,CAAW8hC,QAAX,GAAsB,CAAtB;QAEItkC,MAAJ,EAAY,KAAKgZ,0BAAL,CAAgChb,IAAhC,EAAsCgC,MAAtC;SACP4C,iBAAL,CAAuB5E,IAAvB,EAA6B,IAA7B;SAEKuH,KAAL,CAAWoH,IAAX;SACKnK,KAAL,CAAWkhC,sBAAX,GAAoC0J,yBAApC;SACK5qC,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAtB;SACK7qC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAtB;WAEO,KAAKnqC,UAAL,CAAgBnF,IAAhB,EAAsB,yBAAtB,CAAP;;;EAGFgb,0BAA0B,CACxBhb,IADwB,EAExBgC,MAFwB,EAGlB;IACNhC,IAAI,CAACgC,MAAL,GAAc,KAAKuU,gBAAL,CACZvU,MADY,EAEZ,IAFY,EAGZ,2BAHY,CAAd;;;EAOFiB,YAAY,CAACjD,IAAD,EAA4C;UAChDkD,gBAAgB,GAAGlD,IAAI,CAACmD,IAAL,CAAUlD,IAAV,KAAmB,gBAA5C;;QAEIiD,gBAAgB,IAAIlD,IAAI,CAACmD,IAAL,CAAUQ,UAAV,CAAqB1B,MAA7C,EAAqD;gDAC3BjC,IAAI,CAACmD,IAAL,CAAUQ,UADiB,6CACL;cAAnC5C,SAAS,6BAAf;;YACCA,SAAS,CAACH,KAAV,CAAgBA,KAAhB,KAA0B,YAA9B,EAA4C;iBACnC,IAAP;;;;;WAKC,KAAP;;;EAGFkU,0BAA0B,CACxB9U,IADwB,EAExBC,IAFwB,EAGxB6E,QAAkB,GAAG,KAHG,EAIlB;SAEDF,iBAAL,CAAuB5E,IAAvB,EAA6B,KAA7B,EAAoC8E,QAApC;SACKK,UAAL,CAAgBnF,IAAhB,EAAsBC,IAAtB;;;EAIF2E,iBAAiB,CACf5E,IADe,EAEf6E,eAFe,EAGfC,QAAkB,GAAG,KAHN,EAIT;UACA0tC,YAAY,GAAG3tC,eAAe,IAAI,CAAC,KAAK4H,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAzC;UACM25C,SAAS,GAAG,KAAKjuC,KAAL,CAAWyD,MAA7B;QACIyqC,SAAS,GAAG,KAAhB;UAEMC,eAAe,GAAG,KAAKnuC,KAAL,CAAWihC,YAAnC;SACKjhC,KAAL,CAAWihC,YAAX,GAA0B,KAA1B;;QAEI+M,YAAJ,EAAkB;MAChBxyC,IAAI,CAACmD,IAAL,GAAY,KAAK+S,gBAAL,EAAZ;WACKM,WAAL,CAAiBxW,IAAjB,EAAuB,KAAvB,EAA8B6E,eAA9B;KAFF,MAGO;YACC+tC,SAAS,GAAG,CAAC,KAAKC,iBAAL,CAAuB7yC,IAAI,CAACgC,MAA5B,CAAnB;;UACI,CAACywC,SAAD,IAAcG,SAAlB,EAA6B;QAC3BF,SAAS,GAAG,KAAKlG,eAAL,CAAqB,KAAKhoC,KAAL,CAAW/C,GAAhC,CAAZ;;YAIIixC,SAAS,IAAIE,SAAjB,EAA4B;gBAEpBE,QAAQ,GAEZ,CAAC9yC,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACE,IAAL,KAAc,aAAzC,KAEA,CAAC,CAACF,IAAI,CAAC8C,GAFP,GAGI9C,IAAI,CAAC8C,GAAL,CAASrB,GAHb,GAIIzB,IAAI,CAACmB,KANX;eAOKe,KAAL,CACE4wC,QADF,EAEE,2EAFF;;;;YAQE3C,SAAS,GAAG,KAAK3rC,KAAL,CAAW2hC,MAA7B;WACK3hC,KAAL,CAAW2hC,MAAX,GAAoB,EAApB;UACIuM,SAAJ,EAAe,KAAKluC,KAAL,CAAWyD,MAAX,GAAoB,IAApB;WAGVuO,WAAL,CACExW,IADF,EAEE,CAACyyC,SAAD,IAAc,CAACC,SAAf,IAA4B,CAAC7tC,eAA7B,IAAgD,CAACC,QAAjD,IAA6D,CAAC8tC,SAFhE,EAGE/tC,eAHF;MAKA7E,IAAI,CAACmD,IAAL,GAAY,KAAKo9B,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,CAAZ;WACK/7B,KAAL,CAAW2hC,MAAX,GAAoBgK,SAApB;;;SAGG3rC,KAAL,CAAWihC,YAAX,GAA0BkN,eAA1B;;QAEI,KAAKnuC,KAAL,CAAWyD,MAAX,IAAqBjI,IAAI,CAAC6M,EAA9B,EAAkC;WAC3B1K,SAAL,CAAenC,IAAI,CAAC6M,EAApB,EAAwBjN,YAAxB,EAAsCkL,SAAtC,EAAiD,eAAjD;;;SAEGtG,KAAL,CAAWyD,MAAX,GAAoBwqC,SAApB;;;EAGFI,iBAAiB,CACf7wC,MADe,EAEN;SACJ,IAAIsH,CAAC,GAAG,CAAR,EAAW2gC,GAAG,GAAGjoC,MAAM,CAACC,MAA7B,EAAqCqH,CAAC,GAAG2gC,GAAzC,EAA8C3gC,CAAC,EAA/C,EAAmD;UAC7CtH,MAAM,CAACsH,CAAD,CAAN,CAAUrJ,IAAV,KAAmB,YAAvB,EAAqC,OAAO,KAAP;;;WAEhC,IAAP;;;EAGFuW,WAAW,CACTxW,IADS,EAETib,eAFS,EAITC,eAJS,EAKH;UAEA63B,QAAY,GAAG3Q,MAAM,CAAC6P,MAAP,CAAc,IAAd,CAArB;;SACK,IAAI3oC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtJ,IAAI,CAACgC,MAAL,CAAYC,MAAhC,EAAwCqH,CAAC,EAAzC,EAA6C;WACtCnH,SAAL,CACEnC,IAAI,CAACgC,MAAL,CAAYsH,CAAZ,CADF,EAEEjK,QAFF,EAGE4b,eAAe,GAAG,IAAH,GAAU83B,QAH3B,EAIE,wBAJF;;;;EAeJ1C,aAAa,CACX9C,KADW,EAEXC,UAFW,EAGXjpC,sBAHW,EAIoB;UACzBkpC,IAAI,GAAG,EAAb;QACIC,KAAK,GAAG,IAAZ;;WAEO,CAAC,KAAKrhC,GAAL,CAASkhC,KAAT,CAAR,EAAyB;UACnBG,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;YACI,KAAKiT,GAAL,CAASkhC,KAAT,CAAJ,EAAqB;;;MAGvBE,IAAI,CAACppC,IAAL,CAAU,KAAK2rC,iBAAL,CAAuBxC,UAAvB,EAAmCjpC,sBAAnC,CAAV;;;WAEKkpC,IAAP;;;EAGFuC,iBAAiB,CACfxC,UADe,EAEfjpC,sBAFe,EAGf8Q,gBAHe,EAIfw6B,gBAJe,EAKA;QACXxS,GAAJ;;QACImQ,UAAU,IAAI,KAAK/gC,KAAL,CAAWhI,KAAE,CAACrL,KAAd,CAAlB,EAAwC;MACtCikC,GAAG,GAAG,IAAN;KADF,MAEO,IAAI,KAAK5wB,KAAL,CAAWhI,KAAE,CAAC5K,QAAd,CAAJ,EAA6B;YAC5Bu3C,kBAAkB,GAAG,KAAK5sC,KAAL,CAAWrD,KAAtC;YACMkwC,kBAAkB,GAAG,KAAK7sC,KAAL,CAAWG,QAAtC;MACA04B,GAAG,GAAG,KAAK1mB,cAAL,CACJ,KAAKy2B,WAAL,CAAiB7oC,sBAAjB,EAAyC8Q,gBAAzC,CADI,EAEJ+7B,kBAFI,EAGJC,kBAHI,CAAN;KAHK,MAQA,IAAI,KAAK5kC,KAAL,CAAWhI,KAAE,CAAChL,QAAd,CAAJ,EAA6B;WAC7BuiB,YAAL,CAAkB,oBAAlB;;UACI,CAAC6zB,gBAAL,EAAuB;aAChB3tC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,iCAA7B;;;YAEInB,IAAI,GAAG,KAAKkF,SAAL,EAAb;WACKyE,IAAL;MACA0zB,GAAG,GAAG,KAAKl4B,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAN;KAPK,MAQA;MACLq9B,GAAG,GAAG,KAAKnnB,gBAAL,CACJ,KADI,EAEJ3R,sBAFI,EAGJ,KAAKoS,cAHD,EAIJtB,gBAJI,CAAN;;;WAOKgoB,GAAP;;;EAOFvwB,eAAe,CAAC0D,OAAD,EAAkC;UACzCxQ,IAAI,GAAG,KAAKkF,SAAL,EAAb;UACMjN,IAAI,GAAG,KAAK68B,mBAAL,CAAyB90B,IAAI,CAACmB,KAA9B,EAAqCqP,OAArC,CAAb;WAEO,KAAKyD,gBAAL,CAAsBjU,IAAtB,EAA4B/H,IAA5B,CAAP;;;EAGFgc,gBAAgB,CAACjU,IAAD,EAAqB/H,IAArB,EAAiD;IAC/D+H,IAAI,CAAC/H,IAAL,GAAYA,IAAZ;IACA+H,IAAI,CAACoB,GAAL,CAAS4xC,cAAT,GAA0B/6C,IAA1B;WAEO,KAAKkN,UAAL,CAAgBnF,IAAhB,EAAsB,YAAtB,CAAP;;;EAGF80B,mBAAmB,CAACzrB,GAAD,EAAcmH,OAAd,EAAyC;QACtDvY,IAAJ;;QAEI,KAAKwU,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;MACvBA,IAAI,GAAG,KAAKuM,KAAL,CAAW5D,KAAlB;KADF,MAEO,IAAI,KAAK4D,KAAL,CAAWvE,IAAX,CAAgBvI,OAApB,EAA6B;MAClCO,IAAI,GAAG,KAAKuM,KAAL,CAAWvE,IAAX,CAAgBvI,OAAvB;;UAQE,CAACO,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,UAA9B,MACC,KAAKuM,KAAL,CAAWsD,UAAX,KAA0B,KAAKtD,KAAL,CAAWwJ,YAAX,GAA0B,CAApD,IACC,KAAKnG,KAAL,CAAW+P,UAAX,CAAsB,KAAKpT,KAAL,CAAWwJ,YAAjC,QAFF,CADF,EAIE;aACKxJ,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;;KAbG,MAeA;YACC,KAAK4G,UAAL,EAAN;;;QAGE,CAACyC,OAAL,EAAc;WACPuJ,iBAAL,CACE9hB,IADF,EAEE,KAAKuM,KAAL,CAAWrD,KAFb,EAGE,CAAC,CAAC,KAAKqD,KAAL,CAAWvE,IAAX,CAAgBvI,OAHpB,EAIE,KAJF;;;SAQGiS,IAAL;WAEO1R,IAAP;;;EAGF8hB,iBAAiB,CACfxR,IADe,EAEf5D,QAFe,EAGfy5B,aAHe,EAIf34B,SAJe,EAKT;QACF,KAAK8B,KAAL,CAAWC,WAAX,IAA0Be,IAAI,KAAK,OAAvC,EAAgD;WACzCrG,KAAL,CACEyC,QADF,EAEE,sDAFF;;;QAME,KAAK4C,KAAL,CAAW2pB,OAAX,IAAsB3oB,IAAI,KAAK,OAAnC,EAA4C;WACrCrG,KAAL,CACEyC,QADF,EAEE,4DAFF;;;QAME,KAAKH,KAAL,CAAWohC,eAAX,IAA8Br9B,IAAI,KAAK,WAA3C,EAAwD;WACjDrG,KAAL,CACEyC,QADF,EAEE,uDAFF;;;QAKEy5B,aAAa,IAAIx1B,SAAS,CAACL,IAAD,CAA9B,EAAsC;WAC/BrG,KAAL,CAAWyC,QAAX,EAAsB,uBAAsB4D,IAAK,GAAjD;;;UAGI0qC,YAAY,GAAG,CAAC,KAAKzuC,KAAL,CAAWyD,MAAZ,GACjBK,cADiB,GAEjB7C,SAAS,GACTkD,wBADS,GAETF,oBAJJ;;QAMIwqC,YAAY,CAAC1qC,IAAD,EAAO,KAAKC,QAAZ,CAAhB,EAAuC;UACjC,CAAC,KAAKjB,KAAL,CAAW2pB,OAAZ,IAAuB3oB,IAAI,KAAK,OAApC,EAA6C;aACtCrG,KAAL,CACEyC,QADF,EAEE,uDAFF;;;WAKGzC,KAAL,CAAWyC,QAAX,EAAsB,6BAA4B4D,IAAK,GAAvD;;;;EAMJymC,UAAU,GAAsB;QAC1B,CAAC,KAAKxqC,KAAL,CAAW8hC,QAAhB,EAA0B;WACnB9hC,KAAL,CAAW8hC,QAAX,GAAsB,KAAK9hC,KAAL,CAAWrD,KAAjC;;;UAEInB,IAAI,GAAG,KAAKkF,SAAL,EAAb;SAEKyE,IAAL;;QAEI,KAAKnF,KAAL,CAAWihC,YAAf,EAA6B;WACtBvjC,KAAL,CACElC,IAAI,CAACmB,KADP,EAEE,mDAFF;;;QAKE,KAAKsL,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,CAAJ,EAAyB;WAClB8G,KAAL,CACElC,IAAI,CAACmB,KADP,EAEE,uFAFF;;;QAME,CAAC,KAAKqD,KAAL,CAAWwhC,SAAhB,EAA2B;MACzBhmC,IAAI,CAACoT,QAAL,GAAgB,KAAK6kB,eAAL,EAAhB;;;WAEK,KAAK9yB,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAKFiuC,UAAU,CAAC74B,IAAD,EAAqC;QACzC,CAAC,KAAK5Q,KAAL,CAAW6hC,QAAhB,EAA0B;WACnB7hC,KAAL,CAAW6hC,QAAX,GAAsB,KAAK7hC,KAAL,CAAWrD,KAAjC;;;UAEInB,IAAI,GAAG,KAAKkF,SAAL,EAAb;;QAEI,KAAKV,KAAL,CAAWihC,YAAf,EAA6B;WACtBvjC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,8CAAvB;;;SAGGwI,IAAL;;QAEE,KAAK8C,KAAL,CAAWhI,KAAE,CAACpL,IAAd,KACC,CAAC,KAAKoT,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,CAAD,IAAwB,CAAC,KAAKoJ,KAAL,CAAWvE,IAAX,CAAgBhJ,UAD1C,IAEA,KAAKkd,kBAAL,EAHF,EAIE;MACAnU,IAAI,CAACkzC,QAAL,GAAgB,KAAhB;MACAlzC,IAAI,CAACoT,QAAL,GAAgB,IAAhB;KANF,MAOO;MACLpT,IAAI,CAACkzC,QAAL,GAAgB,KAAK7mC,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAhB;MACA4E,IAAI,CAACoT,QAAL,GAAgB,KAAK8C,gBAAL,CAAsBd,IAAtB,CAAhB;;;WAEK,KAAKjQ,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAMFyuC,4BAA4B,CAAC11B,IAAD,EAAqBklB,YAArB,EAA2C;QACjE,KAAKjzB,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;UAChE+N,IAAI,CAAC9Y,IAAL,KAAc,oBAAlB,EAAwC;cAGhC,KAAKiC,KAAL,CACJ+7B,YADI,EAEH,mEAFG,CAAN;;;;;EAQN2Q,sBAAsB,CACpBuE,eADoB,EAEpBzuC,QAFoB,EAGpBC,QAHoB,EAIJ;UACVyuC,aAAa,GAAG,KAAKC,2BAAL,CAAiCF,eAAjC,CAAtB;SAEKG,iCAAL,CACEH,eADF,EAEEC,aAFF,EAGE1uC,QAHF;WAMO,KAAK6uC,6BAAL,CACLJ,eADK,EAELC,aAFK,EAGL1uC,QAHK,EAILC,QAJK,CAAP;;;EAQF2uC,iCAAiC,CAC/BH,eAD+B,EAE/BC,aAF+B,EAG/B1uC,QAH+B,EAIzB;QACF,KAAK+H,KAAL,CAAWhI,KAAE,CAAC9K,KAAd,CAAJ,EAA0B;YAGlB,KAAKuI,KAAL,CACJ,KAAKsC,KAAL,CAAWrD,KADP,EAEH,kGAFG,CAAN;KAHF,MAOO,IACLiyC,aAAa,KAAK,yBAAlB,IACAD,eAAe,CAAClzC,IAAhB,KAAyB,oBAFpB,EAGL;YACM,KAAKiC,KAAL,CACJwC,QADI,EAEH,gEAFG,CAAN;;;;EAOJ6uC,6BAA6B,CAC3BJ,eAD2B,EAE3BC,aAF2B,EAG3B1uC,QAH2B,EAI3BC,QAJ2B,EAKX;UACV8J,QAAQ,GAAG,KAAKvN,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAjB;;YACQyuC,aAAR;WACO,sBAAL;QACE3kC,QAAQ,CAAC+M,MAAT,GAAkB23B,eAAlB;;;WAEG,yBAAL;QACE1kC,QAAQ,CAAC+M,MAAT,GAAkB23B,eAAe,CAAC33B,MAAlC;;;WAEG,6BAAL;QACE/M,QAAQ,CAAC+M,MAAT,GAAkB23B,eAAe,CAAC//B,QAAlC;;;WAEG,yBAAL;YACM,CAAC,KAAKogC,0CAAL,EAAL,EAAwD;gBAChD,KAAKtxC,KAAL,CACJwC,QADI,EAEH,6DAFG,CAAN;;;QAKF+J,QAAQ,CAACpN,UAAT,GAAsB8xC,eAAtB;;;;cAGM,KAAKjxC,KAAL,CAAWwC,QAAX,EAAsB,0BAAyB0uC,aAAc,EAA7D,CAAN;;;WAEG,KAAKjuC,UAAL,CAAgBsJ,QAAhB,EAA0B2kC,aAA1B,CAAP;;;EAGFC,2BAA2B,CAAChyC,UAAD,EAA4C;YAC7DA,UAAU,CAACpB,IAAnB;;eAEW,KAAKwzC,iBAAL,CAAuBpyC,UAAvB,IACH,sBADG,GAEH,yBAFJ;;;;EAMNoyC,iBAAiB,CAACpyC,UAAD,EAAoC;YAC3CA,UAAU,CAACpB,IAAnB;WACO,kBAAL;eAEI,CAACoB,UAAU,CAACuB,QAAZ,IAAwB,KAAK6wC,iBAAL,CAAuBpyC,UAAU,CAACqsB,MAAlC,CAD1B;;WAGG,YAAL;eACS,IAAP;;;eAEO,KAAP;;;;EAUNihB,0BAA0B,CAAI+E,QAAJ,EAA0B;UAC5CC,sBAAsB,GAAG,KAAKnvC,KAAL,CAAWqhC,YAA1C;SACKrhC,KAAL,CAAWqhC,YAAX,GAA0B;MAExBC,wBAAwB,EAAE,CAFF;MAIxBC,aAAa,EAAE;KAJjB;;QAOI;aACK2N,QAAQ,EAAf;KADF,SAEU;WACHlvC,KAAL,CAAWqhC,YAAX,GAA0B8N,sBAA1B;;;;EAWJC,0BAA0B,CAAIF,QAAJ,EAA0B;UAC5CC,sBAAsB,GAAG,KAAKnvC,KAAL,CAAWqhC,YAA1C;SACKrhC,KAAL,CAAWqhC,YAAX,GAA0B;MAExBC,wBAAwB,EAAE,CAFF;MAIxBC,aAAa,EAAE;KAJjB;;QAOI;aACK2N,QAAQ,EAAf;KADF,SAEU;WACHlvC,KAAL,CAAWqhC,YAAX,GAA0B8N,sBAA1B;;;;EAIJ7E,8BAA8B,CAAI4E,QAAJ,EAA0B;UAChDG,0BAA0B,GAAG,KAAKrvC,KAAL,CAAWwhC,SAA9C;SACKxhC,KAAL,CAAWwhC,SAAX,GAAuB,IAAvB;;QAEI;aACK0N,QAAQ,EAAf;KADF,SAEU;WACHlvC,KAAL,CAAWwhC,SAAX,GAAuB6N,0BAAvB;;;;EAMJlD,sBAAsB,GAAS;SACxBnsC,KAAL,CAAWqhC,YAAX,CAAwBE,aAAxB,GAAwC,CAAxC;;;EAGF2K,mDAAmD,GAAY;WACtD,KAAKlsC,KAAL,CAAWqhC,YAAX,CAAwBC,wBAAxB,IAAoD,CAA3D;;;EAGF0N,0CAA0C,GAAY;WAElD,KAAKhvC,KAAL,CAAWqhC,YAAX,CAAwBE,aAAxB,IAAyC,IAAzC,IACA,KAAKvhC,KAAL,CAAWqhC,YAAX,CAAwBE,aAAxB,IAAyC,CAF3C;;;EAMFgJ,uBAAuB,CAACP,IAAD,EAAep5B,IAAf,EAA6C;UAC5D1Q,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;UACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;SAEKH,KAAL,CAAW+gC,gBAAX,GAA8B,KAAK/gC,KAAL,CAAWrD,KAAzC;UACM4uC,6BAA6B,GAAG,KAAKvrC,KAAL,CAAWyhC,0BAAjD;SACKzhC,KAAL,CAAWyhC,0BAAX,GAAwC,IAAxC;UAEMqK,GAAG,GAAG,KAAKtS,WAAL,CACV,KAAK/F,eAAL,EADU,EAEVvzB,QAFU,EAGVC,QAHU,EAIV6pC,IAJU,EAKVp5B,IALU,CAAZ;SAQK5Q,KAAL,CAAWyhC,0BAAX,GAAwC8J,6BAAxC;WAEOO,GAAP;;;;;AClzEJ,MAAMwD,SAAS,GAAG;EAAE5zC,IAAI,EAAE;CAA1B;MACE6zC,WAAW,GAAG;EAAE7zC,IAAI,EAAE;CADxB;AAGA,MAAM8zC,aAAa,GAAG,KAAtB;MACEC,cAAc,GAAG,KADnB;MAEEC,sBAAsB,GAAG,KAF3B;MAGEC,gBAAgB,GAAG,KAHrB;AAKA,AAAe,MAAMC,eAAN,SAA8BrG,gBAA9B,CAA+C;EAQ5DpxB,aAAa,CAACC,IAAD,EAAeC,OAAf,EAA2C;IACtDA,OAAO,CAAC0lB,UAAR,GAAqB,KAAKrqC,OAAL,CAAaqqC,UAAlC;IAEA1lB,OAAO,CAACw3B,WAAR,GAAsB,KAAKC,yBAAL,EAAtB;SAEK/wC,cAAL,CAAoBsZ,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyCpY,KAAE,CAAC9L,GAA5C;;QAGE,KAAK6P,QAAL,IACA,CAAC,KAAKtQ,OAAL,CAAa4qC,sBADd,IAEA,KAAKv7B,KAAL,CAAWwpB,gBAAX,CAA4BoY,IAA5B,GAAmC,CAHrC,EAIE;qCACqB7H,KAAK,CAACiT,IAAN,CAAW,KAAKhtC,KAAL,CAAWwpB,gBAAtB,CADrB,iCAC8D;cAAnD,CAAC94B,IAAD,mBAAN;cACGoR,GAAG,GAAG,KAAK9B,KAAL,CAAWwpB,gBAAX,CAA4B+S,GAA5B,CAAgC7rC,IAAhC,CAAZ;aAEKiK,KAAL,CAAWmH,GAAX,EAAiB,WAAUpR,IAAK,kBAAhC;;;;IAIJ2kB,IAAI,CAACC,OAAL,GAAe,KAAK1X,UAAL,CAAgB0X,OAAhB,EAAyB,SAAzB,CAAf;IACAD,IAAI,CAAC2pB,QAAL,GAAgB,KAAK/hC,KAAL,CAAW+hC,QAA3B;QAEI,KAAKruC,OAAL,CAAa+qC,MAAjB,EAAyBrmB,IAAI,CAACqmB,MAAL,GAAc,KAAKz+B,KAAL,CAAWy+B,MAAzB;WAElB,KAAK99B,UAAL,CAAgByX,IAAhB,EAAsB,MAAtB,CAAP;;;EAKFtZ,eAAe,CAACrC,IAAD,EAAiC;UACxCmB,IAAI,GAAGnB,IAAI,CAACI,UAAlB;UAEML,gBAAgB,GAAG,KAAKE,WAAL,CAAiBkB,IAAI,CAACjB,KAAtB,EAA6BiB,IAAI,CAAChB,GAAL,CAASD,KAAtC,CAAzB;UACMJ,SAAS,GAAG,KAAKG,WAAL,CAAiBD,IAAI,CAACE,KAAtB,EAA6BF,IAAI,CAACG,GAAL,CAASD,KAAtC,CAAlB;UAEMG,GAAG,GAAG,KAAKuG,KAAL,CAAWnG,KAAX,CAAiBU,IAAI,CAACjB,KAAtB,EAA6BiB,IAAI,CAACX,GAAlC,CAAZ;UACMyJ,GAAG,GAAIlK,gBAAgB,CAACJ,KAAjB,GAAyBU,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAtC;SAEKsqC,QAAL,CAAchrC,gBAAd,EAAgC,KAAhC,EAAuCM,GAAvC;SACK0qC,QAAL,CAAchrC,gBAAd,EAAgC,UAAhC,EAA4CkK,GAA5C;IAEAnK,SAAS,CAACH,KAAV,GAAkB,KAAKY,YAAL,CAChBR,gBADgB,EAEhB,kBAFgB,EAGhBoB,IAAI,CAACX,GAHW,EAIhBW,IAAI,CAAChB,GAAL,CAASK,GAJO,CAAlB;WAOO,KAAKD,YAAL,CAAkBT,SAAlB,EAA6B,WAA7B,EAA0CE,IAAI,CAACQ,GAA/C,EAAoDR,IAAI,CAACG,GAAL,CAASK,GAA7D,CAAP;;;EAGF6yC,yBAAyB,GAAkC;QACrD,CAAC,KAAK7nC,KAAL,CAAWhI,KAAE,CAACvK,oBAAd,CAAL,EAA0C;aACjC,IAAP;;;UAGI8F,IAAI,GAAG,KAAKkF,SAAL,EAAb;IACAlF,IAAI,CAACY,KAAL,GAAa,KAAK4D,KAAL,CAAW5D,KAAxB;SACK+I,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;EAGF+O,KAAK,CAAC/H,OAAD,EAA4B;QAC3B,CAAC,KAAKkH,YAAL,CAAkB,KAAlB,CAAL,EAA+B;aACtB,KAAP;;;IAEFjI,cAAc,CAACy9B,SAAf,GAA2B,KAAKl/B,KAAL,CAAW6E,GAAtC;UACMmrC,IAAI,GAAGvuC,cAAc,CAACqF,IAAf,CAAoB,KAAKzD,KAAzB,CAAb;UAEM8B,IAAI,GAAG,KAAKnF,KAAL,CAAW6E,GAAX,GAAiBmrC,IAAI,CAAC,CAAD,CAAJ,CAAQvyC,MAAtC;UACMwyC,MAAM,GAAG,KAAK5sC,KAAL,CAAW+P,UAAX,CAAsBjO,IAAtB,CAAf;QAKI8qC,MAAM,OAAV,EAA4C,OAAO,IAAP;QACxCztC,OAAJ,EAAa,OAAO,KAAP;QAETytC,MAAM,QAAV,EAAyC,OAAO,IAAP;;QAErClrC,iBAAiB,CAACkrC,MAAD,CAArB,EAA+B;UACzBprC,GAAG,GAAGM,IAAI,GAAG,CAAjB;;aACOC,gBAAgB,CAAC,KAAK/B,KAAL,CAAW+P,UAAX,CAAsBvO,GAAtB,CAAD,CAAvB,EAAqD;UACjDA,GAAF;;;YAEI8H,KAAK,GAAG,KAAKtJ,KAAL,CAAWnG,KAAX,CAAiBiI,IAAjB,EAAuBN,GAAvB,CAAd;UACI,CAACR,yBAAyB,CAACjB,IAA1B,CAA+BuJ,KAA/B,CAAL,EAA4C,OAAO,IAAP;;;WAEvC,KAAP;;;EAUF4D,cAAc,CAAC/N,OAAD,EAAmBvD,QAAnB,EAAoD;QAC5D,KAAKgJ,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAJ,EAAuB;WAChBw2C,eAAL,CAAqB,IAArB;;;WAEK,KAAKhS,qBAAL,CAA2Bx3B,OAA3B,EAAoCvD,QAApC,CAAP;;;EAGF+6B,qBAAqB,CAACx3B,OAAD,EAAmBvD,QAAnB,EAAoD;QACnE04B,SAAS,GAAG,KAAK33B,KAAL,CAAWvE,IAA3B;UACMD,IAAI,GAAG,KAAKkF,SAAL,EAAb;QACIhF,IAAJ;;QAEI,KAAK6O,KAAL,CAAW/H,OAAX,CAAJ,EAAyB;MACvBm1B,SAAS,GAAG13B,KAAE,CAAClI,IAAf;MACA2D,IAAI,GAAG,KAAP;;;YAOMi8B,SAAR;WACO13B,KAAE,CAAClJ,MAAR;WACKkJ,KAAE,CAAC/I,SAAR;eAES,KAAKg5C,2BAAL,CAAiC10C,IAAjC,EAAuCm8B,SAAS,CAACzkC,OAAjD,CAAP;;WACG+M,KAAE,CAAC9I,SAAR;eACS,KAAKg5C,sBAAL,CAA4B30C,IAA5B,CAAP;;WACGyE,KAAE,CAAC5I,GAAR;eACS,KAAK+4C,gBAAL,CAAsB50C,IAAtB,CAAP;;WACGyE,KAAE,CAACzI,IAAR;eACS,KAAK64C,iBAAL,CAAuB70C,IAAvB,CAAP;;WACGyE,KAAE,CAACxI,SAAR;YACM,KAAKiW,SAAL,GAAiBjS,IAAjB,KAA0BwE,KAAE,CAACjL,GAAjC,EAAsC;;YAClCwN,OAAJ,EAAa;cACP,KAAKxC,KAAL,CAAWyD,MAAf,EAAuB;iBAChB/F,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,oFAFF;WADF,MAKO,IAAI6F,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,OAApC,EAA6C;iBAC7C9E,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,2EACE,mDAHJ;;;;eAOG,KAAKi7B,sBAAL,CAA4Bp8B,IAA5B,EAAkC,KAAlC,EAAyC,CAACgH,OAA1C,CAAP;;WAEGvC,KAAE,CAAC3H,MAAR;YACMkK,OAAJ,EAAa,KAAK+G,UAAL;eACN,KAAKsuB,UAAL,CAAgBr8B,IAAhB,EAAsB,IAAtB,CAAP;;WAEGyE,KAAE,CAACvI,GAAR;eACS,KAAK44C,gBAAL,CAAsB90C,IAAtB,CAAP;;WACGyE,KAAE,CAACtI,OAAR;eACS,KAAK44C,oBAAL,CAA0B/0C,IAA1B,CAAP;;WACGyE,KAAE,CAACrI,OAAR;eACS,KAAK44C,oBAAL,CAA0Bh1C,IAA1B,CAAP;;WACGyE,KAAE,CAACpI,MAAR;eACS,KAAK44C,mBAAL,CAAyBj1C,IAAzB,CAAP;;WACGyE,KAAE,CAACnI,IAAR;eACS,KAAK44C,iBAAL,CAAuBl1C,IAAvB,CAAP;;WAEGyE,KAAE,CAACjI,MAAR;WACKiI,KAAE,CAAClI,IAAR;QACE2D,IAAI,GAAGA,IAAI,IAAI,KAAKsE,KAAL,CAAW5D,KAA1B;;YACIoG,OAAO,IAAI9G,IAAI,KAAK,KAAxB,EAA+B;eACxB6N,UAAL,CACE,KAAKvJ,KAAL,CAAWrD,KADb,EAEE,iEAFF;;;eAKK,KAAKm7B,iBAAL,CAAuBt8B,IAAvB,EAA6BE,IAA7B,CAAP;;WAEGuE,KAAE,CAAChI,MAAR;eACS,KAAK04C,mBAAL,CAAyBn1C,IAAzB,CAAP;;WACGyE,KAAE,CAAC/H,KAAR;eACS,KAAK04C,kBAAL,CAAwBp1C,IAAxB,CAAP;;WACGyE,KAAE,CAAC3L,MAAR;eACS,KAAKynC,UAAL,EAAP;;WACG97B,KAAE,CAACpL,IAAR;eACS,KAAKg8C,mBAAL,CAAyBr1C,IAAzB,CAAP;;WACGyE,KAAE,CAACzH,OAAR;WACKyH,KAAE,CAACxH,OAAR;;gBACQwf,SAAS,GAAG,KAAKvK,SAAL,EAAlB;;cACIuK,SAAS,CAACxc,IAAV,KAAmBwE,KAAE,CAACvL,MAAtB,IAAgCujB,SAAS,CAACxc,IAAV,KAAmBwE,KAAE,CAACjL,GAA1D,EAA+D;;;;cAI3D,CAAC,KAAKtB,OAAL,CAAa0qC,2BAAd,IAA6C,CAACn/B,QAAlD,EAA4D;iBACrDvB,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,wDAFF;;;eAMGwI,IAAL;cAEI+M,MAAJ;;cACIylB,SAAS,KAAK13B,KAAE,CAACxH,OAArB,EAA8B;YAC5ByZ,MAAM,GAAG,KAAKhI,WAAL,CAAiB1O,IAAjB,CAAT;;gBAGE0W,MAAM,CAACzW,IAAP,KAAgB,mBAAhB,KACC,CAACyW,MAAM,CAACxM,UAAR,IAAsBwM,MAAM,CAACxM,UAAP,KAAsB,OAD7C,CADF,EAGE;mBACK25B,iBAAL,GAAyB,IAAzB;;WAPJ,MASO;YACLntB,MAAM,GAAG,KAAKzH,WAAL,CAAiBjP,IAAjB,CAAT;;gBAGG0W,MAAM,CAACzW,IAAP,KAAgB,wBAAhB,KACE,CAACyW,MAAM,CAACxH,UAAR,IAAsBwH,MAAM,CAACxH,UAAP,KAAsB,OAD9C,CAAD,IAECwH,MAAM,CAACzW,IAAP,KAAgB,sBAAhB,KACE,CAACyW,MAAM,CAACxH,UAAR,IAAsBwH,MAAM,CAACxH,UAAP,KAAsB,OAD9C,CAFD,IAIAwH,MAAM,CAACzW,IAAP,KAAgB,0BALlB,EAME;mBACK4jC,iBAAL,GAAyB,IAAzB;;;;eAIChtB,uBAAL,CAA6B7W,IAA7B;iBAEO0W,MAAP;;;;;cAII,KAAK4+B,eAAL,EAAJ,EAA4B;gBACtBtuC,OAAJ,EAAa;mBACN+G,UAAL,CACE,IADF,EAEE,yEAFF;;;iBAKGpE,IAAL;mBACO,KAAKyyB,sBAAL,CAA4Bp8B,IAA5B,EAAkC,IAAlC,EAAwC,CAACgH,OAAzC,CAAP;;;;;UAUAuuC,SAAS,GAAG,KAAK/wC,KAAL,CAAW5D,KAA7B;UACMwB,IAAI,GAAG,KAAKkK,eAAL,EAAb;;QAGE6vB,SAAS,KAAK13B,KAAE,CAACxM,IAAjB,IACAmK,IAAI,CAACnC,IAAL,KAAc,YADd,IAEA,KAAKoM,GAAL,CAAS5H,KAAE,CAACnL,KAAZ,CAHF,EAIE;aACO,KAAKk8C,qBAAL,CAA2Bx1C,IAA3B,EAAiCu1C,SAAjC,EAA4CnzC,IAA5C,EAAkD4E,OAAlD,CAAP;KALF,MAMO;aACE,KAAKgO,wBAAL,CAA8BhV,IAA9B,EAAoCoC,IAApC,CAAP;;;;EAIJyU,uBAAuB,CAAC7W,IAAD,EAAqB;QACtC,CAAC,KAAK9H,OAAL,CAAa0qC,2BAAd,IAA6C,CAAC,KAAKp6B,QAAvD,EAAiE;WAC1DtG,KAAL,CACElC,IAAI,CAACmB,KADP,EAEG,mEAFH,EAGE;QACE6E,IAAI,EAAE;OAJV;;;;EAUJy6B,cAAc,CAACzgC,IAAD,EAA8B;UACpCk9B,UAAU,GAAG,KAAK14B,KAAL,CAAW4hC,cAAX,CACjB,KAAK5hC,KAAL,CAAW4hC,cAAX,CAA0BnkC,MAA1B,GAAmC,CADlB,CAAnB;;QAGIi7B,UAAU,CAACj7B,MAAf,EAAuB;MACrBjC,IAAI,CAACk9B,UAAL,GAAkBA,UAAlB;WACKriB,0BAAL,CAAgC7a,IAAhC,EAAsCk9B,UAAU,CAAC,CAAD,CAAhD;WACK14B,KAAL,CAAW4hC,cAAX,CAA0B,KAAK5hC,KAAL,CAAW4hC,cAAX,CAA0BnkC,MAA1B,GAAmC,CAA7D,IAAkE,EAAlE;;;;EAIJ09B,uBAAuB,GAAY;WAC1B,KAAKlzB,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAAP;;;EAGF0zC,eAAe,CAACiF,WAAD,EAA8B;UACrCC,wBAAwB,GAAG,KAAKlxC,KAAL,CAAW4hC,cAAX,CAC/B,KAAK5hC,KAAL,CAAW4hC,cAAX,CAA0BnkC,MAA1B,GAAmC,CADJ,CAAjC;;WAGO,KAAKwK,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAP,EAA0B;YAClB27C,SAAS,GAAG,KAAKhI,cAAL,EAAlB;MACA+H,wBAAwB,CAACrxC,IAAzB,CAA8BsxC,SAA9B;;;QAGE,KAAKlpC,KAAL,CAAWhI,KAAE,CAACzH,OAAd,CAAJ,EAA4B;UACtB,CAACy4C,WAAL,EAAkB;aACX1nC,UAAL;;;UAIA,KAAKyM,SAAL,CAAe,YAAf,KACA,CAAC,KAAKxP,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAFH,EAGE;aACK9I,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,8EACE,yCAHJ;;KATJ,MAeO,IAAI,CAAC,KAAKw+B,uBAAL,EAAL,EAAqC;WACrCz9B,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,4DAFF;;;;EAOJwsC,cAAc,GAAgB;SACvBtB,eAAL,CAAqB,CAAC,mBAAD,EAAsB,YAAtB,CAArB;UAEMrsC,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACKyE,IAAL;;QAEI,KAAK6Q,SAAL,CAAe,YAAf,CAAJ,EAAkC;WAG3BhW,KAAL,CAAW4hC,cAAX,CAA0B/hC,IAA1B,CAA+B,EAA/B;YAEMK,QAAQ,GAAG,KAAKF,KAAL,CAAWrD,KAA5B;YACMwD,QAAQ,GAAG,KAAKH,KAAL,CAAWG,QAA5B;UACIvC,IAAJ;;UAEI,KAAKiK,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAJ,EAAyB;QACvBkJ,IAAI,GAAG,KAAKkK,eAAL,EAAP;aACKV,MAAL,CAAYnH,KAAE,CAACtL,MAAf;OAFF,MAGO;QACLiJ,IAAI,GAAG,KAAK0K,eAAL,CAAqB,KAArB,CAAP;;eAEO,KAAKT,GAAL,CAAS5H,KAAE,CAACjL,GAAZ,CAAP,EAAyB;gBACjBwG,IAAI,GAAG,KAAKkB,WAAL,CAAiBwD,QAAjB,EAA2BC,QAA3B,CAAb;UACA3E,IAAI,CAAC0tB,MAAL,GAActrB,IAAd;UACApC,IAAI,CAACsT,QAAL,GAAgB,KAAKxG,eAAL,CAAqB,IAArB,CAAhB;UACA9M,IAAI,CAAC4C,QAAL,GAAgB,KAAhB;UACAR,IAAI,GAAG,KAAK+C,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;;MAIJA,IAAI,CAACqB,UAAL,GAAkB,KAAKm+B,4BAAL,CAAkCp9B,IAAlC,CAAlB;WACKoC,KAAL,CAAW4hC,cAAX,CAA0Bj/B,GAA1B;KAzBF,MA0BO;MACLnH,IAAI,CAACqB,UAAL,GAAkB,KAAK4tC,mBAAL,EAAlB;;;WAEK,KAAK9pC,UAAL,CAAgBnF,IAAhB,EAAsB,WAAtB,CAAP;;;EAGFw/B,4BAA4B,CAACp9B,IAAD,EAAmC;QACzD,KAAKiK,GAAL,CAAS5H,KAAE,CAACvL,MAAZ,CAAJ,EAAyB;YACjB8G,IAAI,GAAG,KAAKm0B,eAAL,CAAqB/xB,IAArB,CAAb;MACApC,IAAI,CAACwb,MAAL,GAAcpZ,IAAd;MACApC,IAAI,CAACqX,SAAL,GAAiB,KAAKoE,4BAAL,CAAkChX,KAAE,CAACtL,MAArC,EAA6C,KAA7C,CAAjB;WACK6e,gBAAL,CAAsBhY,IAAI,CAACqX,SAA3B;aACO,KAAKlS,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;WAGKoC,IAAP;;;EAGFsyC,2BAA2B,CACzB10C,IADyB,EAEzBtI,OAFyB,EAGe;UAClCk+C,OAAO,GAAGl+C,OAAO,KAAK,OAA5B;SACKiS,IAAL;;QAEI,KAAKuyB,gBAAL,EAAJ,EAA6B;MAC3Bl8B,IAAI,CAACxI,KAAL,GAAa,IAAb;KADF,MAEO;MACLwI,IAAI,CAACxI,KAAL,GAAa,KAAKsV,eAAL,EAAb;WACKW,SAAL;;;SAGG6yB,mBAAL,CAAyBtgC,IAAzB,EAA+BtI,OAA/B;WAEO,KAAKyN,UAAL,CACLnF,IADK,EAEL41C,OAAO,GAAG,gBAAH,GAAsB,mBAFxB,CAAP;;;EAMFtV,mBAAmB,CACjBtgC,IADiB,EAEjBtI,OAFiB,EAGjB;UACMk+C,OAAO,GAAGl+C,OAAO,KAAK,OAA5B;QACI4R,CAAJ;;SACKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAK9E,KAAL,CAAW2hC,MAAX,CAAkBlkC,MAAlC,EAA0C,EAAEqH,CAA5C,EAA+C;YACvCusC,GAAG,GAAG,KAAKrxC,KAAL,CAAW2hC,MAAX,CAAkB78B,CAAlB,CAAZ;;UACItJ,IAAI,CAACxI,KAAL,IAAc,IAAd,IAAsBq+C,GAAG,CAAC59C,IAAJ,KAAa+H,IAAI,CAACxI,KAAL,CAAWS,IAAlD,EAAwD;YAClD49C,GAAG,CAAC31C,IAAJ,IAAY,IAAZ,KAAqB01C,OAAO,IAAIC,GAAG,CAAC31C,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;YACtDF,IAAI,CAACxI,KAAL,IAAco+C,OAAlB,EAA2B;;;;QAG3BtsC,CAAC,KAAK,KAAK9E,KAAL,CAAW2hC,MAAX,CAAkBlkC,MAA5B,EAAoC;WAC7BC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,iBAAiBzJ,OAAxC;;;;EAIJi9C,sBAAsB,CAAC30C,IAAD,EAAiD;SAChE2J,IAAL;SACK8D,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGF81C,qBAAqB,GAAiB;SAC/BlqC,MAAL,CAAYnH,KAAE,CAACvL,MAAf;UACMgS,GAAG,GAAG,KAAKoB,eAAL,EAAZ;SACKV,MAAL,CAAYnH,KAAE,CAACtL,MAAf;WACO+R,GAAP;;;EAGF0pC,gBAAgB,CAAC50C,IAAD,EAA+C;SACxD2J,IAAL;SACKnF,KAAL,CAAW2hC,MAAX,CAAkB9hC,IAAlB,CAAuByvC,SAAvB;IAEA9zC,IAAI,CAACmD,IAAL,GAIE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAK7+B,cAAL,CAAoB,IAApB,CAFF,CAJF;SASKvQ,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;SAEKyE,MAAL,CAAYnH,KAAE,CAAChI,MAAf;IACAuD,IAAI,CAAC4H,IAAL,GAAY,KAAKkuC,qBAAL,EAAZ;SACKzpC,GAAL,CAAS5H,KAAE,CAACpL,IAAZ;WACO,KAAK8L,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;EAWF60C,iBAAiB,CAAC70C,IAAD,EAA0B;SACpC2J,IAAL;SACKnF,KAAL,CAAW2hC,MAAX,CAAkB9hC,IAAlB,CAAuByvC,SAAvB;QAEIiC,OAAO,GAAG,CAAC,CAAf;;QAEE,CAAC,KAAKxuC,KAAL,CAAW2pB,OAAX,IACE,CAAC,KAAK3pB,KAAL,CAAWypB,UAAZ,IAA0B,KAAK94B,OAAL,CAAawqC,yBAD1C,KAEA,KAAK70B,aAAL,CAAmB,OAAnB,CAHF,EAIE;MACAkoC,OAAO,GAAG,KAAKvxC,KAAL,CAAWwJ,YAArB;;;SAEGzG,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;SACKkO,MAAL,CAAYnH,KAAE,CAACvL,MAAf;;QAEI,KAAKuT,KAAL,CAAWhI,KAAE,CAACpL,IAAd,CAAJ,EAAyB;UACnB08C,OAAO,GAAG,CAAC,CAAf,EAAkB;aACXhoC,UAAL,CAAgBgoC,OAAhB;;;aAEK,KAAKC,QAAL,CAAch2C,IAAd,EAAoB,IAApB,CAAP;;;UAGI+O,KAAK,GAAG,KAAKA,KAAL,EAAd;;QACI,KAAKtC,KAAL,CAAWhI,KAAE,CAAClI,IAAd,KAAuB,KAAKkQ,KAAL,CAAWhI,KAAE,CAACjI,MAAd,CAAvB,IAAgDuS,KAApD,EAA2D;YACnD63B,IAAI,GAAG,KAAK1hC,SAAL,EAAb;YACMhF,IAAI,GAAG6O,KAAK,GAAG,KAAH,GAAW,KAAKvK,KAAL,CAAW5D,KAAxC;WACK+I,IAAL;WACKssC,QAAL,CAAcrP,IAAd,EAAoB,IAApB,EAA0B1mC,IAA1B;WACKiF,UAAL,CAAgByhC,IAAhB,EAAsB,qBAAtB;;UAGE,CAAC,KAAKn6B,KAAL,CAAWhI,KAAE,CAACpH,GAAd,KAAsB,KAAK6Q,YAAL,CAAkB,IAAlB,CAAvB,KACA04B,IAAI,CAACsP,YAAL,CAAkBj0C,MAAlB,KAA6B,CAF/B,EAGE;eACO,KAAKk0C,UAAL,CAAgBn2C,IAAhB,EAAsB4mC,IAAtB,EAA4BmP,OAA5B,CAAP;;;UAEEA,OAAO,GAAG,CAAC,CAAf,EAAkB;aACXhoC,UAAL,CAAgBgoC,OAAhB;;;aAEK,KAAKC,QAAL,CAAch2C,IAAd,EAAoB4mC,IAApB,CAAP;;;UAGIriC,sBAAsB,GAAG;MAAEpD,KAAK,EAAE;KAAxC;UACMylC,IAAI,GAAG,KAAKt6B,eAAL,CAAqB,IAArB,EAA2B/H,sBAA3B,CAAb;;QACI,KAAKkI,KAAL,CAAWhI,KAAE,CAACpH,GAAd,KAAsB,KAAK6Q,YAAL,CAAkB,IAAlB,CAA1B,EAAmD;YAC3CkoC,WAAW,GAAG,KAAKloC,YAAL,CAAkB,IAAlB,IAChB,kBADgB,GAEhB,kBAFJ;WAGK1I,YAAL,CAAkBohC,IAAlB,EAAwB97B,SAAxB,EAAmCsrC,WAAnC;WACKj0C,SAAL,CAAeykC,IAAf,EAAqB97B,SAArB,EAAgCA,SAAhC,EAA2CsrC,WAA3C;aACO,KAAKD,UAAL,CAAgBn2C,IAAhB,EAAsB4mC,IAAtB,EAA4BmP,OAA5B,CAAP;KANF,MAOO,IAAIxxC,sBAAsB,CAACpD,KAA3B,EAAkC;WAClC4M,UAAL,CAAgBxJ,sBAAsB,CAACpD,KAAvC;;;QAEE40C,OAAO,GAAG,CAAC,CAAf,EAAkB;WACXhoC,UAAL,CAAgBgoC,OAAhB;;;WAEK,KAAKC,QAAL,CAAch2C,IAAd,EAAoB4mC,IAApB,CAAP;;;EAGFxK,sBAAsB,CACpBp8B,IADoB,EAEpB1B,OAFoB,EAGpB+3C,mBAHoB,EAIG;SAClB1sC,IAAL;WACO,KAAKumC,aAAL,CACLlwC,IADK,EAELi0C,cAAc,IAAIoC,mBAAmB,GAAG,CAAH,GAAOnC,sBAA9B,CAFT,EAGL51C,OAHK,CAAP;;;EAOFw2C,gBAAgB,CAAC90C,IAAD,EAAqC;SAC9C2J,IAAL;IACA3J,IAAI,CAAC4H,IAAL,GAAY,KAAKkuC,qBAAL,EAAZ;IACA91C,IAAI,CAAC2V,UAAL,GAAkB,KAAKZ,cAAL,CAAoB,IAApB,CAAlB;IACA/U,IAAI,CAACiW,SAAL,GAAiB,KAAK5J,GAAL,CAAS5H,KAAE,CAAC3I,KAAZ,IAAqB,KAAKiZ,cAAL,CAAoB,IAApB,CAArB,GAAiD,IAAlE;WACO,KAAK5P,UAAL,CAAgBnF,IAAhB,EAAsB,aAAtB,CAAP;;;EAGF+0C,oBAAoB,CAAC/0C,IAAD,EAA6C;QAC3D,CAAC,KAAKuH,KAAL,CAAWypB,UAAZ,IAA0B,CAAC,KAAK94B,OAAL,CAAayqC,0BAA5C,EAAwE;WACjEzgC,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,8BAA7B;;;SAGGwI,IAAL;;QAMI,KAAKuyB,gBAAL,EAAJ,EAA6B;MAC3Bl8B,IAAI,CAACoT,QAAL,GAAgB,IAAhB;KADF,MAEO;MACLpT,IAAI,CAACoT,QAAL,GAAgB,KAAK9G,eAAL,EAAhB;WACKmB,SAAL;;;WAGK,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFg1C,oBAAoB,CAACh1C,IAAD,EAA6C;SAC1D2J,IAAL;IACA3J,IAAI,CAACs2C,YAAL,GAAoB,KAAKR,qBAAL,EAApB;UACMS,KAAK,GAAIv2C,IAAI,CAACu2C,KAAL,GAAa,EAA5B;SACK3qC,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;SACK0L,KAAL,CAAW2hC,MAAX,CAAkB9hC,IAAlB,CAAuB0vC,WAAvB;SACKxsC,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;QAMI84C,GAAJ;;SACK,IAAIC,UAAT,EAAqB,CAAC,KAAKhqC,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAtB,GAA+C;UACzC,KAAKyT,KAAL,CAAWhI,KAAE,CAACjJ,KAAd,KAAwB,KAAKiR,KAAL,CAAWhI,KAAE,CAAC7I,QAAd,CAA5B,EAAqD;cAC7C86C,MAAM,GAAG,KAAKjqC,KAAL,CAAWhI,KAAE,CAACjJ,KAAd,CAAf;YACIg7C,GAAJ,EAAS,KAAKrxC,UAAL,CAAgBqxC,GAAhB,EAAqB,YAArB;QACTD,KAAK,CAAClyC,IAAN,CAAYmyC,GAAG,GAAG,KAAKtxC,SAAL,EAAlB;QACAsxC,GAAG,CAAC7gC,UAAJ,GAAiB,EAAjB;aACKhM,IAAL;;YACI+sC,MAAJ,EAAY;UACVF,GAAG,CAAC5uC,IAAJ,GAAW,KAAK0E,eAAL,EAAX;SADF,MAEO;cACDmqC,UAAJ,EAAgB;iBACTv0C,KAAL,CAAW,KAAKsC,KAAL,CAAWwJ,YAAtB,EAAoC,0BAApC;;;UAEFyoC,UAAU,GAAG,IAAb;UACAD,GAAG,CAAC5uC,IAAJ,GAAW,IAAX;;;aAEGgE,MAAL,CAAYnH,KAAE,CAACnL,KAAf;OAfF,MAgBO;YACDk9C,GAAJ,EAAS;UACPA,GAAG,CAAC7gC,UAAJ,CAAetR,IAAf,CAAoB,KAAK0Q,cAAL,CAAoB,IAApB,CAApB;SADF,MAEO;eACAhH,UAAL;;;;;SAIDxG,KAAL,CAAWoH,IAAX;QACI6nC,GAAJ,EAAS,KAAKrxC,UAAL,CAAgBqxC,GAAhB,EAAqB,YAArB;SACJ7sC,IAAL;SACKnF,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;WACO,KAAKhC,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAP;;;EAGFi1C,mBAAmB,CAACj1C,IAAD,EAA2C;SACvD2J,IAAL;;QAEE/D,SAAS,CAACgC,IAAV,CAAe,KAAKC,KAAL,CAAWnG,KAAX,CAAiB,KAAK8C,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWrD,KAAnD,CAAf,CADF,EAEE;WACKe,KAAL,CAAW,KAAKsC,KAAL,CAAWsD,UAAtB,EAAkC,6BAAlC;;;IAEF9H,IAAI,CAACoT,QAAL,GAAgB,KAAK9G,eAAL,EAAhB;SACKmB,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFk1C,iBAAiB,CAACl1C,IAAD,EAAuC;SACjD2J,IAAL;IAEA3J,IAAI,CAACkoC,KAAL,GAAa,KAAK3H,UAAL,EAAb;IACAvgC,IAAI,CAAC22C,OAAL,GAAe,IAAf;;QAEI,KAAKlqC,KAAL,CAAWhI,KAAE,CAAChJ,MAAd,CAAJ,EAA2B;YACnBm7C,MAAM,GAAG,KAAK1xC,SAAL,EAAf;WACKyE,IAAL;;UACI,KAAK8C,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAJ,EAA2B;aACpB0S,MAAL,CAAYnH,KAAE,CAACvL,MAAf;QACA09C,MAAM,CAACriC,KAAP,GAAe,KAAKgrB,gBAAL,EAAf;cACMsX,MAAM,GAAGD,MAAM,CAACriC,KAAP,CAAatU,IAAb,KAAsB,YAArC;aACKsH,KAAL,CAAWiH,KAAX,CAAiBqoC,MAAM,GAAG74C,kBAAH,GAAwB,CAA/C;aACKmE,SAAL,CAAey0C,MAAM,CAACriC,KAAtB,EAA6BnV,YAA7B,EAA2C,IAA3C,EAAiD,cAAjD;aACKwM,MAAL,CAAYnH,KAAE,CAACtL,MAAf;OANF,MAOO;QACLy9C,MAAM,CAACriC,KAAP,GAAe,IAAf;aACKhN,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;;;MAGFk5C,MAAM,CAACzzC,IAAP,GAKE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAKrT,UAAL,CAAgB,KAAhB,EAAuB,KAAvB,CAFF,CALF;WASKh5B,KAAL,CAAWoH,IAAX;MAEA3O,IAAI,CAAC22C,OAAL,GAAe,KAAKxxC,UAAL,CAAgByxC,MAAhB,EAAwB,aAAxB,CAAf;;;IAGF52C,IAAI,CAAC82C,SAAL,GAAiB,KAAKzqC,GAAL,CAAS5H,KAAE,CAAC1I,QAAZ,IAAwB,KAAKwkC,UAAL,EAAxB,GAA4C,IAA7D;;QAEI,CAACvgC,IAAI,CAAC22C,OAAN,IAAiB,CAAC32C,IAAI,CAAC82C,SAA3B,EAAsC;WAC/B50C,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,iCAAvB;;;WAGK,KAAKgE,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAGFs8B,iBAAiB,CACft8B,IADe,EAEfE,IAFe,EAGQ;SAClByJ,IAAL;SACKssC,QAAL,CAAcj2C,IAAd,EAAoB,KAApB,EAA2BE,IAA3B;SACKuN,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAGFm1C,mBAAmB,CAACn1C,IAAD,EAA2C;SACvD2J,IAAL;IACA3J,IAAI,CAAC4H,IAAL,GAAY,KAAKkuC,qBAAL,EAAZ;SACKtxC,KAAL,CAAW2hC,MAAX,CAAkB9hC,IAAlB,CAAuByvC,SAAvB;IAEA9zC,IAAI,CAACmD,IAAL,GAIE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAK7+B,cAAL,CAAoB,OAApB,CAFF,CAJF;SASKvQ,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;WAEO,KAAKhC,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFo1C,kBAAkB,CAACp1C,IAAD,EAAyC;QACrD,KAAKwE,KAAL,CAAWyD,MAAf,EAAuB;WAChB/F,KAAL,CAAW,KAAKsC,KAAL,CAAWrD,KAAtB,EAA6B,uBAA7B;;;SAEGwI,IAAL;IACA3J,IAAI,CAAC0tB,MAAL,GAAc,KAAKooB,qBAAL,EAAd;IAEA91C,IAAI,CAACmD,IAAL,GAKE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAK7+B,cAAL,CAAoB,MAApB,CAFF,CALF;WAUO,KAAK5P,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFq1C,mBAAmB,CAACr1C,IAAD,EAA2C;SACvD2J,IAAL;WACO,KAAKxE,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFw1C,qBAAqB,CACnBx1C,IADmB,EAEnBu1C,SAFmB,EAGnBnzC,IAHmB,EAInB4E,OAJmB,EAKC;2CACA,KAAKxC,KAAL,CAAW2hC,MADX,0CACmB;YAA5B3uC,KAAK,0BAAX;;UACCA,KAAK,CAACS,IAAN,KAAes9C,SAAnB,EAA8B;aACvBrzC,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAwB,UAASo0C,SAAU,uBAA3C;;;;UAIEr1C,IAAI,GAAG,KAAKsE,KAAL,CAAWvE,IAAX,CAAgB/I,MAAhB,GACT,MADS,GAET,KAAKuV,KAAL,CAAWhI,KAAE,CAACrI,OAAd,IACA,QADA,GAEA,IAJJ;;SAKK,IAAIkN,CAAC,GAAG,KAAK9E,KAAL,CAAW2hC,MAAX,CAAkBlkC,MAAlB,GAA2B,CAAxC,EAA2CqH,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;YAChD9R,KAAK,GAAG,KAAKgN,KAAL,CAAW2hC,MAAX,CAAkB78B,CAAlB,CAAd;;UACI9R,KAAK,CAACu/C,cAAN,KAAyB/2C,IAAI,CAACmB,KAAlC,EAAyC;QACvC3J,KAAK,CAACu/C,cAAN,GAAuB,KAAKvyC,KAAL,CAAWrD,KAAlC;QACA3J,KAAK,CAAC0I,IAAN,GAAaA,IAAb;OAFF,MAGO;;;;;SAKJsE,KAAL,CAAW2hC,MAAX,CAAkB9hC,IAAlB,CAAuB;MACrBpM,IAAI,EAAEs9C,SADe;MAErBr1C,IAAI,EAAEA,IAFe;MAGrB62C,cAAc,EAAE,KAAKvyC,KAAL,CAAWrD;KAH7B;IAKAnB,IAAI,CAACmD,IAAL,GAAY,KAAK4R,cAAL,CACV/N,OAAO,GACHA,OAAO,CAACuJ,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,GACEvJ,OAAO,GAAG,OADZ,GAEEA,OAHC,GAIH,OALM,CAAZ;SAQKxC,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;IACAnH,IAAI,CAACxI,KAAL,GAAa4K,IAAb;WACO,KAAK+C,UAAL,CAAgBnF,IAAhB,EAAsB,kBAAtB,CAAP;;;EAGFgV,wBAAwB,CACtBhV,IADsB,EAEtBoC,IAFsB,EAGT;IACbpC,IAAI,CAACqB,UAAL,GAAkBe,IAAlB;SACKqL,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,qBAAtB,CAAP;;;EAOFugC,UAAU,CACR/8B,eAAyB,GAAG,KADpB,EAERwzC,qBAA+B,GAAG,IAF1B,EAGU;UACZh3C,IAAI,GAAG,KAAKkF,SAAL,EAAb;SACK0G,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;;QACIk+C,qBAAJ,EAA2B;WACpBzvC,KAAL,CAAWiH,KAAX,CAAiB9Q,WAAjB;;;SAEG6F,cAAL,CAAoBvD,IAApB,EAA0BwD,eAA1B,EAA2C,KAA3C,EAAkDiB,KAAE,CAACzL,MAArD;;QACIg+C,qBAAJ,EAA2B;WACpBzvC,KAAL,CAAWoH,IAAX;;;WAEK,KAAKxJ,UAAL,CAAgBnF,IAAhB,EAAsB,gBAAtB,CAAP;;;EAGFoD,gBAAgB,CAACnC,IAAD,EAA6B;WAEzCA,IAAI,CAAChB,IAAL,KAAc,qBAAd,IACAgB,IAAI,CAACI,UAAL,CAAgBpB,IAAhB,KAAyB,eADzB,IAEA,CAACgB,IAAI,CAACI,UAAL,CAAgBE,KAAhB,CAAsB8B,aAHzB;;;EAOFE,cAAc,CACZvD,IADY,EAEZwD,eAFY,EAGZC,QAHY,EAIZhC,GAJY,EAKN;UACA0B,IAAI,GAAInD,IAAI,CAACmD,IAAL,GAAY,EAA1B;UACMQ,UAAU,GAAI3D,IAAI,CAAC2D,UAAL,GAAkB,EAAtC;SACKs3B,2BAAL,CACE93B,IADF,EAEEK,eAAe,GAAGG,UAAH,GAAgBmH,SAFjC,EAGErH,QAHF,EAIEhC,GAJF;;;EASFw5B,2BAA2B,CACzB93B,IADyB,EAEzBQ,UAFyB,EAGzBF,QAHyB,EAIzBhC,GAJyB,EAKnB;QACFw1C,kBAAkB,GAAG,KAAzB;QACIxE,SAAJ;QACIhM,aAAJ;;WAEO,CAAC,KAAKp6B,GAAL,CAAS5K,GAAT,CAAR,EAAuB;UACjB,CAACw1C,kBAAD,IAAuB,KAAKzyC,KAAL,CAAWgiC,aAAlC,IAAmD,CAACC,aAAxD,EAAuE;QACrEA,aAAa,GAAG,KAAKjiC,KAAL,CAAWiiC,aAA3B;;;YAGIxlC,IAAI,GAAG,KAAK8T,cAAL,CAAoB,IAApB,EAA0BtR,QAA1B,CAAb;;UAEIE,UAAU,IAAI,CAACszC,kBAAf,IAAqC,KAAK7zC,gBAAL,CAAsBnC,IAAtB,CAAzC,EAAsE;cAC9DF,SAAS,GAAG,KAAKuC,eAAL,CAAqBrC,IAArB,CAAlB;QACA0C,UAAU,CAACU,IAAX,CAAgBtD,SAAhB;;YAEI0xC,SAAS,KAAK3nC,SAAd,IAA2B/J,SAAS,CAACH,KAAV,CAAgBA,KAAhB,KAA0B,YAAzD,EAAuE;UACrE6xC,SAAS,GAAG,KAAKjuC,KAAL,CAAWyD,MAAvB;eACK4/B,SAAL,CAAe,IAAf;;cAEIpB,aAAJ,EAAmB;iBACZvkC,KAAL,CAAWukC,aAAX,EAA0B,8BAA1B;;;;;;;MAONwQ,kBAAkB,GAAG,IAArB;MACA9zC,IAAI,CAACkB,IAAL,CAAUpD,IAAV;;;QAGEwxC,SAAS,KAAK,KAAlB,EAAyB;WAClB5K,SAAL,CAAe,KAAf;;;;EAQJmO,QAAQ,CACNh2C,IADM,EAEN4mC,IAFM,EAGU;IAChB5mC,IAAI,CAAC4mC,IAAL,GAAYA,IAAZ;SACKh7B,MAAL,CAAYnH,KAAE,CAACpL,IAAf;IACA2G,IAAI,CAAC4H,IAAL,GAAY,KAAK6E,KAAL,CAAWhI,KAAE,CAACpL,IAAd,IAAsB,IAAtB,GAA6B,KAAKiT,eAAL,EAAzC;SACKV,MAAL,CAAYnH,KAAE,CAACpL,IAAf;IACA2G,IAAI,CAAC8rC,MAAL,GAAc,KAAKr/B,KAAL,CAAWhI,KAAE,CAACtL,MAAd,IAAwB,IAAxB,GAA+B,KAAKmT,eAAL,EAA7C;SACKV,MAAL,CAAYnH,KAAE,CAACtL,MAAf;IAEA6G,IAAI,CAACmD,IAAL,GAIE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAK7+B,cAAL,CAAoB,KAApB,CAFF,CAJF;SASKxN,KAAL,CAAWoH,IAAX;SACKnK,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;WAEO,KAAKhC,UAAL,CAAgBnF,IAAhB,EAAsB,cAAtB,CAAP;;;EAMFm2C,UAAU,CACRn2C,IADQ,EAER4mC,IAFQ,EAGRmP,OAHQ,EAIG;UACLmB,OAAO,GAAG,KAAKzqC,KAAL,CAAWhI,KAAE,CAACpH,GAAd,CAAhB;SACKsM,IAAL;;QAEIutC,OAAJ,EAAa;UACPnB,OAAO,GAAG,CAAC,CAAf,EAAkB,KAAKhoC,UAAL,CAAgBgoC,OAAhB;KADpB,MAEO;MACL/1C,IAAI,CAACm3C,KAAL,GAAapB,OAAO,GAAG,CAAC,CAAxB;;;QAIAnP,IAAI,CAAC3mC,IAAL,KAAc,qBAAd,IACA2mC,IAAI,CAACsP,YAAL,CAAkB,CAAlB,EAAqBtP,IAArB,IAA6B,IAD7B,KAEC,CAACsQ,OAAD,IACC,KAAK1yC,KAAL,CAAWyD,MADZ,IAEC2+B,IAAI,CAAC1mC,IAAL,KAAc,KAFf,IAGC0mC,IAAI,CAACsP,YAAL,CAAkB,CAAlB,EAAqBrpC,EAArB,CAAwB5M,IAAxB,KAAiC,YALnC,CADF,EAOE;WACKiC,KAAL,CACE0kC,IAAI,CAACzlC,KADP,EAEG,GACC+1C,OAAO,GAAG,QAAH,GAAc,QACtB,wDAJH;KARF,MAcO,IAAItQ,IAAI,CAAC3mC,IAAL,KAAc,mBAAlB,EAAuC;WACvCiC,KAAL,CAAW0kC,IAAI,CAACzlC,KAAhB,EAAuB,oCAAvB;;;IAGFnB,IAAI,CAAC+Y,IAAL,GAAY6tB,IAAZ;IACA5mC,IAAI,CAAC0Q,KAAL,GAAawmC,OAAO,GAAG,KAAK5qC,eAAL,EAAH,GAA4B,KAAK4J,gBAAL,EAAhD;SACKtK,MAAL,CAAYnH,KAAE,CAACtL,MAAf;IAEA6G,IAAI,CAACmD,IAAL,GAIE,KAAKywC,0BAAL,CAAgC,MAE9B,KAAK7+B,cAAL,CAAoB,KAApB,CAFF,CAJF;SASKxN,KAAL,CAAWoH,IAAX;SACKnK,KAAL,CAAW2hC,MAAX,CAAkBh/B,GAAlB;WAEO,KAAKhC,UAAL,CAAgBnF,IAAhB,EAAsBk3C,OAAO,GAAG,gBAAH,GAAsB,gBAAnD,CAAP;;;EAKFjB,QAAQ,CACNj2C,IADM,EAENo3C,KAFM,EAGNl3C,IAHM,EAIiB;UACjBg2C,YAAY,GAAIl2C,IAAI,CAACk2C,YAAL,GAAoB,EAA1C;UACMmB,YAAY,GAAG,KAAK78B,SAAL,CAAe,YAAf,CAArB;IACAxa,IAAI,CAACE,IAAL,GAAYA,IAAZ;;aACS;YACD4W,IAAI,GAAG,KAAK5R,SAAL,EAAb;WACKgV,UAAL,CAAgBpD,IAAhB,EAAsB5W,IAAtB;;UACI,KAAKmM,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,CAAJ,EAAqB;QACnB2c,IAAI,CAAC8vB,IAAL,GAAY,KAAK1wB,gBAAL,CAAsBkhC,KAAtB,CAAZ;OADF,MAEO;YAEHl3C,IAAI,KAAK,OAAT,IACA,EAAE,KAAKuM,KAAL,CAAWhI,KAAE,CAACpH,GAAd,KAAsB,KAAK6Q,YAAL,CAAkB,IAAlB,CAAxB,CAFF,EAGE;cAGI,CAACmpC,YAAL,EAAmB;iBACZtpC,UAAL;;SAPJ,MASO,IACL+I,IAAI,CAACjK,EAAL,CAAQ5M,IAAR,KAAiB,YAAjB,IACA,EAAEm3C,KAAK,KAAK,KAAK3qC,KAAL,CAAWhI,KAAE,CAACpH,GAAd,KAAsB,KAAK6Q,YAAL,CAAkB,IAAlB,CAA3B,CAAP,CAFK,EAGL;eACKhM,KAAL,CACE,KAAKsC,KAAL,CAAWsD,UADb,EAEE,0DAFF;;;QAKFgP,IAAI,CAAC8vB,IAAL,GAAY,IAAZ;;;MAEFsP,YAAY,CAAC7xC,IAAb,CAAkB,KAAKc,UAAL,CAAgB2R,IAAhB,EAAsB,oBAAtB,CAAlB;UACI,CAAC,KAAKzK,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAL,EAAyB;;;WAEpB4G,IAAP;;;EAGFka,UAAU,CAACpD,IAAD,EAA6B5W,IAA7B,EAAkE;IAC1E4W,IAAI,CAACjK,EAAL,GAAU,KAAK0yB,gBAAL,EAAV;SACKp9B,SAAL,CACE2U,IAAI,CAACjK,EADP,EAEE3M,IAAI,KAAK,KAAT,GAAiBb,QAAjB,GAA4BD,YAF9B,EAGE0L,SAHF,EAIE,sBAJF;;;EAWFolC,aAAa,CACXlwC,IADW,EAEXs3C,SAAkB,GAAGtD,aAFV,EAGX11C,OAAiB,GAAG,KAHT,EAIR;UACGmZ,WAAW,GAAG6/B,SAAS,GAAGrD,cAAhC;UACMsD,kBAAkB,GAAGD,SAAS,GAAGpD,sBAAvC;UACMsD,SAAS,GAAG,CAAC,CAAC//B,WAAF,IAAiB,EAAE6/B,SAAS,GAAGnD,gBAAd,CAAnC;SAEKxyC,YAAL,CAAkB3B,IAAlB,EAAwB1B,OAAxB;;QAEI,KAAKmO,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,KAAuBm8C,kBAA3B,EAA+C;WACxCxpC,UAAL,CACE,KAAKvJ,KAAL,CAAWrD,KADb,EAEE,oEAFF;;;IAKFnB,IAAI,CAACsyC,SAAL,GAAiB,KAAKjmC,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAjB;;QAEIqc,WAAJ,EAAiB;MACfzX,IAAI,CAAC6M,EAAL,GAAU,KAAK2zB,eAAL,CAAqBgX,SAArB,CAAV;;;UAGIC,kBAAkB,GAAG,KAAKjzC,KAAL,CAAWohC,eAAtC;UACMyJ,WAAW,GAAG,KAAK7qC,KAAL,CAAW6hC,QAA/B;UACMiJ,WAAW,GAAG,KAAK9qC,KAAL,CAAW8hC,QAA/B;SACK9hC,KAAL,CAAWohC,eAAX,GAA6B,KAA7B;SACKphC,KAAL,CAAW6hC,QAAX,GAAsB,CAAtB;SACK7hC,KAAL,CAAW8hC,QAAX,GAAsB,CAAtB;SACK/+B,KAAL,CAAWiH,KAAX,CAAiBnQ,aAAa,CAAC2B,IAAI,CAACuyC,KAAN,EAAavyC,IAAI,CAACsyC,SAAlB,CAA9B;;QAEI,CAAC76B,WAAL,EAAkB;MAChBzX,IAAI,CAAC6M,EAAL,GAAU,KAAK2zB,eAAL,EAAV;;;SAGGxmB,mBAAL,CAAyBha,IAAzB;SAKK4zC,0BAAL,CAAgC,MAAM;WAE/B9+B,0BAAL,CACE9U,IADF,EAEEyX,WAAW,GAAG,qBAAH,GAA2B,oBAFxC;KAFF;SAQKlQ,KAAL,CAAWoH,IAAX;;QAEI8I,WAAW,IAAI,CAAC8/B,kBAApB,EAAwC;WAIjC9Z,wBAAL,CAA8Bz9B,IAA9B;;;SAGGwE,KAAL,CAAWohC,eAAX,GAA6B6R,kBAA7B;SACKjzC,KAAL,CAAW6hC,QAAX,GAAsBgJ,WAAtB;SACK7qC,KAAL,CAAW8hC,QAAX,GAAsBgJ,WAAtB;WAEOtvC,IAAP;;;EAGFwgC,eAAe,CAACgX,SAAD,EAAqC;WAC3CA,SAAS,IAAI,KAAK/qC,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAb,GAAmC,KAAK6U,eAAL,EAAnC,GAA4D,IAAnE;;;EAGFkN,mBAAmB,CAACha,IAAD,EAAmBia,cAAnB,EAAmD;UAC9D04B,eAAe,GAAG,KAAKnuC,KAAL,CAAWihC,YAAnC;SACKjhC,KAAL,CAAWihC,YAAX,GAA0B,IAA1B;SAEK75B,MAAL,CAAYnH,KAAE,CAACvL,MAAf;IACA8G,IAAI,CAACgC,MAAL,GAAc,KAAK2zB,gBAAL,CACZlxB,KAAE,CAACtL,MADS,EAEK,KAFL,EAGZ8gB,cAHY,CAAd;SAMKzV,KAAL,CAAWihC,YAAX,GAA0BkN,eAA1B;SACKpG,8BAAL;;;EAGF9O,wBAAwB,CAACz9B,IAAD,EAAyB;QAC3C,CAACA,IAAI,CAAC6M,EAAV,EAAc;SAMT1K,SAAL,CACEnC,IAAI,CAAC6M,EADP,EAEE,KAAKrI,KAAL,CAAWyD,MAAX,IAAqBjI,IAAI,CAACsyC,SAA1B,IAAuCtyC,IAAI,CAACuyC,KAA5C,GACI,KAAKhrC,KAAL,CAAW+pB,mBAAX,GACEjyB,QADF,GAEED,YAHN,GAIIE,aANN,EAOE,IAPF,EAQE,eARF;;;EAeF+8B,UAAU,CACRr8B,IADQ,EAERyX,WAFQ,EAGRC,UAHQ,EAIL;SACE/N,IAAL;SACK82B,cAAL,CAAoBzgC,IAApB;UAGMyyC,SAAS,GAAG,KAAKjuC,KAAL,CAAWyD,MAA7B;SACKzD,KAAL,CAAWyD,MAAX,GAAoB,IAApB;SAEKuP,YAAL,CAAkBxX,IAAlB,EAAwByX,WAAxB,EAAqCC,UAArC;SACKc,eAAL,CAAqBxY,IAArB;IACAA,IAAI,CAACmD,IAAL,GAAY,KAAKu9B,cAAL,CAAoB,CAAC,CAAC1gC,IAAI,CAACI,UAA3B,CAAZ;SAEKoE,KAAL,CAAWyD,MAAX,GAAoBwqC,SAApB;WAEO,KAAKttC,UAAL,CACLnF,IADK,EAELyX,WAAW,GAAG,kBAAH,GAAwB,iBAF9B,CAAP;;;EAMFY,eAAe,GAAY;WAClB,KAAK5L,KAAL,CAAWhI,KAAE,CAACtK,EAAd,KAAqB,KAAKsS,KAAL,CAAWhI,KAAE,CAACpL,IAAd,CAArB,IAA4C,KAAKoT,KAAL,CAAWhI,KAAE,CAACzL,MAAd,CAAnD;;;EAGFof,aAAa,GAAY;WAChB,KAAK3L,KAAL,CAAWhI,KAAE,CAACvL,MAAd,CAAP;;;EAGFof,sBAAsB,CAACnY,MAAD,EAAmD;WAErE,CAACA,MAAM,CAACyC,QAAR,IACA,CAACzC,MAAM,CAAC8R,MADR,KAEC9R,MAAM,CAAC2C,GAAP,CAAW7K,IAAX,KAAoB,aAApB,IACCkI,MAAM,CAAC2C,GAAP,CAAWlC,KAAX,KAAqB,aAHvB,CADF;;;EAQF8/B,cAAc,CAAC9B,sBAAD,EAA+C;SACtDp6B,KAAL,CAAW0hC,UAAX;UAEM1hC,KAAK,GAAG;MAAEkzC,cAAc,EAAE;KAAhC;QACIxa,UAAyB,GAAG,EAAhC;UACMl5B,SAAsB,GAAG,KAAKkB,SAAL,EAA/B;IACAlB,SAAS,CAACb,IAAV,GAAiB,EAAjB;SAEKyI,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;SAKK86C,0BAAL,CAAgC,MAAM;aAC7B,CAAC,KAAKvnC,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAR,EAA6B;YACvB,KAAKqT,GAAL,CAAS5H,KAAE,CAACpL,IAAZ,CAAJ,EAAuB;cACjB6jC,UAAU,CAACj7B,MAAX,GAAoB,CAAxB,EAA2B;iBACpBC,KAAL,CACE,KAAKsC,KAAL,CAAWsD,UADb,EAEE,gDAFF;;;;;;YAQA,KAAK2E,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAJ,EAAuB;UACrBkjC,UAAU,CAAC74B,IAAX,CAAgB,KAAKspC,cAAL,EAAhB;;;;cAIIhP,MAAM,GAAG,KAAKz5B,SAAL,EAAf;;YAGIg4B,UAAU,CAACj7B,MAAf,EAAuB;UACrB08B,MAAM,CAACzB,UAAP,GAAoBA,UAApB;eACKriB,0BAAL,CAAgC8jB,MAAhC,EAAwCzB,UAAU,CAAC,CAAD,CAAlD;UACAA,UAAU,GAAG,EAAb;;;aAGGwB,gBAAL,CAAsB16B,SAAtB,EAAiC26B,MAAjC,EAAyCn6B,KAAzC,EAAgDo6B,sBAAhD;;YAGED,MAAM,CAACz+B,IAAP,KAAgB,aAAhB,IACAy+B,MAAM,CAACzB,UADP,IAEAyB,MAAM,CAACzB,UAAP,CAAkBj7B,MAAlB,GAA2B,CAH7B,EAIE;eACKC,KAAL,CACEy8B,MAAM,CAACx9B,KADT,EAEE,iFAFF;;;KAjCN;;QAyCI+7B,UAAU,CAACj7B,MAAf,EAAuB;WAChBC,KAAL,CACE,KAAKsC,KAAL,CAAWrD,KADb,EAEE,6CAFF;;;SAMGqD,KAAL,CAAW0hC,UAAX;WAEO,KAAK/gC,UAAL,CAAgBnB,SAAhB,EAA2B,WAA3B,CAAP;;;EAGF06B,gBAAgB,CACd16B,SADc,EAEd26B,MAFc,EAGdn6B,KAHc,EAIdo6B,sBAJc,EAKR;QACF5sB,QAAQ,GAAG,KAAf;UACM1M,WAAW,GAAG,KAAKd,KAAL,CAAWc,WAA/B;;QAEI,KAAKmH,KAAL,CAAWhI,KAAE,CAACxM,IAAd,KAAuB,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,QAAhD,EAA0D;YAClDkC,GAAG,GAAG,KAAKgK,eAAL,CAAqB,IAArB,CAAZ;;UAEI,KAAKsL,aAAL,EAAJ,EAA0B;cAClBjY,MAAqB,GAAIw+B,MAA/B;QAGAx+B,MAAM,CAACD,IAAP,GAAc,QAAd;QACAC,MAAM,CAACyC,QAAP,GAAkB,KAAlB;QACAzC,MAAM,CAAC2C,GAAP,GAAaA,GAAb;QACA3C,MAAM,CAAC8R,MAAP,GAAgB,KAAhB;aACKlO,eAAL,CACEC,SADF,EAEE7D,MAFF,EAGE,KAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;;OARF,MAiBO,IAAI,KAAKkY,eAAL,EAAJ,EAA4B;cAC3BvW,IAAqB,GAAI68B,MAA/B;QAGA78B,IAAI,CAACc,QAAL,GAAgB,KAAhB;QACAd,IAAI,CAACgB,GAAL,GAAWA,GAAX;QACAhB,IAAI,CAACmQ,MAAL,GAAc,KAAd;QACAjO,SAAS,CAACb,IAAV,CAAekB,IAAf,CAAoB,KAAK6T,kBAAL,CAAwBpW,IAAxB,CAApB;;OAPK,MASA,IAAIwD,WAAJ,EAAiB;cAChB,KAAKyI,UAAL,EAAN;;;MAIFiE,QAAQ,GAAG,IAAX;;;SAGG6sB,4BAAL,CACE76B,SADF,EAEE26B,MAFF,EAGEn6B,KAHF,EAIEwN,QAJF,EAKE4sB,sBALF;;;EASFC,4BAA4B,CAC1B76B,SAD0B,EAE1B26B,MAF0B,EAG1Bn6B,KAH0B,EAI1BwN,QAJ0B,EAK1B4sB,sBAL0B,EAM1B;UACM+Y,YAAyC,GAAGhZ,MAAlD;UACMiZ,aAAiD,GAAGjZ,MAA1D;UACMkZ,UAAuC,GAAGlZ,MAAhD;UACMmZ,WAA+C,GAAGnZ,MAAxD;UAEMx+B,MAAkD,GAAGw3C,YAA3D;UACMI,YAAqD,GAAGJ,YAA9D;IAEAhZ,MAAM,CAAC1sB,MAAP,GAAgBD,QAAhB;;QAEI,KAAK3F,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAJ,EAAuB;MAErB+E,MAAM,CAACD,IAAP,GAAc,QAAd;WACK8+B,sBAAL,CAA4B7+B,MAA5B;;UAEIA,MAAM,CAAC2C,GAAP,CAAW7C,IAAX,KAAoB,aAAxB,EAAuC;aAEhCsY,sBAAL,CAA4BvU,SAA5B,EAAuC4zC,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;;;;UAIE,KAAKt/B,sBAAL,CAA4Bq/B,YAA5B,CAAJ,EAA+C;aACxCz1C,KAAL,CAAWy1C,YAAY,CAAC70C,GAAb,CAAiB3B,KAA5B,EAAmC,kCAAnC;;;WAGG4C,eAAL,CACEC,SADF,EAEE2zC,YAFF,EAGE,IAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;;;;UAYIryC,WAAW,GAAG,KAAKd,KAAL,CAAWc,WAA/B;UACMxC,GAAG,GAAG,KAAKk8B,sBAAL,CAA4BL,MAA5B,CAAZ;UACMiS,SAAS,GAAG9tC,GAAG,CAAC7C,IAAJ,KAAa,aAA/B;UAEM+3C,QAAQ,GAAGl1C,GAAG,CAAC7C,IAAJ,KAAa,YAA9B;SAEKg/B,4BAAL,CAAkC8Y,YAAlC;;QAEI,KAAK3/B,aAAL,EAAJ,EAA0B;MACxBjY,MAAM,CAACD,IAAP,GAAc,QAAd;;UAEI0wC,SAAJ,EAAe;aACRr4B,sBAAL,CAA4BvU,SAA5B,EAAuC4zC,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;;;;YAKI3zC,aAAa,GAAG,KAAKqU,sBAAL,CAA4Bq/B,YAA5B,CAAtB;UACIzzC,iBAAiB,GAAG,KAAxB;;UACID,aAAJ,EAAmB;QACjB0zC,YAAY,CAACz3C,IAAb,GAAoB,aAApB;;YAEIy3C,YAAY,CAACza,UAAjB,EAA6B;eACtBh7B,KAAL,CACEy1C,YAAY,CAACx2C,KADf,EAEE,oDAFF;;;YAOEqD,KAAK,CAACkzC,cAAN,IAAwB,CAAC,KAAKl9B,SAAL,CAAe,YAAf,CAA7B,EAA2D;eACpDtY,KAAL,CAAWY,GAAG,CAAC3B,KAAf,EAAsB,yCAAtB;;;QAEFqD,KAAK,CAACkzC,cAAN,GAAuB,IAAvB;QACAxzC,iBAAiB,GAAG06B,sBAApB;;;WAGG76B,eAAL,CACEC,SADF,EAEE2zC,YAFF,EAGE,KAHF,EAIE,KAJF,EAKE1zC,aALF,EAMEC,iBANF;KA7BF,MAqCO,IAAI,KAAKmU,eAAL,EAAJ,EAA4B;UAC7Bu4B,SAAJ,EAAe;aACRqH,wBAAL,CAA8Bj0C,SAA9B,EAAyC8zC,WAAzC;OADF,MAEO;aACA5Y,iBAAL,CAAuBl7B,SAAvB,EAAkC6zC,UAAlC;;KAJG,MAMA,IACLG,QAAQ,IACRl1C,GAAG,CAAC7K,IAAJ,KAAa,OADb,IAEA,CAACqN,WAFD,IAGA,CAAC,KAAK42B,gBAAL,EAJI,EAKL;YAEM39B,WAAW,GAAG,KAAK8N,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAApB;MAEA+E,MAAM,CAACD,IAAP,GAAc,QAAd;WAEK8+B,sBAAL,CAA4B7+B,MAA5B;;UAEIA,MAAM,CAAC2C,GAAP,CAAW7C,IAAX,KAAoB,aAAxB,EAAuC;aAEhCsY,sBAAL,CACEvU,SADF,EAEE4zC,aAFF,EAGEr5C,WAHF,EAIE,IAJF;OAFF,MAQO;YACD,KAAK+Z,sBAAL,CAA4Bq/B,YAA5B,CAAJ,EAA+C;eACxCz1C,KAAL,CACEy1C,YAAY,CAAC70C,GAAb,CAAiB3B,KADnB,EAEE,wCAFF;;;aAMG4C,eAAL,CACEC,SADF,EAEE2zC,YAFF,EAGEp5C,WAHF,EAIE,IAJF,EAKsB,KALtB,EAME,KANF;;KA7BG,MAsCA,IACLy5C,QAAQ,KACPl1C,GAAG,CAAC7K,IAAJ,KAAa,KAAb,IAAsB6K,GAAG,CAAC7K,IAAJ,KAAa,KAD5B,CAAR,IAEA,CAACqN,WAFD,IAGA,EAAE,KAAKmH,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,KAAuB,KAAK8gC,gBAAL,EAAzB,CAJK,EAKL;MAGA/7B,MAAM,CAACD,IAAP,GAAc4C,GAAG,CAAC7K,IAAlB;WAEK+mC,sBAAL,CAA4B2Y,YAA5B;;UAEIx3C,MAAM,CAAC2C,GAAP,CAAW7C,IAAX,KAAoB,aAAxB,EAAuC;aAEhCsY,sBAAL,CAA4BvU,SAA5B,EAAuC4zC,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;OAFF,MAGO;YACD,KAAKt/B,sBAAL,CAA4Bq/B,YAA5B,CAAJ,EAA+C;eACxCz1C,KAAL,CACEy1C,YAAY,CAAC70C,GAAb,CAAiB3B,KADnB,EAEE,yCAFF;;;aAKG4C,eAAL,CACEC,SADF,EAEE2zC,YAFF,EAGE,KAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;;;WAUG91C,uBAAL,CAA6B81C,YAA7B;KAhCK,MAiCA,IAAI,KAAKzb,gBAAL,EAAJ,EAA6B;UAE9B0U,SAAJ,EAAe;aACRqH,wBAAL,CAA8Bj0C,SAA9B,EAAyC8zC,WAAzC;OADF,MAEO;aACA5Y,iBAAL,CAAuBl7B,SAAvB,EAAkC6zC,UAAlC;;KALG,MAOA;WACA9pC,UAAL;;;;EAIJixB,sBAAsB,CAACL,MAAD,EAAqD;UACnE77B,GAAG,GAAG,KAAK6V,iBAAL,CAAuBgmB,MAAvB,CAAZ;;QAGE,CAACA,MAAM,CAAC/7B,QAAR,IACA+7B,MAAM,CAAC1sB,MADP,KAEEnP,GAAD,CAAkC7K,IAAlC,KAA2C,WAA3C,IACE6K,GAAD,CAAqClC,KAArC,KAA+C,WAHjD,CADF,EAKE;WACKsB,KAAL,CACEY,GAAG,CAAC3B,KADN,EAEE,sDAFF;;;QAME2B,GAAG,CAAC7C,IAAJ,KAAa,aAAb,IAA8B6C,GAAG,CAAC+J,EAAJ,CAAO5U,IAAP,KAAgB,aAAlD,EAAiE;WAC1DiK,KAAL,CACEY,GAAG,CAAC3B,KADN,EAEE,2DAFF;;;WAMK2B,GAAP;;;EAGFo8B,iBAAiB,CAACl7B,SAAD,EAAyBlC,IAAzB,EAAgD;QAE3D,KAAKwW,sBAAL,CAA4BxW,IAA5B,CAAJ,EAAuC;WAChCI,KAAL,CACEJ,IAAI,CAACgB,GAAL,CAAS3B,KADX,EAEE,6DAFF;;;IAKF6C,SAAS,CAACb,IAAV,CAAekB,IAAf,CAAoB,KAAK6T,kBAAL,CAAwBpW,IAAxB,CAApB;;;EAGFm2C,wBAAwB,CACtBj0C,SADsB,EAEtBlC,IAFsB,EAGtB;SACKka,YAAL,CAAkB,wBAAlB,EAA4Cla,IAAI,CAACgB,GAAL,CAAS3B,KAArD;IACA6C,SAAS,CAACb,IAAV,CAAekB,IAAf,CAAoB,KAAK8T,yBAAL,CAA+BrW,IAA/B,CAApB;;;EAGFiC,eAAe,CACbC,SADa,EAEb7D,MAFa,EAGb5B,WAHa,EAIbD,OAJa,EAKb2F,aALa,EAMbC,iBANa,EAOP;IACNF,SAAS,CAACb,IAAV,CAAekB,IAAf,CACE,KAAKF,WAAL,CACEhE,MADF,EAEE5B,WAFF,EAGED,OAHF,EAIE2F,aAJF,EAKEC,iBALF,EAME,aANF,EAOE,IAPF,CADF;;;EAaFqU,sBAAsB,CACpBvU,SADoB,EAEpB7D,MAFoB,EAGpB5B,WAHoB,EAIpBD,OAJoB,EAKd;SACD0d,YAAL,CAAkB,qBAAlB,EAAyC7b,MAAM,CAAC2C,GAAP,CAAW3B,KAApD;IACA6C,SAAS,CAACb,IAAV,CAAekB,IAAf,CACE,KAAKF,WAAL,CACEhE,MADF,EAEE5B,WAFF,EAGED,OAHF,EAIsB,KAJtB,EAKE,KALF,EAME,oBANF,EAOE,IAPF,CADF;;;EAcF2gC,4BAA4B,CAE1BH,YAF0B,EAGpB;;EAGR1B,mBAAmB,GAAqB;WAC/BtyB,SAAP;;;EAGFqN,yBAAyB,CACvBnY,IADuB,EAEC;SACnBwE,KAAL,CAAWohC,eAAX,GAA6B,IAA7B;SAEKr+B,KAAL,CAAWiH,KAAX,CAAiBrQ,WAAW,GAAGF,WAA/B;IAEA+B,IAAI,CAACY,KAAL,GAAa,KAAKyL,GAAL,CAAS5H,KAAE,CAACtK,EAAZ,IAAkB,KAAK+b,gBAAL,EAAlB,GAA4C,IAAzD;SACKzI,SAAL;SACKjJ,KAAL,CAAWohC,eAAX,GAA6B,KAA7B;SAEKr+B,KAAL,CAAWoH,IAAX;WAEO,KAAKxJ,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;EAGFkY,kBAAkB,CAAClY,IAAD,EAAyC;QACrD,CAACA,IAAI,CAACuN,cAAV,EAA0B;WACnByO,YAAL,CAAkB,iBAAlB;;;SAGGxX,KAAL,CAAWohC,eAAX,GAA6B,IAA7B;SAEKr+B,KAAL,CAAWiH,KAAX,CAAiBrQ,WAAW,GAAGF,WAA/B;;QAEI,KAAKwO,KAAL,CAAWhI,KAAE,CAACtK,EAAd,CAAJ,EAAuB;WAChB6hB,YAAL,CAAkB,iBAAlB;WACKrS,IAAL;MACA3J,IAAI,CAACY,KAAL,GAAa,KAAKsV,gBAAL,EAAb;KAHF,MAIO;MACLlW,IAAI,CAACY,KAAL,GAAa,IAAb;;;SAEG6M,SAAL;SACKjJ,KAAL,CAAWohC,eAAX,GAA6B,KAA7B;SAEKr+B,KAAL,CAAWoH,IAAX;WAEO,KAAKxJ,UAAL,CAAgBnF,IAAhB,EAAsB,eAAtB,CAAP;;;EAGFwX,YAAY,CACVxX,IADU,EAEVyX,WAFU,EAGVC,UAHU,EAIJ;QACF,KAAKjL,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;MACvB+H,IAAI,CAAC6M,EAAL,GAAU,KAAKC,eAAL,EAAV;;UACI2K,WAAJ,EAAiB;aACVtV,SAAL,CAAenC,IAAI,CAAC6M,EAApB,EAAwB1N,UAAxB,EAAoC2L,SAApC,EAA+C,YAA/C;;KAHJ,MAKO;UACD4M,UAAU,IAAI,CAACD,WAAnB,EAAgC;QAC9BzX,IAAI,CAAC6M,EAAL,GAAU,IAAV;OADF,MAEO;aACAkB,UAAL,CAAgB,IAAhB,EAAsB,0BAAtB;;;;;EAKNyK,eAAe,CAACxY,IAAD,EAAsB;IACnCA,IAAI,CAACI,UAAL,GAAkB,KAAKiM,GAAL,CAAS5H,KAAE,CAAC1H,QAAZ,IAAwB,KAAKkyC,mBAAL,EAAxB,GAAqD,IAAvE;;;EAKFhgC,WAAW,CAACjP,IAAD,EAA4B;UAC/Bk4C,UAAU,GAAG,KAAKtX,gCAAL,CAAsC5gC,IAAtC,CAAnB;UACMm4C,iBAAiB,GAAG,CAACD,UAAD,IAAe,KAAK7rC,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAzC;UACMg/C,OAAO,GAAGD,iBAAiB,IAAI,KAAK/gC,aAAL,CAAmBpX,IAAnB,CAArC;UACMuX,YAAY,GAChB6gC,OAAO,IAAI,KAAK9gC,kCAAL,CAAwCtX,IAAxC,CADb;UAEMq4C,mBAAmB,GACvBF,iBAAiB,KAAK,CAAC5gC,YAAD,IAAiB,KAAKlL,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAtB,CADnB;UAEMk/C,cAAc,GAAGJ,UAAU,IAAIE,OAArC;;QAEIA,OAAO,IAAI,CAAC7gC,YAAhB,EAA8B;UACxB2gC,UAAJ,EAAgB,KAAKnqC,UAAL;WACXoJ,eAAL,CAAqBnX,IAArB,EAA2B,IAA3B;aAEO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,sBAAtB,CAAP;;;UAGIu4C,aAAa,GAAG,KAAKC,+BAAL,CAAqCx4C,IAArC,CAAtB;;QAGGk4C,UAAU,IAAIC,iBAAd,IAAmC,CAACC,OAApC,IAA+C,CAACG,aAAjD,IACChhC,YAAY,IAAI8gC,mBAAhB,IAAuC,CAACE,aAF3C,EAGE;YACM,KAAKxqC,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAAC3L,MAAzB,CAAN;;;QAGE2/C,cAAJ;;QACIH,cAAc,IAAIC,aAAtB,EAAqC;MACnCE,cAAc,GAAG,KAAjB;WACKthC,eAAL,CAAqBnX,IAArB,EAA2Bs4C,cAA3B;KAFF,MAGO;MACLG,cAAc,GAAG,KAAKC,2BAAL,CAAiC14C,IAAjC,CAAjB;;;QAGEs4C,cAAc,IAAIC,aAAlB,IAAmCE,cAAvC,EAAuD;WAChD5X,WAAL,CAAiB7gC,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,CAAC,CAACA,IAAI,CAAC8F,MAA3C;aACO,KAAKX,UAAL,CAAgBnF,IAAhB,EAAsB,wBAAtB,CAAP;;;QAGE,KAAKqM,GAAL,CAAS5H,KAAE,CAAC7I,QAAZ,CAAJ,EAA2B;MAEzBoE,IAAI,CAACgK,WAAL,GAAmB,KAAKu0B,4BAAL,EAAnB;WACKsC,WAAL,CAAiB7gC,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;aAEO,KAAKmF,UAAL,CAAgBnF,IAAhB,EAAsB,0BAAtB,CAAP;;;UAGI,KAAK+N,UAAL,CAAgB,IAAhB,EAAsBtJ,KAAE,CAAC3L,MAAzB,CAAN;;;EAIFse,aAAa,CAACpX,IAAD,EAAwB;WAC5B,KAAKqM,GAAL,CAAS5H,KAAE,CAACrJ,IAAZ,CAAP;;;EAGFwlC,gCAAgC,CAAC5gC,IAAD,EAAwB;QAClD,KAAKkV,wBAAL,EAAJ,EAAqC;WAE9B8G,YAAL,CAAkB,mBAAlB;YACM9C,SAAS,GAAG,KAAKhU,SAAL,EAAlB;MACAgU,SAAS,CAACynB,QAAV,GAAqB,KAAK7zB,eAAL,CAAqB,IAArB,CAArB;MACA9M,IAAI,CAACiX,UAAL,GAAkB,CAAC,KAAK9R,UAAL,CAAgB+T,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;aACO,IAAP;;;WAEK,KAAP;;;EAGF5B,kCAAkC,CAACtX,IAAD,EAAwB;QACpD,KAAKkO,YAAL,CAAkB,IAAlB,CAAJ,EAA6B;UACvB,CAAClO,IAAI,CAACiX,UAAV,EAAsBjX,IAAI,CAACiX,UAAL,GAAkB,EAAlB;WACjB+E,YAAL,CAAkB,qBAAlB;YAEM9C,SAAS,GAAG,KAAKhY,WAAL,CAChB,KAAKsD,KAAL,CAAWwJ,YADK,EAEhB,KAAKxJ,KAAL,CAAWygC,eAFK,CAAlB;WAKKt7B,IAAL;MAEAuP,SAAS,CAACynB,QAAV,GAAqB,KAAK7zB,eAAL,CAAqB,IAArB,CAArB;MACA9M,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CACE,KAAKc,UAAL,CAAgB+T,SAAhB,EAA2B,0BAA3B,CADF;aAGO,IAAP;;;WAEK,KAAP;;;EAGFs/B,+BAA+B,CAACx4C,IAAD,EAAwB;QACjD,KAAKyM,KAAL,CAAWhI,KAAE,CAAC3L,MAAd,CAAJ,EAA2B;UACrB,CAACkH,IAAI,CAACiX,UAAV,EAAsBjX,IAAI,CAACiX,UAAL,GAAkB,EAAlB;MACtBjX,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB,GAAG,KAAK6S,qBAAL,EAAxB;MAEAlX,IAAI,CAAC8F,MAAL,GAAc,IAAd;MACA9F,IAAI,CAACgK,WAAL,GAAmB,IAAnB;aAEO,IAAP;;;WAEK,KAAP;;;EAGF0uC,2BAA2B,CAAC14C,IAAD,EAAwB;QAC7C,KAAKiV,4BAAL,EAAJ,EAAyC;UACnC,KAAK/G,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;cACxBvE,IAAI,GAAG,KAAKuI,SAAL,EAAb;;YAGIvI,IAAI,CAAC1J,IAAL,KAAcwE,KAAE,CAACxI,SAArB,EAAgC;eACzB8R,UAAL,CAAgBpE,IAAI,CAACxI,KAArB,EAA6B,uCAA7B;;;;MAIJnB,IAAI,CAACiX,UAAL,GAAkB,EAAlB;MACAjX,IAAI,CAAC8F,MAAL,GAAc,IAAd;MACA9F,IAAI,CAACgK,WAAL,GAAmB,KAAK+M,sBAAL,CAA4B/W,IAA5B,CAAnB;aAEO,IAAP;;;WAEK,KAAP;;;EAGFs1C,eAAe,GAAY;QACrB,CAAC,KAAKpnC,YAAL,CAAkB,OAAlB,CAAL,EAAiC,OAAO,KAAP;UAE3B;MAAE7E;QAAQ,KAAK7E,KAArB;IAEAyB,cAAc,CAACy9B,SAAf,GAA2Br6B,GAA3B;UACMmrC,IAAI,GAAGvuC,cAAc,CAACqF,IAAf,CAAoB,KAAKzD,KAAzB,CAAb;QAEI,CAAC2sC,IAAD,IAAS,CAACA,IAAI,CAACvyC,MAAnB,EAA2B,OAAO,KAAP;UAErB0H,IAAI,GAAGN,GAAG,GAAGmrC,IAAI,CAAC,CAAD,CAAJ,CAAQvyC,MAA3B;WAGE,CAAC2D,SAAS,CAACgC,IAAV,CAAe,KAAKC,KAAL,CAAWnG,KAAX,CAAiB2H,GAAjB,EAAsBM,IAAtB,CAAf,CAAD,IACA,KAAK9B,KAAL,CAAWnG,KAAX,CAAiBiI,IAAjB,EAAuBA,IAAI,GAAG,CAA9B,MAAqC,UADrC,KAECA,IAAI,GAAG,CAAP,KAAa,KAAK1H,MAAlB,IACC,CAAC2H,gBAAgB,CAAC,KAAK/B,KAAL,CAAW+P,UAAX,CAAsBjO,IAAI,GAAG,CAA7B,CAAD,CAHnB,CADF;;;EAQF40B,4BAA4B,GAAiC;UACrDn8B,IAAI,GAAG,KAAK8C,SAAL,EAAb;UAEM5G,OAAO,GAAG,KAAKg3C,eAAL,EAAhB;;QAEI,KAAK7oC,KAAL,CAAWhI,KAAE,CAACxI,SAAd,KAA4BqC,OAAhC,EAAyC;WAClCqL,IAAL;;UACIrL,OAAJ,EAAa;aACNqL,IAAL;;;aAGK,KAAKumC,aAAL,CACL9tC,IADK,EAEL6xC,cAAc,GAAGE,gBAFZ,EAGL71C,OAHK,CAAP;KANF,MAWO,IAAI,KAAKmO,KAAL,CAAWhI,KAAE,CAAC3H,MAAd,CAAJ,EAA2B;aACzB,KAAKu/B,UAAL,CAAgBj6B,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;KADK,MAEA,IAAI,KAAKqK,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAJ,EAAuB;UAE1B,KAAKwgB,SAAL,CAAe,YAAf,KACA,KAAKxP,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAFF,EAGE;aACK+C,UAAL,CACE,KAAKvJ,KAAL,CAAWrD,KADb,EAEE,6DACE,kEADF,GAEE,0CAJJ;;;WAOGqvC,eAAL,CAAqB,KAArB;aACO,KAAKnU,UAAL,CAAgBj6B,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;KAbK,MAcA,IAAI,KAAKqK,KAAL,CAAWhI,KAAE,CAACjI,MAAd,KAAyB,KAAKiQ,KAAL,CAAWhI,KAAE,CAAClI,IAAd,CAAzB,IAAgD,KAAKwS,KAAL,EAApD,EAAkE;aAChE,KAAK7M,KAAL,CACL,KAAKsC,KAAL,CAAWrD,KADN,EAEL,6EAFK,CAAP;KADK,MAKA;YACC26B,GAAG,GAAG,KAAK5lB,gBAAL,EAAZ;WACKzI,SAAL;aACOquB,GAAP;;;;EAKJ/kB,sBAAsB,CAAC/W,IAAD,EAAiD;WAC9D,KAAK+U,cAAL,CAAoB,IAApB,CAAP;;;EAGFG,wBAAwB,GAAY;QAC9B,KAAKzI,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAJ,EAAyB;aAChB,KAAKuM,KAAL,CAAW5D,KAAX,KAAqB,OAArB,IAAgC,KAAK4D,KAAL,CAAW5D,KAAX,KAAqB,KAA5D;;;QAGE,CAAC,KAAK6L,KAAL,CAAWhI,KAAE,CAAC7I,QAAd,CAAL,EAA8B;aACrB,KAAP;;;UAGIsW,SAAS,GAAG,KAAKA,SAAL,EAAlB;WAEEA,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAACrL,KAAtB,IACC8Y,SAAS,CAACjS,IAAV,KAAmBwE,KAAE,CAACxM,IAAtB,IAA8Bia,SAAS,CAACtR,KAAV,KAAoB,MAFrD;;;EAMFuW,eAAe,CAACnX,IAAD,EAAiC4L,MAAjC,EAAyD;QAClE,KAAKiC,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;MAC9B7N,IAAI,CAAC8F,MAAL,GAAc,KAAKo7B,iBAAL,EAAd;WACKL,WAAL,CAAiB7gC,IAAjB;KAFF,MAGO;UACD4L,MAAJ,EAAY;aACLmC,UAAL;OADF,MAEO;QACL/N,IAAI,CAAC8F,MAAL,GAAc,IAAd;;;;SAIC2H,SAAL;;;EAGFwH,4BAA4B,GAAY;QAClC,KAAKxI,KAAL,CAAWhI,KAAE,CAACzK,EAAd,CAAJ,EAAuB;WAChBqyC,eAAL,CAAqB,CAAC,YAAD,EAAe,mBAAf,CAArB;;UACI,KAAK7xB,SAAL,CAAe,YAAf,CAAJ,EAAkC;YAC5B,KAAKxP,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAAJ,EAAkE;eAC3D+C,UAAL,CACE,KAAKvJ,KAAL,CAAWrD,KADb,EAEE,6DACE,kEADF,GAEE,0CAJJ;SADF,MAOO;iBACE,IAAP;;;;;WAMJ,KAAKqD,KAAL,CAAWvE,IAAX,CAAgBvI,OAAhB,KAA4B,KAA5B,IACA,KAAK8M,KAAL,CAAWvE,IAAX,CAAgBvI,OAAhB,KAA4B,OAD5B,IAEA,KAAK8M,KAAL,CAAWvE,IAAX,CAAgBvI,OAAhB,KAA4B,UAF5B,IAGA,KAAK8M,KAAL,CAAWvE,IAAX,CAAgBvI,OAAhB,KAA4B,OAH5B,IAIA,KAAKqX,KAAL,EAJA,IAKA,KAAKumC,eAAL,EANF;;;EAUFzU,WAAW,CACT7gC,IADS,EAET24C,UAFS,EAGTC,SAHS,EAITC,MAJS,EAKH;QACFF,UAAJ,EAAgB;UAEVC,SAAJ,EAAe;aAERva,qBAAL,CAA2Br+B,IAA3B,EAAiC,SAAjC;OAFF,MAGO,IAAIA,IAAI,CAACiX,UAAL,IAAmBjX,IAAI,CAACiX,UAAL,CAAgBhV,MAAvC,EAA+C;6CAE5BjC,IAAI,CAACiX,UAFuB,wCAEX;gBAA9BiC,SAAS,wBAAf;eACEmlB,qBAAL,CAA2BnlB,SAA3B,EAAsCA,SAAS,CAACynB,QAAV,CAAmB1oC,IAAzD;;cAEI,CAAC4gD,MAAD,IAAW3/B,SAAS,CAACC,KAAzB,EAAgC;iBAEzBY,iBAAL,CACEb,SAAS,CAACC,KAAV,CAAgBlhB,IADlB,EAEEihB,SAAS,CAACC,KAAV,CAAgBhY,KAFlB,EAGE,IAHF,EAIE,KAJF;iBAQKoG,KAAL,CAAWuqB,gBAAX,CAA4B5Y,SAAS,CAACC,KAAtC;;;OAfC,MAkBA,IAAInZ,IAAI,CAACgK,WAAT,EAAsB;YAGzBhK,IAAI,CAACgK,WAAL,CAAiB/J,IAAjB,KAA0B,qBAA1B,IACAD,IAAI,CAACgK,WAAL,CAAiB/J,IAAjB,KAA0B,kBAF5B,EAGE;gBACM4M,EAAE,GAAG7M,IAAI,CAACgK,WAAL,CAAiB6C,EAA5B;cACI,CAACA,EAAL,EAAS,MAAM,IAAItB,KAAJ,CAAU,mBAAV,CAAN;eAEJ8yB,qBAAL,CAA2Br+B,IAA3B,EAAiC6M,EAAE,CAAC5U,IAApC;SAPF,MAQO,IAAI+H,IAAI,CAACgK,WAAL,CAAiB/J,IAAjB,KAA0B,qBAA9B,EAAqD;oDAChCD,IAAI,CAACgK,WAAL,CAAiBksC,YADe,6CACD;kBAA9ClsC,WAAW,6BAAjB;iBACEpI,gBAAL,CAAsBoI,WAAW,CAAC6C,EAAlC;;;;;;UAMF6oC,wBAAwB,GAAG,KAAKlxC,KAAL,CAAW4hC,cAAX,CAC/B,KAAK5hC,KAAL,CAAW4hC,cAAX,CAA0BnkC,MAA1B,GAAmC,CADJ,CAAjC;;QAGIyzC,wBAAwB,CAACzzC,MAA7B,EAAqC;YAC7BqN,OAAO,GACXtP,IAAI,CAACgK,WAAL,KACChK,IAAI,CAACgK,WAAL,CAAiB/J,IAAjB,KAA0B,kBAA1B,IACCD,IAAI,CAACgK,WAAL,CAAiB/J,IAAjB,KAA0B,iBAF5B,CADF;;UAII,CAACD,IAAI,CAACgK,WAAN,IAAqB,CAACsF,OAA1B,EAAmC;cAC3B,KAAKpN,KAAL,CACJlC,IAAI,CAACmB,KADD,EAEJ,iEAFI,CAAN;;;WAKGs/B,cAAL,CAAoBzgC,IAAI,CAACgK,WAAzB;;;;EAIJpI,gBAAgB,CAAC5B,IAAD,EAA2C;QACrDA,IAAI,CAACC,IAAL,KAAc,YAAlB,EAAgC;WACzBo+B,qBAAL,CAA2Br+B,IAA3B,EAAiCA,IAAI,CAAC/H,IAAtC;KADF,MAEO,IAAI+H,IAAI,CAACC,IAAL,KAAc,eAAlB,EAAmC;2CACrBD,IAAI,CAACwC,UADgB,wCACJ;cAAzBV,IAAI,wBAAV;aACEF,gBAAL,CAAsBE,IAAtB;;KAFG,MAIA,IAAI9B,IAAI,CAACC,IAAL,KAAc,cAAlB,EAAkC;yCACpBD,IAAI,CAACitC,QADe,sCACL;cAAvBW,IAAI,sBAAV;;YACCA,IAAJ,EAAU;eACHhsC,gBAAL,CAAsBgsC,IAAtB;;;KAHC,MAMA,IAAI5tC,IAAI,CAACC,IAAL,KAAc,gBAAlB,EAAoC;WACpC2B,gBAAL,CAAsB5B,IAAI,CAACY,KAA3B;KADK,MAEA,IAAIZ,IAAI,CAACC,IAAL,KAAc,aAAlB,EAAiC;WACjC2B,gBAAL,CAAsB5B,IAAI,CAACoT,QAA3B;KADK,MAEA,IAAIpT,IAAI,CAACC,IAAL,KAAc,mBAAlB,EAAuC;WACvC2B,gBAAL,CAAsB5B,IAAI,CAAC+Y,IAA3B;;;;EAIJslB,qBAAqB,CACnBr+B,IADmB,EAMnB/H,IANmB,EAOb;QACF,KAAKuM,KAAL,CAAWkiC,mBAAX,CAA+Bn2B,OAA/B,CAAuCtY,IAAvC,IAA+C,CAAC,CAApD,EAAuD;YAC/C,KAAKiK,KAAL,CACJlC,IAAI,CAACmB,KADD,EAEJlJ,IAAI,KAAK,SAAT,GACI,6CADJ,GAEK,KAAIA,IAAK,oEAJV,CAAN;;;SAOGuM,KAAL,CAAWkiC,mBAAX,CAA+BriC,IAA/B,CAAoCpM,IAApC;;;EAKFif,qBAAqB,GAA6B;UAC1C4hC,KAAK,GAAG,EAAd;QACIpL,KAAK,GAAG,IAAZ;SAGK9hC,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;;WAEO,CAAC,KAAKuT,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAR,EAA6B;UACvB00C,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;aACA9hC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;YACI,KAAKiT,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAJ,EAAyB;;;YAGrBgH,IAAI,GAAG,KAAKkF,SAAL,EAAb;MACAlF,IAAI,CAACmZ,KAAL,GAAa,KAAKrM,eAAL,CAAqB,IAArB,CAAb;MACA9M,IAAI,CAAC2gC,QAAL,GAAgB,KAAK9yB,aAAL,CAAmB,IAAnB,IACZ,KAAKf,eAAL,CAAqB,IAArB,CADY,GAEZ9M,IAAI,CAACmZ,KAAL,CAAWS,OAAX,EAFJ;MAGAk/B,KAAK,CAACz0C,IAAN,CAAW,KAAKc,UAAL,CAAgBnF,IAAhB,EAAsB,iBAAtB,CAAX;;;WAGK84C,KAAP;;;EAKFpqC,WAAW,CAAC1O,IAAD,EAA4B;IAErCA,IAAI,CAACiX,UAAL,GAAkB,EAAlB;;QACI,CAAC,KAAKxK,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAL,EAA4B;YACpBw/C,UAAU,GAAG,KAAK9+B,gCAAL,CAAsCpZ,IAAtC,CAAnB;YACM+4C,SAAS,GAAG,CAACb,UAAD,IAAe,KAAK7rC,GAAL,CAAS5H,KAAE,CAACrL,KAAZ,CAAjC;YACMg/C,OAAO,GAAGW,SAAS,IAAI,KAAK/X,6BAAL,CAAmChhC,IAAnC,CAA7B;UACI+4C,SAAS,IAAI,CAACX,OAAlB,EAA2B,KAAKnX,0BAAL,CAAgCjhC,IAAhC;WACtBkM,gBAAL,CAAsB,MAAtB;;;IAEFlM,IAAI,CAAC8F,MAAL,GAAc,KAAKo7B,iBAAL,EAAd;SACKzzB,SAAL;WACO,KAAKtI,UAAL,CAAgBnF,IAAhB,EAAsB,mBAAtB,CAAP;;;EAGFkhC,iBAAiB,GAAoB;QAC/B,CAAC,KAAKz0B,KAAL,CAAWhI,KAAE,CAAC/L,MAAd,CAAL,EAA4B,KAAKqV,UAAL;WACrB,KAAKzJ,aAAL,EAAP;;;EAIF0U,wBAAwB,CAAChZ,IAAD,EAAqC;WACpD,KAAKyM,KAAL,CAAWhI,KAAE,CAACxM,IAAd,CAAP;;;EAGFghB,yBAAyB,CACvBjZ,IADuB,EAEvBkZ,SAFuB,EAGvBjZ,IAHuB,EAIvBsC,kBAJuB,EAKjB;IACN2W,SAAS,CAACC,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;SACK3K,SAAL,CACE+W,SAAS,CAACC,KADZ,EAEE/Z,YAFF,EAGE0L,SAHF,EAIEvI,kBAJF;IAMAvC,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB,KAAKc,UAAL,CAAgB+T,SAAhB,EAA2BjZ,IAA3B,CAArB;;;EAGFmZ,gCAAgC,CAACpZ,IAAD,EAAqC;QAC/D,KAAKgZ,wBAAL,CAA8BhZ,IAA9B,CAAJ,EAAyC;WAElCiZ,yBAAL,CACEjZ,IADF,EAEE,KAAKkF,SAAL,EAFF,EAGE,wBAHF,EAIE,0BAJF;aAMO,IAAP;;;WAEK,KAAP;;;EAGF87B,6BAA6B,CAAChhC,IAAD,EAAqC;QAC5D,KAAKyM,KAAL,CAAWhI,KAAE,CAACrJ,IAAd,CAAJ,EAAyB;YACjB8d,SAAS,GAAG,KAAKhU,SAAL,EAAlB;WACKyE,IAAL;WACKuC,gBAAL,CAAsB,IAAtB;WAEK+M,yBAAL,CACEjZ,IADF,EAEEkZ,SAFF,EAGE,0BAHF,EAIE,4BAJF;aAMO,IAAP;;;WAEK,KAAP;;;EAGF+nB,0BAA0B,CAACjhC,IAAD,EAA4B;QAChD0tC,KAAK,GAAG,IAAZ;SACK9hC,MAAL,CAAYnH,KAAE,CAAC3L,MAAf;;WACO,CAAC,KAAKuT,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAR,EAA6B;UACvB00C,KAAJ,EAAW;QACTA,KAAK,GAAG,KAAR;OADF,MAEO;YAED,KAAKrhC,GAAL,CAAS5H,KAAE,CAACnL,KAAZ,CAAJ,EAAwB;eACjByU,UAAL,CACE,IADF,EAEE,8CACE,2DAHJ;;;aAOGnC,MAAL,CAAYnH,KAAE,CAACrL,KAAf;YACI,KAAKiT,GAAL,CAAS5H,KAAE,CAACzL,MAAZ,CAAJ,EAAyB;;;WAGtBqgB,oBAAL,CAA0BrZ,IAA1B;;;;EAIJqZ,oBAAoB,CAACrZ,IAAD,EAAkC;UAC9CkZ,SAAS,GAAG,KAAKhU,SAAL,EAAlB;IACAgU,SAAS,CAACS,QAAV,GAAqB,KAAK7M,eAAL,CAAqB,IAArB,CAArB;;QACI,KAAKe,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;MAC5BqL,SAAS,CAACC,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;KADF,MAEO;WACAiN,iBAAL,CACEb,SAAS,CAACS,QAAV,CAAmB1hB,IADrB,EAEEihB,SAAS,CAAC/X,KAFZ,EAGE,IAHF,EAIE,IAJF;MAMA+X,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;;;SAEGzX,SAAL,CACE+W,SAAS,CAACC,KADZ,EAEE/Z,YAFF,EAGE0L,SAHF,EAIE,kBAJF;IAMA9K,IAAI,CAACiX,UAAL,CAAgB5S,IAAhB,CAAqB,KAAKc,UAAL,CAAgB+T,SAAhB,EAA2B,iBAA3B,CAArB;;;;;AC1kEW,MAAM8/B,MAAN,SAAqB5E,eAArB,CAAqC;EAMlD78C,WAAW,CAACW,OAAD,EAAoB2P,KAApB,EAAmC;IAC5C3P,OAAO,GAAGirC,UAAU,CAACjrC,OAAD,CAApB;UACMA,OAAN,EAAe2P,KAAf;UAEMgpB,YAAY,GAAG,KAAK8B,eAAL,EAArB;SAEKz6B,OAAL,GAAeA,OAAf;SACKsQ,QAAL,GAAgB,KAAKtQ,OAAL,CAAaqqC,UAAb,KAA4B,QAA5C;SACKh7B,KAAL,GAAa,IAAIspB,YAAJ,CAAiB,KAAK3uB,KAAL,CAAWixB,IAAX,CAAgB,IAAhB,CAAjB,EAAwC,KAAK3qB,QAA7C,CAAb;SACK24B,OAAL,GAAe8X,UAAU,CAAC,KAAK/gD,OAAL,CAAaipC,OAAd,CAAzB;SACK8C,QAAL,GAAgB/rC,OAAO,CAACsqC,cAAxB;;;EAIF7P,eAAe,GAA2B;WACjC9B,YAAP;;;EAGFpa,KAAK,GAAS;SACPlP,KAAL,CAAWiH,KAAX,CAAiB7Q,aAAjB;UACMif,IAAI,GAAG,KAAK1X,SAAL,EAAb;UACM2X,OAAO,GAAG,KAAK3X,SAAL,EAAhB;SACKuX,SAAL;WACO,KAAKE,aAAL,CAAmBC,IAAnB,EAAyBC,OAAzB,CAAP;;;;;AAIJ,SAASo8B,UAAT,CAAoB9X,OAApB,EAAqD;QAC7C+X,SAAqB,GAAG,IAAInhD,GAAJ,EAA9B;;wBACqBopC,OAF8B,eAErB;UAAnBE,MAAM,GAAIF,OAAJ,IAAZ;UACG,CAAClpC,IAAD,EAAOC,OAAP,IAAkBopC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,EAAS,EAAT,CAAzD;QACI,CAAC6X,SAAS,CAACxwC,GAAV,CAAczQ,IAAd,CAAL,EAA0BihD,SAAS,CAAC9gD,GAAV,CAAcH,IAAd,EAAoBC,OAAO,IAAI,EAA/B;;;SAErBghD,SAAP;;;AClCK,SAASziC,KAAT,CAAe5O,KAAf,EAA8B3P,OAA9B,EAAuD;MACxDA,OAAO,IAAIA,OAAO,CAACqqC,UAAR,KAAuB,aAAtC,EAAqD;IACnDrqC,OAAO,qBACFA,OADE,CAAP;;QAGI;MACFA,OAAO,CAACqqC,UAAR,GAAqB,QAArB;YACMmK,MAAM,GAAGyM,SAAS,CAACjhD,OAAD,EAAU2P,KAAV,CAAxB;YACMuxC,GAAG,GAAG1M,MAAM,CAACj2B,KAAP,EAAZ;UAII,CAACi2B,MAAM,CAAC7I,iBAAZ,EAA+BuV,GAAG,CAACv8B,OAAJ,CAAY0lB,UAAZ,GAAyB,QAAzB;aACxB6W,GAAP;KARF,CASE,OAAOC,WAAP,EAAoB;UAChB;QACFnhD,OAAO,CAACqqC,UAAR,GAAqB,QAArB;eACO4W,SAAS,CAACjhD,OAAD,EAAU2P,KAAV,CAAT,CAA0B4O,KAA1B,EAAP;OAFF,CAGE,OAAO6iC,WAAP,EAAoB;;YAEhBD,WAAN;;GAnBJ,MAqBO;WACEF,SAAS,CAACjhD,OAAD,EAAU2P,KAAV,CAAT,CAA0B4O,KAA1B,EAAP;;;AAIJ,AAAO,SAASnK,eAAT,CAAyBzE,KAAzB,EAAwC3P,OAAxC,EAAuE;QACtEw0C,MAAM,GAAGyM,SAAS,CAACjhD,OAAD,EAAU2P,KAAV,CAAxB;;MACI6kC,MAAM,CAACx0C,OAAP,CAAe6qC,UAAnB,EAA+B;IAC7B2J,MAAM,CAACloC,KAAP,CAAayD,MAAb,GAAsB,IAAtB;;;SAEKykC,MAAM,CAACsB,aAAP,EAAP;;AAGF;AAEA,SAASmL,SAAT,CAAmBjhD,OAAnB,EAAsC2P,KAAtC,EAA6D;MACvD+0B,GAAG,GAAGoc,MAAV;;MACI9gD,OAAO,IAAIA,OAAO,CAACipC,OAAvB,EAAgC;IAC9BO,eAAe,CAACxpC,OAAO,CAACipC,OAAT,CAAf;IACAvE,GAAG,GAAG2c,cAAc,CAACrhD,OAAO,CAACipC,OAAT,CAApB;;;SAGK,IAAIvE,GAAJ,CAAQ1kC,OAAR,EAAiB2P,KAAjB,CAAP;;;AAGF,MAAM2xC,gBAAkD,GAAG,EAA3D;;AAGA,SAASD,cAAT,CAAwBE,kBAAxB,EAAuE;QAC/DC,UAAU,GAAGvX,gBAAgB,CAACrB,MAAjB,CAAwB7oC,IAAI,IAC7CuiB,SAAS,CAACi/B,kBAAD,EAAqBxhD,IAArB,CADQ,CAAnB;QAIM6K,GAAG,GAAG42C,UAAU,CAAC9X,IAAX,CAAgB,GAAhB,CAAZ;MACIhF,GAAG,GAAG4c,gBAAgB,CAAC12C,GAAD,CAA1B;;MACI,CAAC85B,GAAL,EAAU;IACRA,GAAG,GAAGoc,MAAN;;0BACqBU,UAFb,eAEyB;YAAtBrY,MAAM,GAAIqY,UAAJ,IAAZ;MACH9c,GAAG,GAAGiF,YAAY,CAACR,MAAD,CAAZ,CAAqBzE,GAArB,CAAN;;;IAEF4c,gBAAgB,CAAC12C,GAAD,CAAhB,GAAwB85B,GAAxB;;;SAEKA,GAAP;;;;;;;"}